//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace cactus_PS_ {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PSDatabase5DataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PSDatabase5DataSet : global::System.Data.DataSet {
        
        private AccountsTableDataTable tableAccountsTable;
        
        private BanksTableDataTable tableBanksTable;
        
        private chequesTableDataTable tablechequesTable;
        
        private personsTableDataTable tablepersonsTable;
        
        private projectsPersonsDataTable tableprojectsPersons;
        
        private projectsTableDataTable tableprojectsTable;
        
        private spentDefDataTable tablespentDef;
        
        private spentMasterDataTable tablespentMaster;
        
        private detractDefDataTable tabledetractDef;
        
        private pensionDefDataTable tablepensionDef;
        
        private pensionsTableDataTable tablepensionsTable;
        
        private docsTableDataTable tabledocsTable;
        
        private View1DataTable tableView1;
        
        private pensionsViewDataTable tablepensionsView;
        
        private INReceiptViewDataTable tableINReceiptView;
        
        private chequesViewDataTable tablechequesView;
        
        private detractsViewDataTable tabledetractsView;
        
        private receiptOUTDataTable tablereceiptOUT;
        
        private defsViewDataTable tabledefsView;
        
        private accountTypesTableDataTable tableaccountTypesTable;
        
        private AccountingDocsDataTable tableAccountingDocs;
        
        private accDocEventsTableDataTable tableaccDocEventsTable;
        
        private invoiceItemsTableDataTable tableinvoiceItemsTable;
        
        private invoicesTableDataTable tableinvoicesTable;
        
        private viw_invoiceItemsDataTable tableviw_invoiceItems;
        
        private viw_accDocDataTable tableviw_accDoc;
        
        private viw_ledgerDataTable tableviw_ledger;
        
        private viw_balanceDataTable tableviw_balance;
        
        private detailsTableDataTable tabledetailsTable;
        
        private viw_detailsDataTable tableviw_details;
        
        private spentGroupsTableDataTable tablespentGroupsTable;
        
        private TaraznamehDataTable tableTaraznameh;
        
        private freeFormsTableDataTable tablefreeFormsTable;
        
        private viw_freeFormsDataTable tableviw_freeForms;
        
        private viw_ledgerRemainsDataTable tableviw_ledgerRemains;
        
        private viw_detailsCodesDataTable tableviw_detailsCodes;
        
        private usersTableDataTable tableusersTable;
        
        private global::System.Data.DataRelation relationFK_AccountsTable_BanksTable;
        
        private global::System.Data.DataRelation relationFK_chequesTable_personsTable;
        
        private global::System.Data.DataRelation relationFK_projectsPersons_personsTable;
        
        private global::System.Data.DataRelation relationFK_projectsPersons_projectsTable;
        
        private global::System.Data.DataRelation relationFK_chequesTable_AccountsTable;
        
        private global::System.Data.DataRelation relationFK_spentDef_spentMaster;
        
        private global::System.Data.DataRelation relationFK_detractDef_pensionsTable;
        
        private global::System.Data.DataRelation relationFK_pensionDef_pensionsTable;
        
        private global::System.Data.DataRelation relationFK_docsTable_personsTable;
        
        private global::System.Data.DataRelation relationFK_pensionsTable_personsTable;
        
        private global::System.Data.DataRelation relationFK_pensionsTable_projectsTable;
        
        private global::System.Data.DataRelation relationFK_docsTable_projectsTable;
        
        private global::System.Data.DataRelation relationFK_accDocEventsTable_AccountingDocs;
        
        private global::System.Data.DataRelation relationFK_chequesTable_AccountingDocs;
        
        private global::System.Data.DataRelation relationFK_invoiceItemsTable_invoicesTable;
        
        private global::System.Data.DataRelation relationFK_invoiceItemsTable_spentDef;
        
        private global::System.Data.DataRelation relationFK_AccountingDocs_pensionsTable;
        
        private global::System.Data.DataRelation relationFK_AccountingDocs_invoicesTable;
        
        private global::System.Data.DataRelation relationFK_AccountingDocs_AccountsTable;
        
        private global::System.Data.DataRelation relationFK_docsTable_AccountsTable;
        
        private global::System.Data.DataRelation relationFK_detailsTable_AccountsTable;
        
        private global::System.Data.DataRelation relationFK_detailsTable_personsTable;
        
        private global::System.Data.DataRelation relationFK_detailsTable_projectsTable;
        
        private global::System.Data.DataRelation relationFK_detailsTable_spentMaster;
        
        private global::System.Data.DataRelation relationFK_accDocEventsTable_detailsTable;
        
        private global::System.Data.DataRelation relationFK_spentMaster_spentGroupsTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PSDatabase5DataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PSDatabase5DataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AccountsTable"] != null)) {
                    base.Tables.Add(new AccountsTableDataTable(ds.Tables["AccountsTable"]));
                }
                if ((ds.Tables["BanksTable"] != null)) {
                    base.Tables.Add(new BanksTableDataTable(ds.Tables["BanksTable"]));
                }
                if ((ds.Tables["chequesTable"] != null)) {
                    base.Tables.Add(new chequesTableDataTable(ds.Tables["chequesTable"]));
                }
                if ((ds.Tables["personsTable"] != null)) {
                    base.Tables.Add(new personsTableDataTable(ds.Tables["personsTable"]));
                }
                if ((ds.Tables["projectsPersons"] != null)) {
                    base.Tables.Add(new projectsPersonsDataTable(ds.Tables["projectsPersons"]));
                }
                if ((ds.Tables["projectsTable"] != null)) {
                    base.Tables.Add(new projectsTableDataTable(ds.Tables["projectsTable"]));
                }
                if ((ds.Tables["spentDef"] != null)) {
                    base.Tables.Add(new spentDefDataTable(ds.Tables["spentDef"]));
                }
                if ((ds.Tables["spentMaster"] != null)) {
                    base.Tables.Add(new spentMasterDataTable(ds.Tables["spentMaster"]));
                }
                if ((ds.Tables["detractDef"] != null)) {
                    base.Tables.Add(new detractDefDataTable(ds.Tables["detractDef"]));
                }
                if ((ds.Tables["pensionDef"] != null)) {
                    base.Tables.Add(new pensionDefDataTable(ds.Tables["pensionDef"]));
                }
                if ((ds.Tables["pensionsTable"] != null)) {
                    base.Tables.Add(new pensionsTableDataTable(ds.Tables["pensionsTable"]));
                }
                if ((ds.Tables["docsTable"] != null)) {
                    base.Tables.Add(new docsTableDataTable(ds.Tables["docsTable"]));
                }
                if ((ds.Tables["View1"] != null)) {
                    base.Tables.Add(new View1DataTable(ds.Tables["View1"]));
                }
                if ((ds.Tables["pensionsView"] != null)) {
                    base.Tables.Add(new pensionsViewDataTable(ds.Tables["pensionsView"]));
                }
                if ((ds.Tables["INReceiptView"] != null)) {
                    base.Tables.Add(new INReceiptViewDataTable(ds.Tables["INReceiptView"]));
                }
                if ((ds.Tables["chequesView"] != null)) {
                    base.Tables.Add(new chequesViewDataTable(ds.Tables["chequesView"]));
                }
                if ((ds.Tables["detractsView"] != null)) {
                    base.Tables.Add(new detractsViewDataTable(ds.Tables["detractsView"]));
                }
                if ((ds.Tables["receiptOUT"] != null)) {
                    base.Tables.Add(new receiptOUTDataTable(ds.Tables["receiptOUT"]));
                }
                if ((ds.Tables["defsView"] != null)) {
                    base.Tables.Add(new defsViewDataTable(ds.Tables["defsView"]));
                }
                if ((ds.Tables["accountTypesTable"] != null)) {
                    base.Tables.Add(new accountTypesTableDataTable(ds.Tables["accountTypesTable"]));
                }
                if ((ds.Tables["AccountingDocs"] != null)) {
                    base.Tables.Add(new AccountingDocsDataTable(ds.Tables["AccountingDocs"]));
                }
                if ((ds.Tables["accDocEventsTable"] != null)) {
                    base.Tables.Add(new accDocEventsTableDataTable(ds.Tables["accDocEventsTable"]));
                }
                if ((ds.Tables["invoiceItemsTable"] != null)) {
                    base.Tables.Add(new invoiceItemsTableDataTable(ds.Tables["invoiceItemsTable"]));
                }
                if ((ds.Tables["invoicesTable"] != null)) {
                    base.Tables.Add(new invoicesTableDataTable(ds.Tables["invoicesTable"]));
                }
                if ((ds.Tables["viw_invoiceItems"] != null)) {
                    base.Tables.Add(new viw_invoiceItemsDataTable(ds.Tables["viw_invoiceItems"]));
                }
                if ((ds.Tables["viw_accDoc"] != null)) {
                    base.Tables.Add(new viw_accDocDataTable(ds.Tables["viw_accDoc"]));
                }
                if ((ds.Tables["viw_ledger"] != null)) {
                    base.Tables.Add(new viw_ledgerDataTable(ds.Tables["viw_ledger"]));
                }
                if ((ds.Tables["viw_balance"] != null)) {
                    base.Tables.Add(new viw_balanceDataTable(ds.Tables["viw_balance"]));
                }
                if ((ds.Tables["detailsTable"] != null)) {
                    base.Tables.Add(new detailsTableDataTable(ds.Tables["detailsTable"]));
                }
                if ((ds.Tables["viw_details"] != null)) {
                    base.Tables.Add(new viw_detailsDataTable(ds.Tables["viw_details"]));
                }
                if ((ds.Tables["spentGroupsTable"] != null)) {
                    base.Tables.Add(new spentGroupsTableDataTable(ds.Tables["spentGroupsTable"]));
                }
                if ((ds.Tables["Taraznameh"] != null)) {
                    base.Tables.Add(new TaraznamehDataTable(ds.Tables["Taraznameh"]));
                }
                if ((ds.Tables["freeFormsTable"] != null)) {
                    base.Tables.Add(new freeFormsTableDataTable(ds.Tables["freeFormsTable"]));
                }
                if ((ds.Tables["viw_freeForms"] != null)) {
                    base.Tables.Add(new viw_freeFormsDataTable(ds.Tables["viw_freeForms"]));
                }
                if ((ds.Tables["viw_ledgerRemains"] != null)) {
                    base.Tables.Add(new viw_ledgerRemainsDataTable(ds.Tables["viw_ledgerRemains"]));
                }
                if ((ds.Tables["viw_detailsCodes"] != null)) {
                    base.Tables.Add(new viw_detailsCodesDataTable(ds.Tables["viw_detailsCodes"]));
                }
                if ((ds.Tables["usersTable"] != null)) {
                    base.Tables.Add(new usersTableDataTable(ds.Tables["usersTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AccountsTableDataTable AccountsTable {
            get {
                return this.tableAccountsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BanksTableDataTable BanksTable {
            get {
                return this.tableBanksTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public chequesTableDataTable chequesTable {
            get {
                return this.tablechequesTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public personsTableDataTable personsTable {
            get {
                return this.tablepersonsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public projectsPersonsDataTable projectsPersons {
            get {
                return this.tableprojectsPersons;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public projectsTableDataTable projectsTable {
            get {
                return this.tableprojectsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spentDefDataTable spentDef {
            get {
                return this.tablespentDef;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spentMasterDataTable spentMaster {
            get {
                return this.tablespentMaster;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public detractDefDataTable detractDef {
            get {
                return this.tabledetractDef;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public pensionDefDataTable pensionDef {
            get {
                return this.tablepensionDef;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public pensionsTableDataTable pensionsTable {
            get {
                return this.tablepensionsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public docsTableDataTable docsTable {
            get {
                return this.tabledocsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View1DataTable View1 {
            get {
                return this.tableView1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public pensionsViewDataTable pensionsView {
            get {
                return this.tablepensionsView;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public INReceiptViewDataTable INReceiptView {
            get {
                return this.tableINReceiptView;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public chequesViewDataTable chequesView {
            get {
                return this.tablechequesView;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public detractsViewDataTable detractsView {
            get {
                return this.tabledetractsView;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public receiptOUTDataTable receiptOUT {
            get {
                return this.tablereceiptOUT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public defsViewDataTable defsView {
            get {
                return this.tabledefsView;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public accountTypesTableDataTable accountTypesTable {
            get {
                return this.tableaccountTypesTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AccountingDocsDataTable AccountingDocs {
            get {
                return this.tableAccountingDocs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public accDocEventsTableDataTable accDocEventsTable {
            get {
                return this.tableaccDocEventsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public invoiceItemsTableDataTable invoiceItemsTable {
            get {
                return this.tableinvoiceItemsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public invoicesTableDataTable invoicesTable {
            get {
                return this.tableinvoicesTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viw_invoiceItemsDataTable viw_invoiceItems {
            get {
                return this.tableviw_invoiceItems;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viw_accDocDataTable viw_accDoc {
            get {
                return this.tableviw_accDoc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viw_ledgerDataTable viw_ledger {
            get {
                return this.tableviw_ledger;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viw_balanceDataTable viw_balance {
            get {
                return this.tableviw_balance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public detailsTableDataTable detailsTable {
            get {
                return this.tabledetailsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viw_detailsDataTable viw_details {
            get {
                return this.tableviw_details;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spentGroupsTableDataTable spentGroupsTable {
            get {
                return this.tablespentGroupsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TaraznamehDataTable Taraznameh {
            get {
                return this.tableTaraznameh;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public freeFormsTableDataTable freeFormsTable {
            get {
                return this.tablefreeFormsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viw_freeFormsDataTable viw_freeForms {
            get {
                return this.tableviw_freeForms;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viw_ledgerRemainsDataTable viw_ledgerRemains {
            get {
                return this.tableviw_ledgerRemains;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viw_detailsCodesDataTable viw_detailsCodes {
            get {
                return this.tableviw_detailsCodes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public usersTableDataTable usersTable {
            get {
                return this.tableusersTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PSDatabase5DataSet cln = ((PSDatabase5DataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AccountsTable"] != null)) {
                    base.Tables.Add(new AccountsTableDataTable(ds.Tables["AccountsTable"]));
                }
                if ((ds.Tables["BanksTable"] != null)) {
                    base.Tables.Add(new BanksTableDataTable(ds.Tables["BanksTable"]));
                }
                if ((ds.Tables["chequesTable"] != null)) {
                    base.Tables.Add(new chequesTableDataTable(ds.Tables["chequesTable"]));
                }
                if ((ds.Tables["personsTable"] != null)) {
                    base.Tables.Add(new personsTableDataTable(ds.Tables["personsTable"]));
                }
                if ((ds.Tables["projectsPersons"] != null)) {
                    base.Tables.Add(new projectsPersonsDataTable(ds.Tables["projectsPersons"]));
                }
                if ((ds.Tables["projectsTable"] != null)) {
                    base.Tables.Add(new projectsTableDataTable(ds.Tables["projectsTable"]));
                }
                if ((ds.Tables["spentDef"] != null)) {
                    base.Tables.Add(new spentDefDataTable(ds.Tables["spentDef"]));
                }
                if ((ds.Tables["spentMaster"] != null)) {
                    base.Tables.Add(new spentMasterDataTable(ds.Tables["spentMaster"]));
                }
                if ((ds.Tables["detractDef"] != null)) {
                    base.Tables.Add(new detractDefDataTable(ds.Tables["detractDef"]));
                }
                if ((ds.Tables["pensionDef"] != null)) {
                    base.Tables.Add(new pensionDefDataTable(ds.Tables["pensionDef"]));
                }
                if ((ds.Tables["pensionsTable"] != null)) {
                    base.Tables.Add(new pensionsTableDataTable(ds.Tables["pensionsTable"]));
                }
                if ((ds.Tables["docsTable"] != null)) {
                    base.Tables.Add(new docsTableDataTable(ds.Tables["docsTable"]));
                }
                if ((ds.Tables["View1"] != null)) {
                    base.Tables.Add(new View1DataTable(ds.Tables["View1"]));
                }
                if ((ds.Tables["pensionsView"] != null)) {
                    base.Tables.Add(new pensionsViewDataTable(ds.Tables["pensionsView"]));
                }
                if ((ds.Tables["INReceiptView"] != null)) {
                    base.Tables.Add(new INReceiptViewDataTable(ds.Tables["INReceiptView"]));
                }
                if ((ds.Tables["chequesView"] != null)) {
                    base.Tables.Add(new chequesViewDataTable(ds.Tables["chequesView"]));
                }
                if ((ds.Tables["detractsView"] != null)) {
                    base.Tables.Add(new detractsViewDataTable(ds.Tables["detractsView"]));
                }
                if ((ds.Tables["receiptOUT"] != null)) {
                    base.Tables.Add(new receiptOUTDataTable(ds.Tables["receiptOUT"]));
                }
                if ((ds.Tables["defsView"] != null)) {
                    base.Tables.Add(new defsViewDataTable(ds.Tables["defsView"]));
                }
                if ((ds.Tables["accountTypesTable"] != null)) {
                    base.Tables.Add(new accountTypesTableDataTable(ds.Tables["accountTypesTable"]));
                }
                if ((ds.Tables["AccountingDocs"] != null)) {
                    base.Tables.Add(new AccountingDocsDataTable(ds.Tables["AccountingDocs"]));
                }
                if ((ds.Tables["accDocEventsTable"] != null)) {
                    base.Tables.Add(new accDocEventsTableDataTable(ds.Tables["accDocEventsTable"]));
                }
                if ((ds.Tables["invoiceItemsTable"] != null)) {
                    base.Tables.Add(new invoiceItemsTableDataTable(ds.Tables["invoiceItemsTable"]));
                }
                if ((ds.Tables["invoicesTable"] != null)) {
                    base.Tables.Add(new invoicesTableDataTable(ds.Tables["invoicesTable"]));
                }
                if ((ds.Tables["viw_invoiceItems"] != null)) {
                    base.Tables.Add(new viw_invoiceItemsDataTable(ds.Tables["viw_invoiceItems"]));
                }
                if ((ds.Tables["viw_accDoc"] != null)) {
                    base.Tables.Add(new viw_accDocDataTable(ds.Tables["viw_accDoc"]));
                }
                if ((ds.Tables["viw_ledger"] != null)) {
                    base.Tables.Add(new viw_ledgerDataTable(ds.Tables["viw_ledger"]));
                }
                if ((ds.Tables["viw_balance"] != null)) {
                    base.Tables.Add(new viw_balanceDataTable(ds.Tables["viw_balance"]));
                }
                if ((ds.Tables["detailsTable"] != null)) {
                    base.Tables.Add(new detailsTableDataTable(ds.Tables["detailsTable"]));
                }
                if ((ds.Tables["viw_details"] != null)) {
                    base.Tables.Add(new viw_detailsDataTable(ds.Tables["viw_details"]));
                }
                if ((ds.Tables["spentGroupsTable"] != null)) {
                    base.Tables.Add(new spentGroupsTableDataTable(ds.Tables["spentGroupsTable"]));
                }
                if ((ds.Tables["Taraznameh"] != null)) {
                    base.Tables.Add(new TaraznamehDataTable(ds.Tables["Taraznameh"]));
                }
                if ((ds.Tables["freeFormsTable"] != null)) {
                    base.Tables.Add(new freeFormsTableDataTable(ds.Tables["freeFormsTable"]));
                }
                if ((ds.Tables["viw_freeForms"] != null)) {
                    base.Tables.Add(new viw_freeFormsDataTable(ds.Tables["viw_freeForms"]));
                }
                if ((ds.Tables["viw_ledgerRemains"] != null)) {
                    base.Tables.Add(new viw_ledgerRemainsDataTable(ds.Tables["viw_ledgerRemains"]));
                }
                if ((ds.Tables["viw_detailsCodes"] != null)) {
                    base.Tables.Add(new viw_detailsCodesDataTable(ds.Tables["viw_detailsCodes"]));
                }
                if ((ds.Tables["usersTable"] != null)) {
                    base.Tables.Add(new usersTableDataTable(ds.Tables["usersTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAccountsTable = ((AccountsTableDataTable)(base.Tables["AccountsTable"]));
            if ((initTable == true)) {
                if ((this.tableAccountsTable != null)) {
                    this.tableAccountsTable.InitVars();
                }
            }
            this.tableBanksTable = ((BanksTableDataTable)(base.Tables["BanksTable"]));
            if ((initTable == true)) {
                if ((this.tableBanksTable != null)) {
                    this.tableBanksTable.InitVars();
                }
            }
            this.tablechequesTable = ((chequesTableDataTable)(base.Tables["chequesTable"]));
            if ((initTable == true)) {
                if ((this.tablechequesTable != null)) {
                    this.tablechequesTable.InitVars();
                }
            }
            this.tablepersonsTable = ((personsTableDataTable)(base.Tables["personsTable"]));
            if ((initTable == true)) {
                if ((this.tablepersonsTable != null)) {
                    this.tablepersonsTable.InitVars();
                }
            }
            this.tableprojectsPersons = ((projectsPersonsDataTable)(base.Tables["projectsPersons"]));
            if ((initTable == true)) {
                if ((this.tableprojectsPersons != null)) {
                    this.tableprojectsPersons.InitVars();
                }
            }
            this.tableprojectsTable = ((projectsTableDataTable)(base.Tables["projectsTable"]));
            if ((initTable == true)) {
                if ((this.tableprojectsTable != null)) {
                    this.tableprojectsTable.InitVars();
                }
            }
            this.tablespentDef = ((spentDefDataTable)(base.Tables["spentDef"]));
            if ((initTable == true)) {
                if ((this.tablespentDef != null)) {
                    this.tablespentDef.InitVars();
                }
            }
            this.tablespentMaster = ((spentMasterDataTable)(base.Tables["spentMaster"]));
            if ((initTable == true)) {
                if ((this.tablespentMaster != null)) {
                    this.tablespentMaster.InitVars();
                }
            }
            this.tabledetractDef = ((detractDefDataTable)(base.Tables["detractDef"]));
            if ((initTable == true)) {
                if ((this.tabledetractDef != null)) {
                    this.tabledetractDef.InitVars();
                }
            }
            this.tablepensionDef = ((pensionDefDataTable)(base.Tables["pensionDef"]));
            if ((initTable == true)) {
                if ((this.tablepensionDef != null)) {
                    this.tablepensionDef.InitVars();
                }
            }
            this.tablepensionsTable = ((pensionsTableDataTable)(base.Tables["pensionsTable"]));
            if ((initTable == true)) {
                if ((this.tablepensionsTable != null)) {
                    this.tablepensionsTable.InitVars();
                }
            }
            this.tabledocsTable = ((docsTableDataTable)(base.Tables["docsTable"]));
            if ((initTable == true)) {
                if ((this.tabledocsTable != null)) {
                    this.tabledocsTable.InitVars();
                }
            }
            this.tableView1 = ((View1DataTable)(base.Tables["View1"]));
            if ((initTable == true)) {
                if ((this.tableView1 != null)) {
                    this.tableView1.InitVars();
                }
            }
            this.tablepensionsView = ((pensionsViewDataTable)(base.Tables["pensionsView"]));
            if ((initTable == true)) {
                if ((this.tablepensionsView != null)) {
                    this.tablepensionsView.InitVars();
                }
            }
            this.tableINReceiptView = ((INReceiptViewDataTable)(base.Tables["INReceiptView"]));
            if ((initTable == true)) {
                if ((this.tableINReceiptView != null)) {
                    this.tableINReceiptView.InitVars();
                }
            }
            this.tablechequesView = ((chequesViewDataTable)(base.Tables["chequesView"]));
            if ((initTable == true)) {
                if ((this.tablechequesView != null)) {
                    this.tablechequesView.InitVars();
                }
            }
            this.tabledetractsView = ((detractsViewDataTable)(base.Tables["detractsView"]));
            if ((initTable == true)) {
                if ((this.tabledetractsView != null)) {
                    this.tabledetractsView.InitVars();
                }
            }
            this.tablereceiptOUT = ((receiptOUTDataTable)(base.Tables["receiptOUT"]));
            if ((initTable == true)) {
                if ((this.tablereceiptOUT != null)) {
                    this.tablereceiptOUT.InitVars();
                }
            }
            this.tabledefsView = ((defsViewDataTable)(base.Tables["defsView"]));
            if ((initTable == true)) {
                if ((this.tabledefsView != null)) {
                    this.tabledefsView.InitVars();
                }
            }
            this.tableaccountTypesTable = ((accountTypesTableDataTable)(base.Tables["accountTypesTable"]));
            if ((initTable == true)) {
                if ((this.tableaccountTypesTable != null)) {
                    this.tableaccountTypesTable.InitVars();
                }
            }
            this.tableAccountingDocs = ((AccountingDocsDataTable)(base.Tables["AccountingDocs"]));
            if ((initTable == true)) {
                if ((this.tableAccountingDocs != null)) {
                    this.tableAccountingDocs.InitVars();
                }
            }
            this.tableaccDocEventsTable = ((accDocEventsTableDataTable)(base.Tables["accDocEventsTable"]));
            if ((initTable == true)) {
                if ((this.tableaccDocEventsTable != null)) {
                    this.tableaccDocEventsTable.InitVars();
                }
            }
            this.tableinvoiceItemsTable = ((invoiceItemsTableDataTable)(base.Tables["invoiceItemsTable"]));
            if ((initTable == true)) {
                if ((this.tableinvoiceItemsTable != null)) {
                    this.tableinvoiceItemsTable.InitVars();
                }
            }
            this.tableinvoicesTable = ((invoicesTableDataTable)(base.Tables["invoicesTable"]));
            if ((initTable == true)) {
                if ((this.tableinvoicesTable != null)) {
                    this.tableinvoicesTable.InitVars();
                }
            }
            this.tableviw_invoiceItems = ((viw_invoiceItemsDataTable)(base.Tables["viw_invoiceItems"]));
            if ((initTable == true)) {
                if ((this.tableviw_invoiceItems != null)) {
                    this.tableviw_invoiceItems.InitVars();
                }
            }
            this.tableviw_accDoc = ((viw_accDocDataTable)(base.Tables["viw_accDoc"]));
            if ((initTable == true)) {
                if ((this.tableviw_accDoc != null)) {
                    this.tableviw_accDoc.InitVars();
                }
            }
            this.tableviw_ledger = ((viw_ledgerDataTable)(base.Tables["viw_ledger"]));
            if ((initTable == true)) {
                if ((this.tableviw_ledger != null)) {
                    this.tableviw_ledger.InitVars();
                }
            }
            this.tableviw_balance = ((viw_balanceDataTable)(base.Tables["viw_balance"]));
            if ((initTable == true)) {
                if ((this.tableviw_balance != null)) {
                    this.tableviw_balance.InitVars();
                }
            }
            this.tabledetailsTable = ((detailsTableDataTable)(base.Tables["detailsTable"]));
            if ((initTable == true)) {
                if ((this.tabledetailsTable != null)) {
                    this.tabledetailsTable.InitVars();
                }
            }
            this.tableviw_details = ((viw_detailsDataTable)(base.Tables["viw_details"]));
            if ((initTable == true)) {
                if ((this.tableviw_details != null)) {
                    this.tableviw_details.InitVars();
                }
            }
            this.tablespentGroupsTable = ((spentGroupsTableDataTable)(base.Tables["spentGroupsTable"]));
            if ((initTable == true)) {
                if ((this.tablespentGroupsTable != null)) {
                    this.tablespentGroupsTable.InitVars();
                }
            }
            this.tableTaraznameh = ((TaraznamehDataTable)(base.Tables["Taraznameh"]));
            if ((initTable == true)) {
                if ((this.tableTaraznameh != null)) {
                    this.tableTaraznameh.InitVars();
                }
            }
            this.tablefreeFormsTable = ((freeFormsTableDataTable)(base.Tables["freeFormsTable"]));
            if ((initTable == true)) {
                if ((this.tablefreeFormsTable != null)) {
                    this.tablefreeFormsTable.InitVars();
                }
            }
            this.tableviw_freeForms = ((viw_freeFormsDataTable)(base.Tables["viw_freeForms"]));
            if ((initTable == true)) {
                if ((this.tableviw_freeForms != null)) {
                    this.tableviw_freeForms.InitVars();
                }
            }
            this.tableviw_ledgerRemains = ((viw_ledgerRemainsDataTable)(base.Tables["viw_ledgerRemains"]));
            if ((initTable == true)) {
                if ((this.tableviw_ledgerRemains != null)) {
                    this.tableviw_ledgerRemains.InitVars();
                }
            }
            this.tableviw_detailsCodes = ((viw_detailsCodesDataTable)(base.Tables["viw_detailsCodes"]));
            if ((initTable == true)) {
                if ((this.tableviw_detailsCodes != null)) {
                    this.tableviw_detailsCodes.InitVars();
                }
            }
            this.tableusersTable = ((usersTableDataTable)(base.Tables["usersTable"]));
            if ((initTable == true)) {
                if ((this.tableusersTable != null)) {
                    this.tableusersTable.InitVars();
                }
            }
            this.relationFK_AccountsTable_BanksTable = this.Relations["FK_AccountsTable_BanksTable"];
            this.relationFK_chequesTable_personsTable = this.Relations["FK_chequesTable_personsTable"];
            this.relationFK_projectsPersons_personsTable = this.Relations["FK_projectsPersons_personsTable"];
            this.relationFK_projectsPersons_projectsTable = this.Relations["FK_projectsPersons_projectsTable"];
            this.relationFK_chequesTable_AccountsTable = this.Relations["FK_chequesTable_AccountsTable"];
            this.relationFK_spentDef_spentMaster = this.Relations["FK_spentDef_spentMaster"];
            this.relationFK_detractDef_pensionsTable = this.Relations["FK_detractDef_pensionsTable"];
            this.relationFK_pensionDef_pensionsTable = this.Relations["FK_pensionDef_pensionsTable"];
            this.relationFK_docsTable_personsTable = this.Relations["FK_docsTable_personsTable"];
            this.relationFK_pensionsTable_personsTable = this.Relations["FK_pensionsTable_personsTable"];
            this.relationFK_pensionsTable_projectsTable = this.Relations["FK_pensionsTable_projectsTable"];
            this.relationFK_docsTable_projectsTable = this.Relations["FK_docsTable_projectsTable"];
            this.relationFK_accDocEventsTable_AccountingDocs = this.Relations["FK_accDocEventsTable_AccountingDocs"];
            this.relationFK_chequesTable_AccountingDocs = this.Relations["FK_chequesTable_AccountingDocs"];
            this.relationFK_invoiceItemsTable_invoicesTable = this.Relations["FK_invoiceItemsTable_invoicesTable"];
            this.relationFK_invoiceItemsTable_spentDef = this.Relations["FK_invoiceItemsTable_spentDef"];
            this.relationFK_AccountingDocs_pensionsTable = this.Relations["FK_AccountingDocs_pensionsTable"];
            this.relationFK_AccountingDocs_invoicesTable = this.Relations["FK_AccountingDocs_invoicesTable"];
            this.relationFK_AccountingDocs_AccountsTable = this.Relations["FK_AccountingDocs_AccountsTable"];
            this.relationFK_docsTable_AccountsTable = this.Relations["FK_docsTable_AccountsTable"];
            this.relationFK_detailsTable_AccountsTable = this.Relations["FK_detailsTable_AccountsTable"];
            this.relationFK_detailsTable_personsTable = this.Relations["FK_detailsTable_personsTable"];
            this.relationFK_detailsTable_projectsTable = this.Relations["FK_detailsTable_projectsTable"];
            this.relationFK_detailsTable_spentMaster = this.Relations["FK_detailsTable_spentMaster"];
            this.relationFK_accDocEventsTable_detailsTable = this.Relations["FK_accDocEventsTable_detailsTable"];
            this.relationFK_spentMaster_spentGroupsTable = this.Relations["FK_spentMaster_spentGroupsTable"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PSDatabase5DataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PSDatabase5DataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAccountsTable = new AccountsTableDataTable();
            base.Tables.Add(this.tableAccountsTable);
            this.tableBanksTable = new BanksTableDataTable();
            base.Tables.Add(this.tableBanksTable);
            this.tablechequesTable = new chequesTableDataTable();
            base.Tables.Add(this.tablechequesTable);
            this.tablepersonsTable = new personsTableDataTable();
            base.Tables.Add(this.tablepersonsTable);
            this.tableprojectsPersons = new projectsPersonsDataTable();
            base.Tables.Add(this.tableprojectsPersons);
            this.tableprojectsTable = new projectsTableDataTable();
            base.Tables.Add(this.tableprojectsTable);
            this.tablespentDef = new spentDefDataTable();
            base.Tables.Add(this.tablespentDef);
            this.tablespentMaster = new spentMasterDataTable();
            base.Tables.Add(this.tablespentMaster);
            this.tabledetractDef = new detractDefDataTable();
            base.Tables.Add(this.tabledetractDef);
            this.tablepensionDef = new pensionDefDataTable();
            base.Tables.Add(this.tablepensionDef);
            this.tablepensionsTable = new pensionsTableDataTable();
            base.Tables.Add(this.tablepensionsTable);
            this.tabledocsTable = new docsTableDataTable();
            base.Tables.Add(this.tabledocsTable);
            this.tableView1 = new View1DataTable();
            base.Tables.Add(this.tableView1);
            this.tablepensionsView = new pensionsViewDataTable();
            base.Tables.Add(this.tablepensionsView);
            this.tableINReceiptView = new INReceiptViewDataTable();
            base.Tables.Add(this.tableINReceiptView);
            this.tablechequesView = new chequesViewDataTable();
            base.Tables.Add(this.tablechequesView);
            this.tabledetractsView = new detractsViewDataTable();
            base.Tables.Add(this.tabledetractsView);
            this.tablereceiptOUT = new receiptOUTDataTable();
            base.Tables.Add(this.tablereceiptOUT);
            this.tabledefsView = new defsViewDataTable();
            base.Tables.Add(this.tabledefsView);
            this.tableaccountTypesTable = new accountTypesTableDataTable();
            base.Tables.Add(this.tableaccountTypesTable);
            this.tableAccountingDocs = new AccountingDocsDataTable();
            base.Tables.Add(this.tableAccountingDocs);
            this.tableaccDocEventsTable = new accDocEventsTableDataTable();
            base.Tables.Add(this.tableaccDocEventsTable);
            this.tableinvoiceItemsTable = new invoiceItemsTableDataTable();
            base.Tables.Add(this.tableinvoiceItemsTable);
            this.tableinvoicesTable = new invoicesTableDataTable();
            base.Tables.Add(this.tableinvoicesTable);
            this.tableviw_invoiceItems = new viw_invoiceItemsDataTable();
            base.Tables.Add(this.tableviw_invoiceItems);
            this.tableviw_accDoc = new viw_accDocDataTable();
            base.Tables.Add(this.tableviw_accDoc);
            this.tableviw_ledger = new viw_ledgerDataTable();
            base.Tables.Add(this.tableviw_ledger);
            this.tableviw_balance = new viw_balanceDataTable();
            base.Tables.Add(this.tableviw_balance);
            this.tabledetailsTable = new detailsTableDataTable();
            base.Tables.Add(this.tabledetailsTable);
            this.tableviw_details = new viw_detailsDataTable();
            base.Tables.Add(this.tableviw_details);
            this.tablespentGroupsTable = new spentGroupsTableDataTable();
            base.Tables.Add(this.tablespentGroupsTable);
            this.tableTaraznameh = new TaraznamehDataTable();
            base.Tables.Add(this.tableTaraznameh);
            this.tablefreeFormsTable = new freeFormsTableDataTable();
            base.Tables.Add(this.tablefreeFormsTable);
            this.tableviw_freeForms = new viw_freeFormsDataTable();
            base.Tables.Add(this.tableviw_freeForms);
            this.tableviw_ledgerRemains = new viw_ledgerRemainsDataTable();
            base.Tables.Add(this.tableviw_ledgerRemains);
            this.tableviw_detailsCodes = new viw_detailsCodesDataTable();
            base.Tables.Add(this.tableviw_detailsCodes);
            this.tableusersTable = new usersTableDataTable();
            base.Tables.Add(this.tableusersTable);
            this.relationFK_AccountsTable_BanksTable = new global::System.Data.DataRelation("FK_AccountsTable_BanksTable", new global::System.Data.DataColumn[] {
                        this.tableBanksTable.bankIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableAccountsTable.bankIDColumn}, false);
            this.Relations.Add(this.relationFK_AccountsTable_BanksTable);
            this.relationFK_chequesTable_personsTable = new global::System.Data.DataRelation("FK_chequesTable_personsTable", new global::System.Data.DataColumn[] {
                        this.tablepersonsTable.personIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablechequesTable.personIDColumn}, false);
            this.Relations.Add(this.relationFK_chequesTable_personsTable);
            this.relationFK_projectsPersons_personsTable = new global::System.Data.DataRelation("FK_projectsPersons_personsTable", new global::System.Data.DataColumn[] {
                        this.tablepersonsTable.personIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableprojectsPersons.personIDColumn}, false);
            this.Relations.Add(this.relationFK_projectsPersons_personsTable);
            this.relationFK_projectsPersons_projectsTable = new global::System.Data.DataRelation("FK_projectsPersons_projectsTable", new global::System.Data.DataColumn[] {
                        this.tableprojectsTable.projectIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableprojectsPersons.projectIDColumn}, false);
            this.Relations.Add(this.relationFK_projectsPersons_projectsTable);
            this.relationFK_chequesTable_AccountsTable = new global::System.Data.DataRelation("FK_chequesTable_AccountsTable", new global::System.Data.DataColumn[] {
                        this.tableAccountsTable.accountIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablechequesTable.accountIDColumn}, false);
            this.Relations.Add(this.relationFK_chequesTable_AccountsTable);
            this.relationFK_spentDef_spentMaster = new global::System.Data.DataRelation("FK_spentDef_spentMaster", new global::System.Data.DataColumn[] {
                        this.tablespentMaster.spentMasterIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablespentDef.spentMasterIDColumn}, false);
            this.Relations.Add(this.relationFK_spentDef_spentMaster);
            this.relationFK_detractDef_pensionsTable = new global::System.Data.DataRelation("FK_detractDef_pensionsTable", new global::System.Data.DataColumn[] {
                        this.tablepensionsTable.pensionIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabledetractDef.pensionIDColumn}, false);
            this.Relations.Add(this.relationFK_detractDef_pensionsTable);
            this.relationFK_pensionDef_pensionsTable = new global::System.Data.DataRelation("FK_pensionDef_pensionsTable", new global::System.Data.DataColumn[] {
                        this.tablepensionsTable.pensionIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablepensionDef.pensionIDColumn}, false);
            this.Relations.Add(this.relationFK_pensionDef_pensionsTable);
            this.relationFK_docsTable_personsTable = new global::System.Data.DataRelation("FK_docsTable_personsTable", new global::System.Data.DataColumn[] {
                        this.tablepersonsTable.personIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabledocsTable.personIDColumn}, false);
            this.Relations.Add(this.relationFK_docsTable_personsTable);
            this.relationFK_pensionsTable_personsTable = new global::System.Data.DataRelation("FK_pensionsTable_personsTable", new global::System.Data.DataColumn[] {
                        this.tablepersonsTable.personIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablepensionsTable.personIDColumn}, false);
            this.Relations.Add(this.relationFK_pensionsTable_personsTable);
            this.relationFK_pensionsTable_projectsTable = new global::System.Data.DataRelation("FK_pensionsTable_projectsTable", new global::System.Data.DataColumn[] {
                        this.tableprojectsTable.projectIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablepensionsTable.projectIDColumn}, false);
            this.Relations.Add(this.relationFK_pensionsTable_projectsTable);
            this.relationFK_docsTable_projectsTable = new global::System.Data.DataRelation("FK_docsTable_projectsTable", new global::System.Data.DataColumn[] {
                        this.tableprojectsTable.projectIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabledocsTable.projectIDColumn}, false);
            this.Relations.Add(this.relationFK_docsTable_projectsTable);
            this.relationFK_accDocEventsTable_AccountingDocs = new global::System.Data.DataRelation("FK_accDocEventsTable_AccountingDocs", new global::System.Data.DataColumn[] {
                        this.tableAccountingDocs.accDoc_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableaccDocEventsTable.accDoc_idColumn}, false);
            this.Relations.Add(this.relationFK_accDocEventsTable_AccountingDocs);
            this.relationFK_chequesTable_AccountingDocs = new global::System.Data.DataRelation("FK_chequesTable_AccountingDocs", new global::System.Data.DataColumn[] {
                        this.tableAccountingDocs.accDoc_idColumn}, new global::System.Data.DataColumn[] {
                        this.tablechequesTable.accDoc_idColumn}, false);
            this.Relations.Add(this.relationFK_chequesTable_AccountingDocs);
            this.relationFK_invoiceItemsTable_invoicesTable = new global::System.Data.DataRelation("FK_invoiceItemsTable_invoicesTable", new global::System.Data.DataColumn[] {
                        this.tableinvoicesTable.invoice_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableinvoiceItemsTable.invoice_idColumn}, false);
            this.Relations.Add(this.relationFK_invoiceItemsTable_invoicesTable);
            this.relationFK_invoiceItemsTable_spentDef = new global::System.Data.DataRelation("FK_invoiceItemsTable_spentDef", new global::System.Data.DataColumn[] {
                        this.tablespentDef.spentDefIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableinvoiceItemsTable.spentDefIDColumn}, false);
            this.Relations.Add(this.relationFK_invoiceItemsTable_spentDef);
            this.relationFK_AccountingDocs_pensionsTable = new global::System.Data.DataRelation("FK_AccountingDocs_pensionsTable", new global::System.Data.DataColumn[] {
                        this.tablepensionsTable.pensionIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableAccountingDocs.pensionIDColumn}, false);
            this.Relations.Add(this.relationFK_AccountingDocs_pensionsTable);
            this.relationFK_AccountingDocs_invoicesTable = new global::System.Data.DataRelation("FK_AccountingDocs_invoicesTable", new global::System.Data.DataColumn[] {
                        this.tableinvoicesTable.invoice_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableAccountingDocs.invoice_idColumn}, false);
            this.Relations.Add(this.relationFK_AccountingDocs_invoicesTable);
            this.relationFK_AccountingDocs_AccountsTable = new global::System.Data.DataRelation("FK_AccountingDocs_AccountsTable", new global::System.Data.DataColumn[] {
                        this.tableAccountsTable.accountIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableAccountingDocs.accountIDColumn}, false);
            this.Relations.Add(this.relationFK_AccountingDocs_AccountsTable);
            this.relationFK_docsTable_AccountsTable = new global::System.Data.DataRelation("FK_docsTable_AccountsTable", new global::System.Data.DataColumn[] {
                        this.tableAccountsTable.accountIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabledocsTable.accountIDColumn}, false);
            this.Relations.Add(this.relationFK_docsTable_AccountsTable);
            this.relationFK_detailsTable_AccountsTable = new global::System.Data.DataRelation("FK_detailsTable_AccountsTable", new global::System.Data.DataColumn[] {
                        this.tableAccountsTable.accountIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabledetailsTable.accountIDColumn}, false);
            this.Relations.Add(this.relationFK_detailsTable_AccountsTable);
            this.relationFK_detailsTable_personsTable = new global::System.Data.DataRelation("FK_detailsTable_personsTable", new global::System.Data.DataColumn[] {
                        this.tablepersonsTable.personIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabledetailsTable.personIDColumn}, false);
            this.Relations.Add(this.relationFK_detailsTable_personsTable);
            this.relationFK_detailsTable_projectsTable = new global::System.Data.DataRelation("FK_detailsTable_projectsTable", new global::System.Data.DataColumn[] {
                        this.tableprojectsTable.projectIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabledetailsTable.projectIDColumn}, false);
            this.Relations.Add(this.relationFK_detailsTable_projectsTable);
            this.relationFK_detailsTable_spentMaster = new global::System.Data.DataRelation("FK_detailsTable_spentMaster", new global::System.Data.DataColumn[] {
                        this.tablespentMaster.spentMasterIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabledetailsTable.spentMasterIDColumn}, false);
            this.Relations.Add(this.relationFK_detailsTable_spentMaster);
            this.relationFK_accDocEventsTable_detailsTable = new global::System.Data.DataRelation("FK_accDocEventsTable_detailsTable", new global::System.Data.DataColumn[] {
                        this.tabledetailsTable.detailIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableaccDocEventsTable.detailIDColumn}, false);
            this.Relations.Add(this.relationFK_accDocEventsTable_detailsTable);
            this.relationFK_spentMaster_spentGroupsTable = new global::System.Data.DataRelation("FK_spentMaster_spentGroupsTable", new global::System.Data.DataColumn[] {
                        this.tablespentGroupsTable.spentGroup_idColumn}, new global::System.Data.DataColumn[] {
                        this.tablespentMaster.spentGroup_idColumn}, false);
            this.Relations.Add(this.relationFK_spentMaster_spentGroupsTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAccountsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBanksTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializechequesTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepersonsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeprojectsPersons() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeprojectsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializespentDef() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializespentMaster() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedetractDef() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepensionDef() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepensionsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedocsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepensionsView() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeINReceiptView() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializechequesView() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedetractsView() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializereceiptOUT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedefsView() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeaccountTypesTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAccountingDocs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeaccDocEventsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeinvoiceItemsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeinvoicesTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviw_invoiceItems() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviw_accDoc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviw_ledger() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviw_balance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedetailsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviw_details() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializespentGroupsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTaraznameh() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializefreeFormsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviw_freeForms() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviw_ledgerRemains() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeviw_detailsCodes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeusersTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PSDatabase5DataSet ds = new PSDatabase5DataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AccountsTableRowChangeEventHandler(object sender, AccountsTableRowChangeEvent e);
        
        public delegate void BanksTableRowChangeEventHandler(object sender, BanksTableRowChangeEvent e);
        
        public delegate void chequesTableRowChangeEventHandler(object sender, chequesTableRowChangeEvent e);
        
        public delegate void personsTableRowChangeEventHandler(object sender, personsTableRowChangeEvent e);
        
        public delegate void projectsPersonsRowChangeEventHandler(object sender, projectsPersonsRowChangeEvent e);
        
        public delegate void projectsTableRowChangeEventHandler(object sender, projectsTableRowChangeEvent e);
        
        public delegate void spentDefRowChangeEventHandler(object sender, spentDefRowChangeEvent e);
        
        public delegate void spentMasterRowChangeEventHandler(object sender, spentMasterRowChangeEvent e);
        
        public delegate void detractDefRowChangeEventHandler(object sender, detractDefRowChangeEvent e);
        
        public delegate void pensionDefRowChangeEventHandler(object sender, pensionDefRowChangeEvent e);
        
        public delegate void pensionsTableRowChangeEventHandler(object sender, pensionsTableRowChangeEvent e);
        
        public delegate void docsTableRowChangeEventHandler(object sender, docsTableRowChangeEvent e);
        
        public delegate void View1RowChangeEventHandler(object sender, View1RowChangeEvent e);
        
        public delegate void pensionsViewRowChangeEventHandler(object sender, pensionsViewRowChangeEvent e);
        
        public delegate void INReceiptViewRowChangeEventHandler(object sender, INReceiptViewRowChangeEvent e);
        
        public delegate void chequesViewRowChangeEventHandler(object sender, chequesViewRowChangeEvent e);
        
        public delegate void detractsViewRowChangeEventHandler(object sender, detractsViewRowChangeEvent e);
        
        public delegate void receiptOUTRowChangeEventHandler(object sender, receiptOUTRowChangeEvent e);
        
        public delegate void defsViewRowChangeEventHandler(object sender, defsViewRowChangeEvent e);
        
        public delegate void accountTypesTableRowChangeEventHandler(object sender, accountTypesTableRowChangeEvent e);
        
        public delegate void AccountingDocsRowChangeEventHandler(object sender, AccountingDocsRowChangeEvent e);
        
        public delegate void accDocEventsTableRowChangeEventHandler(object sender, accDocEventsTableRowChangeEvent e);
        
        public delegate void invoiceItemsTableRowChangeEventHandler(object sender, invoiceItemsTableRowChangeEvent e);
        
        public delegate void invoicesTableRowChangeEventHandler(object sender, invoicesTableRowChangeEvent e);
        
        public delegate void viw_invoiceItemsRowChangeEventHandler(object sender, viw_invoiceItemsRowChangeEvent e);
        
        public delegate void viw_accDocRowChangeEventHandler(object sender, viw_accDocRowChangeEvent e);
        
        public delegate void viw_ledgerRowChangeEventHandler(object sender, viw_ledgerRowChangeEvent e);
        
        public delegate void viw_balanceRowChangeEventHandler(object sender, viw_balanceRowChangeEvent e);
        
        public delegate void detailsTableRowChangeEventHandler(object sender, detailsTableRowChangeEvent e);
        
        public delegate void viw_detailsRowChangeEventHandler(object sender, viw_detailsRowChangeEvent e);
        
        public delegate void spentGroupsTableRowChangeEventHandler(object sender, spentGroupsTableRowChangeEvent e);
        
        public delegate void TaraznamehRowChangeEventHandler(object sender, TaraznamehRowChangeEvent e);
        
        public delegate void freeFormsTableRowChangeEventHandler(object sender, freeFormsTableRowChangeEvent e);
        
        public delegate void viw_freeFormsRowChangeEventHandler(object sender, viw_freeFormsRowChangeEvent e);
        
        public delegate void viw_ledgerRemainsRowChangeEventHandler(object sender, viw_ledgerRemainsRowChangeEvent e);
        
        public delegate void viw_detailsCodesRowChangeEventHandler(object sender, viw_detailsCodesRowChangeEvent e);
        
        public delegate void usersTableRowChangeEventHandler(object sender, usersTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AccountsTableDataTable : global::System.Data.TypedTableBase<AccountsTableRow> {
            
            private global::System.Data.DataColumn columnaccountID;
            
            private global::System.Data.DataColumn columnbankID;
            
            private global::System.Data.DataColumn columntemp;
            
            private global::System.Data.DataColumn columnaccount_chapterName;
            
            private global::System.Data.DataColumn columnaccount_chapterNo;
            
            private global::System.Data.DataColumn columnaccount_number;
            
            private global::System.Data.DataColumn columnaccount_amount;
            
            private global::System.Data.DataColumn columnaccount_remain;
            
            private global::System.Data.DataColumn columnaccountType_id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountsTableDataTable() {
                this.TableName = "AccountsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AccountsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accountIDColumn {
                get {
                    return this.columnaccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bankIDColumn {
                get {
                    return this.columnbankID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempColumn {
                get {
                    return this.columntemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn account_chapterNameColumn {
                get {
                    return this.columnaccount_chapterName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn account_chapterNoColumn {
                get {
                    return this.columnaccount_chapterNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn account_numberColumn {
                get {
                    return this.columnaccount_number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn account_amountColumn {
                get {
                    return this.columnaccount_amount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn account_remainColumn {
                get {
                    return this.columnaccount_remain;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accountType_idColumn {
                get {
                    return this.columnaccountType_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountsTableRow this[int index] {
                get {
                    return ((AccountsTableRow)(this.Rows[index]));
                }
            }
            
            public event AccountsTableRowChangeEventHandler AccountsTableRowChanging;
            
            public event AccountsTableRowChangeEventHandler AccountsTableRowChanged;
            
            public event AccountsTableRowChangeEventHandler AccountsTableRowDeleting;
            
            public event AccountsTableRowChangeEventHandler AccountsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAccountsTableRow(AccountsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountsTableRow AddAccountsTableRow(BanksTableRow parentBanksTableRowByFK_AccountsTable_BanksTable, string temp, string account_chapterName, string account_chapterNo, string account_number, long account_amount, long account_remain, int accountType_id) {
                AccountsTableRow rowAccountsTableRow = ((AccountsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        temp,
                        account_chapterName,
                        account_chapterNo,
                        account_number,
                        account_amount,
                        account_remain,
                        accountType_id};
                if ((parentBanksTableRowByFK_AccountsTable_BanksTable != null)) {
                    columnValuesArray[1] = parentBanksTableRowByFK_AccountsTable_BanksTable[0];
                }
                rowAccountsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAccountsTableRow);
                return rowAccountsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountsTableRow FindByaccountID(int accountID) {
                return ((AccountsTableRow)(this.Rows.Find(new object[] {
                            accountID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AccountsTableDataTable cln = ((AccountsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AccountsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaccountID = base.Columns["accountID"];
                this.columnbankID = base.Columns["bankID"];
                this.columntemp = base.Columns["temp"];
                this.columnaccount_chapterName = base.Columns["account_chapterName"];
                this.columnaccount_chapterNo = base.Columns["account_chapterNo"];
                this.columnaccount_number = base.Columns["account_number"];
                this.columnaccount_amount = base.Columns["account_amount"];
                this.columnaccount_remain = base.Columns["account_remain"];
                this.columnaccountType_id = base.Columns["accountType_id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaccountID = new global::System.Data.DataColumn("accountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccountID);
                this.columnbankID = new global::System.Data.DataColumn("bankID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbankID);
                this.columntemp = new global::System.Data.DataColumn("temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemp);
                this.columnaccount_chapterName = new global::System.Data.DataColumn("account_chapterName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount_chapterName);
                this.columnaccount_chapterNo = new global::System.Data.DataColumn("account_chapterNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount_chapterNo);
                this.columnaccount_number = new global::System.Data.DataColumn("account_number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount_number);
                this.columnaccount_amount = new global::System.Data.DataColumn("account_amount", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount_amount);
                this.columnaccount_remain = new global::System.Data.DataColumn("account_remain", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount_remain);
                this.columnaccountType_id = new global::System.Data.DataColumn("accountType_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccountType_id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnaccountID}, true));
                this.columnaccountID.AutoIncrement = true;
                this.columnaccountID.AutoIncrementSeed = -1;
                this.columnaccountID.AutoIncrementStep = -1;
                this.columnaccountID.AllowDBNull = false;
                this.columnaccountID.ReadOnly = true;
                this.columnaccountID.Unique = true;
                this.columnbankID.AllowDBNull = false;
                this.columntemp.MaxLength = 250;
                this.columnaccount_chapterName.MaxLength = 50;
                this.columnaccount_chapterNo.MaxLength = 50;
                this.columnaccount_number.AllowDBNull = false;
                this.columnaccount_number.MaxLength = 50;
                this.columnaccount_amount.AllowDBNull = false;
                this.columnaccount_remain.AllowDBNull = false;
                this.columnaccountType_id.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountsTableRow NewAccountsTableRow() {
                return ((AccountsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AccountsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AccountsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AccountsTableRowChanged != null)) {
                    this.AccountsTableRowChanged(this, new AccountsTableRowChangeEvent(((AccountsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AccountsTableRowChanging != null)) {
                    this.AccountsTableRowChanging(this, new AccountsTableRowChangeEvent(((AccountsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AccountsTableRowDeleted != null)) {
                    this.AccountsTableRowDeleted(this, new AccountsTableRowChangeEvent(((AccountsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AccountsTableRowDeleting != null)) {
                    this.AccountsTableRowDeleting(this, new AccountsTableRowChangeEvent(((AccountsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAccountsTableRow(AccountsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AccountsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BanksTableDataTable : global::System.Data.TypedTableBase<BanksTableRow> {
            
            private global::System.Data.DataColumn columnbankID;
            
            private global::System.Data.DataColumn columnbankName;
            
            private global::System.Data.DataColumn columntemp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanksTableDataTable() {
                this.TableName = "BanksTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BanksTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BanksTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bankIDColumn {
                get {
                    return this.columnbankID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bankNameColumn {
                get {
                    return this.columnbankName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempColumn {
                get {
                    return this.columntemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanksTableRow this[int index] {
                get {
                    return ((BanksTableRow)(this.Rows[index]));
                }
            }
            
            public event BanksTableRowChangeEventHandler BanksTableRowChanging;
            
            public event BanksTableRowChangeEventHandler BanksTableRowChanged;
            
            public event BanksTableRowChangeEventHandler BanksTableRowDeleting;
            
            public event BanksTableRowChangeEventHandler BanksTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBanksTableRow(BanksTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanksTableRow AddBanksTableRow(string bankName, string temp) {
                BanksTableRow rowBanksTableRow = ((BanksTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        bankName,
                        temp};
                rowBanksTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBanksTableRow);
                return rowBanksTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanksTableRow FindBybankID(int bankID) {
                return ((BanksTableRow)(this.Rows.Find(new object[] {
                            bankID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BanksTableDataTable cln = ((BanksTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BanksTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnbankID = base.Columns["bankID"];
                this.columnbankName = base.Columns["bankName"];
                this.columntemp = base.Columns["temp"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnbankID = new global::System.Data.DataColumn("bankID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbankID);
                this.columnbankName = new global::System.Data.DataColumn("bankName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbankName);
                this.columntemp = new global::System.Data.DataColumn("temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemp);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnbankID}, true));
                this.columnbankID.AutoIncrement = true;
                this.columnbankID.AutoIncrementSeed = -1;
                this.columnbankID.AutoIncrementStep = -1;
                this.columnbankID.AllowDBNull = false;
                this.columnbankID.ReadOnly = true;
                this.columnbankID.Unique = true;
                this.columnbankName.AllowDBNull = false;
                this.columnbankName.MaxLength = 50;
                this.columntemp.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanksTableRow NewBanksTableRow() {
                return ((BanksTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BanksTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BanksTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BanksTableRowChanged != null)) {
                    this.BanksTableRowChanged(this, new BanksTableRowChangeEvent(((BanksTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BanksTableRowChanging != null)) {
                    this.BanksTableRowChanging(this, new BanksTableRowChangeEvent(((BanksTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BanksTableRowDeleted != null)) {
                    this.BanksTableRowDeleted(this, new BanksTableRowChangeEvent(((BanksTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BanksTableRowDeleting != null)) {
                    this.BanksTableRowDeleting(this, new BanksTableRowChangeEvent(((BanksTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBanksTableRow(BanksTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BanksTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class chequesTableDataTable : global::System.Data.TypedTableBase<chequesTableRow> {
            
            private global::System.Data.DataColumn columnchequeID;
            
            private global::System.Data.DataColumn columnpersonID;
            
            private global::System.Data.DataColumn columnchequeNumber;
            
            private global::System.Data.DataColumn columnissuanceDate;
            
            private global::System.Data.DataColumn columnusanceDate;
            
            private global::System.Data.DataColumn columnaccountID;
            
            private global::System.Data.DataColumn columnisTo;
            
            private global::System.Data.DataColumn columnchequeComent;
            
            private global::System.Data.DataColumn columnchequePrice;
            
            private global::System.Data.DataColumn columnchequeState;
            
            private global::System.Data.DataColumn columntemp;
            
            private global::System.Data.DataColumn columnchequeIsMine;
            
            private global::System.Data.DataColumn columnbankID;
            
            private global::System.Data.DataColumn columnaccDoc_id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesTableDataTable() {
                this.TableName = "chequesTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal chequesTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected chequesTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chequeIDColumn {
                get {
                    return this.columnchequeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personIDColumn {
                get {
                    return this.columnpersonID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chequeNumberColumn {
                get {
                    return this.columnchequeNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn issuanceDateColumn {
                get {
                    return this.columnissuanceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn usanceDateColumn {
                get {
                    return this.columnusanceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accountIDColumn {
                get {
                    return this.columnaccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isToColumn {
                get {
                    return this.columnisTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chequeComentColumn {
                get {
                    return this.columnchequeComent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chequePriceColumn {
                get {
                    return this.columnchequePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chequeStateColumn {
                get {
                    return this.columnchequeState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempColumn {
                get {
                    return this.columntemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chequeIsMineColumn {
                get {
                    return this.columnchequeIsMine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bankIDColumn {
                get {
                    return this.columnbankID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_idColumn {
                get {
                    return this.columnaccDoc_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesTableRow this[int index] {
                get {
                    return ((chequesTableRow)(this.Rows[index]));
                }
            }
            
            public event chequesTableRowChangeEventHandler chequesTableRowChanging;
            
            public event chequesTableRowChangeEventHandler chequesTableRowChanged;
            
            public event chequesTableRowChangeEventHandler chequesTableRowDeleting;
            
            public event chequesTableRowChangeEventHandler chequesTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddchequesTableRow(chequesTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesTableRow AddchequesTableRow(personsTableRow parentpersonsTableRowByFK_chequesTable_personsTable, string chequeNumber, string issuanceDate, string usanceDate, AccountsTableRow parentAccountsTableRowByFK_chequesTable_AccountsTable, string isTo, string chequeComent, long chequePrice, string chequeState, string temp, bool chequeIsMine, int bankID, AccountingDocsRow parentAccountingDocsRowByFK_chequesTable_AccountingDocs) {
                chequesTableRow rowchequesTableRow = ((chequesTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        chequeNumber,
                        issuanceDate,
                        usanceDate,
                        null,
                        isTo,
                        chequeComent,
                        chequePrice,
                        chequeState,
                        temp,
                        chequeIsMine,
                        bankID,
                        null};
                if ((parentpersonsTableRowByFK_chequesTable_personsTable != null)) {
                    columnValuesArray[1] = parentpersonsTableRowByFK_chequesTable_personsTable[0];
                }
                if ((parentAccountsTableRowByFK_chequesTable_AccountsTable != null)) {
                    columnValuesArray[5] = parentAccountsTableRowByFK_chequesTable_AccountsTable[0];
                }
                if ((parentAccountingDocsRowByFK_chequesTable_AccountingDocs != null)) {
                    columnValuesArray[13] = parentAccountingDocsRowByFK_chequesTable_AccountingDocs[0];
                }
                rowchequesTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowchequesTableRow);
                return rowchequesTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesTableRow FindBychequeID(int chequeID) {
                return ((chequesTableRow)(this.Rows.Find(new object[] {
                            chequeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                chequesTableDataTable cln = ((chequesTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new chequesTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnchequeID = base.Columns["chequeID"];
                this.columnpersonID = base.Columns["personID"];
                this.columnchequeNumber = base.Columns["chequeNumber"];
                this.columnissuanceDate = base.Columns["issuanceDate"];
                this.columnusanceDate = base.Columns["usanceDate"];
                this.columnaccountID = base.Columns["accountID"];
                this.columnisTo = base.Columns["isTo"];
                this.columnchequeComent = base.Columns["chequeComent"];
                this.columnchequePrice = base.Columns["chequePrice"];
                this.columnchequeState = base.Columns["chequeState"];
                this.columntemp = base.Columns["temp"];
                this.columnchequeIsMine = base.Columns["chequeIsMine"];
                this.columnbankID = base.Columns["bankID"];
                this.columnaccDoc_id = base.Columns["accDoc_id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnchequeID = new global::System.Data.DataColumn("chequeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchequeID);
                this.columnpersonID = new global::System.Data.DataColumn("personID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonID);
                this.columnchequeNumber = new global::System.Data.DataColumn("chequeNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchequeNumber);
                this.columnissuanceDate = new global::System.Data.DataColumn("issuanceDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnissuanceDate);
                this.columnusanceDate = new global::System.Data.DataColumn("usanceDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnusanceDate);
                this.columnaccountID = new global::System.Data.DataColumn("accountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccountID);
                this.columnisTo = new global::System.Data.DataColumn("isTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisTo);
                this.columnchequeComent = new global::System.Data.DataColumn("chequeComent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchequeComent);
                this.columnchequePrice = new global::System.Data.DataColumn("chequePrice", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchequePrice);
                this.columnchequeState = new global::System.Data.DataColumn("chequeState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchequeState);
                this.columntemp = new global::System.Data.DataColumn("temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemp);
                this.columnchequeIsMine = new global::System.Data.DataColumn("chequeIsMine", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchequeIsMine);
                this.columnbankID = new global::System.Data.DataColumn("bankID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbankID);
                this.columnaccDoc_id = new global::System.Data.DataColumn("accDoc_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnchequeID}, true));
                this.columnchequeID.AutoIncrement = true;
                this.columnchequeID.AutoIncrementSeed = -1;
                this.columnchequeID.AutoIncrementStep = -1;
                this.columnchequeID.AllowDBNull = false;
                this.columnchequeID.ReadOnly = true;
                this.columnchequeID.Unique = true;
                this.columnpersonID.AllowDBNull = false;
                this.columnchequeNumber.AllowDBNull = false;
                this.columnchequeNumber.MaxLength = 50;
                this.columnissuanceDate.AllowDBNull = false;
                this.columnissuanceDate.MaxLength = 20;
                this.columnusanceDate.AllowDBNull = false;
                this.columnusanceDate.MaxLength = 20;
                this.columnaccountID.AllowDBNull = false;
                this.columnisTo.AllowDBNull = false;
                this.columnisTo.MaxLength = 50;
                this.columnchequeComent.MaxLength = 250;
                this.columnchequeState.AllowDBNull = false;
                this.columnchequeState.MaxLength = 3;
                this.columntemp.MaxLength = 250;
                this.columnchequeIsMine.AllowDBNull = false;
                this.columnaccDoc_id.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesTableRow NewchequesTableRow() {
                return ((chequesTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new chequesTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(chequesTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.chequesTableRowChanged != null)) {
                    this.chequesTableRowChanged(this, new chequesTableRowChangeEvent(((chequesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.chequesTableRowChanging != null)) {
                    this.chequesTableRowChanging(this, new chequesTableRowChangeEvent(((chequesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.chequesTableRowDeleted != null)) {
                    this.chequesTableRowDeleted(this, new chequesTableRowChangeEvent(((chequesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.chequesTableRowDeleting != null)) {
                    this.chequesTableRowDeleting(this, new chequesTableRowChangeEvent(((chequesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovechequesTableRow(chequesTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "chequesTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class personsTableDataTable : global::System.Data.TypedTableBase<personsTableRow> {
            
            private global::System.Data.DataColumn columnpersonID;
            
            private global::System.Data.DataColumn columnpersonFamilyAndName;
            
            private global::System.Data.DataColumn columnpersonelNumber;
            
            private global::System.Data.DataColumn columnnationalNumber;
            
            private global::System.Data.DataColumn columnjob;
            
            private global::System.Data.DataColumn columnfatherName;
            
            private global::System.Data.DataColumn columnpersonNO;
            
            private global::System.Data.DataColumn columnpersonBorn;
            
            private global::System.Data.DataColumn columnpersonPhone1;
            
            private global::System.Data.DataColumn columnpersonPhone2;
            
            private global::System.Data.DataColumn columnpersonAddress1;
            
            private global::System.Data.DataColumn columnpersonAddress2;
            
            private global::System.Data.DataColumn columnbeforeType;
            
            private global::System.Data.DataColumn columnbeforeRemainMoney;
            
            private global::System.Data.DataColumn columnindebtedPrice;
            
            private global::System.Data.DataColumn columncreditorPrice;
            
            private global::System.Data.DataColumn columntemp;
            
            private global::System.Data.DataColumn columnvehicleKind;
            
            private global::System.Data.DataColumn columnpersonPic;
            
            private global::System.Data.DataColumn columnpersonForInfoPP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personsTableDataTable() {
                this.TableName = "personsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal personsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected personsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personIDColumn {
                get {
                    return this.columnpersonID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personFamilyAndNameColumn {
                get {
                    return this.columnpersonFamilyAndName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personelNumberColumn {
                get {
                    return this.columnpersonelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nationalNumberColumn {
                get {
                    return this.columnnationalNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jobColumn {
                get {
                    return this.columnjob;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fatherNameColumn {
                get {
                    return this.columnfatherName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personNOColumn {
                get {
                    return this.columnpersonNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personBornColumn {
                get {
                    return this.columnpersonBorn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personPhone1Column {
                get {
                    return this.columnpersonPhone1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personPhone2Column {
                get {
                    return this.columnpersonPhone2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personAddress1Column {
                get {
                    return this.columnpersonAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personAddress2Column {
                get {
                    return this.columnpersonAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn beforeTypeColumn {
                get {
                    return this.columnbeforeType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn beforeRemainMoneyColumn {
                get {
                    return this.columnbeforeRemainMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indebtedPriceColumn {
                get {
                    return this.columnindebtedPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn creditorPriceColumn {
                get {
                    return this.columncreditorPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempColumn {
                get {
                    return this.columntemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn vehicleKindColumn {
                get {
                    return this.columnvehicleKind;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personPicColumn {
                get {
                    return this.columnpersonPic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personForInfoPPColumn {
                get {
                    return this.columnpersonForInfoPP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personsTableRow this[int index] {
                get {
                    return ((personsTableRow)(this.Rows[index]));
                }
            }
            
            public event personsTableRowChangeEventHandler personsTableRowChanging;
            
            public event personsTableRowChangeEventHandler personsTableRowChanged;
            
            public event personsTableRowChangeEventHandler personsTableRowDeleting;
            
            public event personsTableRowChangeEventHandler personsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpersonsTableRow(personsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personsTableRow AddpersonsTableRow(
                        string personFamilyAndName, 
                        string personelNumber, 
                        string nationalNumber, 
                        string job, 
                        string fatherName, 
                        string personNO, 
                        string personBorn, 
                        string personPhone1, 
                        string personPhone2, 
                        string personAddress1, 
                        string personAddress2, 
                        string beforeType, 
                        long beforeRemainMoney, 
                        long indebtedPrice, 
                        long creditorPrice, 
                        string temp, 
                        string vehicleKind, 
                        byte[] personPic, 
                        bool personForInfoPP) {
                personsTableRow rowpersonsTableRow = ((personsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        personFamilyAndName,
                        personelNumber,
                        nationalNumber,
                        job,
                        fatherName,
                        personNO,
                        personBorn,
                        personPhone1,
                        personPhone2,
                        personAddress1,
                        personAddress2,
                        beforeType,
                        beforeRemainMoney,
                        indebtedPrice,
                        creditorPrice,
                        temp,
                        vehicleKind,
                        personPic,
                        personForInfoPP};
                rowpersonsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpersonsTableRow);
                return rowpersonsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personsTableRow FindBypersonID(int personID) {
                return ((personsTableRow)(this.Rows.Find(new object[] {
                            personID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                personsTableDataTable cln = ((personsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new personsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpersonID = base.Columns["personID"];
                this.columnpersonFamilyAndName = base.Columns["personFamilyAndName"];
                this.columnpersonelNumber = base.Columns["personelNumber"];
                this.columnnationalNumber = base.Columns["nationalNumber"];
                this.columnjob = base.Columns["job"];
                this.columnfatherName = base.Columns["fatherName"];
                this.columnpersonNO = base.Columns["personNO"];
                this.columnpersonBorn = base.Columns["personBorn"];
                this.columnpersonPhone1 = base.Columns["personPhone1"];
                this.columnpersonPhone2 = base.Columns["personPhone2"];
                this.columnpersonAddress1 = base.Columns["personAddress1"];
                this.columnpersonAddress2 = base.Columns["personAddress2"];
                this.columnbeforeType = base.Columns["beforeType"];
                this.columnbeforeRemainMoney = base.Columns["beforeRemainMoney"];
                this.columnindebtedPrice = base.Columns["indebtedPrice"];
                this.columncreditorPrice = base.Columns["creditorPrice"];
                this.columntemp = base.Columns["temp"];
                this.columnvehicleKind = base.Columns["vehicleKind"];
                this.columnpersonPic = base.Columns["personPic"];
                this.columnpersonForInfoPP = base.Columns["personForInfoPP"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpersonID = new global::System.Data.DataColumn("personID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonID);
                this.columnpersonFamilyAndName = new global::System.Data.DataColumn("personFamilyAndName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonFamilyAndName);
                this.columnpersonelNumber = new global::System.Data.DataColumn("personelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonelNumber);
                this.columnnationalNumber = new global::System.Data.DataColumn("nationalNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnationalNumber);
                this.columnjob = new global::System.Data.DataColumn("job", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjob);
                this.columnfatherName = new global::System.Data.DataColumn("fatherName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfatherName);
                this.columnpersonNO = new global::System.Data.DataColumn("personNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonNO);
                this.columnpersonBorn = new global::System.Data.DataColumn("personBorn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonBorn);
                this.columnpersonPhone1 = new global::System.Data.DataColumn("personPhone1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonPhone1);
                this.columnpersonPhone2 = new global::System.Data.DataColumn("personPhone2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonPhone2);
                this.columnpersonAddress1 = new global::System.Data.DataColumn("personAddress1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonAddress1);
                this.columnpersonAddress2 = new global::System.Data.DataColumn("personAddress2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonAddress2);
                this.columnbeforeType = new global::System.Data.DataColumn("beforeType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbeforeType);
                this.columnbeforeRemainMoney = new global::System.Data.DataColumn("beforeRemainMoney", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbeforeRemainMoney);
                this.columnindebtedPrice = new global::System.Data.DataColumn("indebtedPrice", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnindebtedPrice);
                this.columncreditorPrice = new global::System.Data.DataColumn("creditorPrice", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreditorPrice);
                this.columntemp = new global::System.Data.DataColumn("temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemp);
                this.columnvehicleKind = new global::System.Data.DataColumn("vehicleKind", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvehicleKind);
                this.columnpersonPic = new global::System.Data.DataColumn("personPic", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonPic);
                this.columnpersonForInfoPP = new global::System.Data.DataColumn("personForInfoPP", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonForInfoPP);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpersonID}, true));
                this.columnpersonID.AutoIncrement = true;
                this.columnpersonID.AutoIncrementSeed = -1;
                this.columnpersonID.AutoIncrementStep = -1;
                this.columnpersonID.AllowDBNull = false;
                this.columnpersonID.ReadOnly = true;
                this.columnpersonID.Unique = true;
                this.columnpersonFamilyAndName.AllowDBNull = false;
                this.columnpersonFamilyAndName.MaxLength = 100;
                this.columnpersonelNumber.MaxLength = 50;
                this.columnnationalNumber.MaxLength = 50;
                this.columnjob.MaxLength = 50;
                this.columnfatherName.MaxLength = 50;
                this.columnpersonNO.MaxLength = 20;
                this.columnpersonBorn.MaxLength = 50;
                this.columnpersonPhone1.MaxLength = 20;
                this.columnpersonPhone2.MaxLength = 20;
                this.columnpersonAddress1.MaxLength = 250;
                this.columnpersonAddress2.MaxLength = 250;
                this.columnbeforeType.MaxLength = 3;
                this.columntemp.MaxLength = 50;
                this.columnvehicleKind.MaxLength = 50;
                this.columnpersonForInfoPP.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personsTableRow NewpersonsTableRow() {
                return ((personsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new personsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(personsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.personsTableRowChanged != null)) {
                    this.personsTableRowChanged(this, new personsTableRowChangeEvent(((personsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.personsTableRowChanging != null)) {
                    this.personsTableRowChanging(this, new personsTableRowChangeEvent(((personsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.personsTableRowDeleted != null)) {
                    this.personsTableRowDeleted(this, new personsTableRowChangeEvent(((personsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.personsTableRowDeleting != null)) {
                    this.personsTableRowDeleting(this, new personsTableRowChangeEvent(((personsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepersonsTableRow(personsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "personsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class projectsPersonsDataTable : global::System.Data.TypedTableBase<projectsPersonsRow> {
            
            private global::System.Data.DataColumn columnprojectID;
            
            private global::System.Data.DataColumn columnpersonID;
            
            private global::System.Data.DataColumn columntemp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsPersonsDataTable() {
                this.TableName = "projectsPersons";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal projectsPersonsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected projectsPersonsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectIDColumn {
                get {
                    return this.columnprojectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personIDColumn {
                get {
                    return this.columnpersonID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempColumn {
                get {
                    return this.columntemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsPersonsRow this[int index] {
                get {
                    return ((projectsPersonsRow)(this.Rows[index]));
                }
            }
            
            public event projectsPersonsRowChangeEventHandler projectsPersonsRowChanging;
            
            public event projectsPersonsRowChangeEventHandler projectsPersonsRowChanged;
            
            public event projectsPersonsRowChangeEventHandler projectsPersonsRowDeleting;
            
            public event projectsPersonsRowChangeEventHandler projectsPersonsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddprojectsPersonsRow(projectsPersonsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsPersonsRow AddprojectsPersonsRow(projectsTableRow parentprojectsTableRowByFK_projectsPersons_projectsTable, personsTableRow parentpersonsTableRowByFK_projectsPersons_personsTable, string temp) {
                projectsPersonsRow rowprojectsPersonsRow = ((projectsPersonsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        temp};
                if ((parentprojectsTableRowByFK_projectsPersons_projectsTable != null)) {
                    columnValuesArray[0] = parentprojectsTableRowByFK_projectsPersons_projectsTable[0];
                }
                if ((parentpersonsTableRowByFK_projectsPersons_personsTable != null)) {
                    columnValuesArray[1] = parentpersonsTableRowByFK_projectsPersons_personsTable[0];
                }
                rowprojectsPersonsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowprojectsPersonsRow);
                return rowprojectsPersonsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsPersonsRow FindByprojectIDpersonID(int projectID, int personID) {
                return ((projectsPersonsRow)(this.Rows.Find(new object[] {
                            projectID,
                            personID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                projectsPersonsDataTable cln = ((projectsPersonsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new projectsPersonsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprojectID = base.Columns["projectID"];
                this.columnpersonID = base.Columns["personID"];
                this.columntemp = base.Columns["temp"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprojectID = new global::System.Data.DataColumn("projectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectID);
                this.columnpersonID = new global::System.Data.DataColumn("personID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonID);
                this.columntemp = new global::System.Data.DataColumn("temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemp);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnprojectID,
                                this.columnpersonID}, true));
                this.columnprojectID.AllowDBNull = false;
                this.columnpersonID.AllowDBNull = false;
                this.columntemp.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsPersonsRow NewprojectsPersonsRow() {
                return ((projectsPersonsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new projectsPersonsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(projectsPersonsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.projectsPersonsRowChanged != null)) {
                    this.projectsPersonsRowChanged(this, new projectsPersonsRowChangeEvent(((projectsPersonsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.projectsPersonsRowChanging != null)) {
                    this.projectsPersonsRowChanging(this, new projectsPersonsRowChangeEvent(((projectsPersonsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.projectsPersonsRowDeleted != null)) {
                    this.projectsPersonsRowDeleted(this, new projectsPersonsRowChangeEvent(((projectsPersonsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.projectsPersonsRowDeleting != null)) {
                    this.projectsPersonsRowDeleting(this, new projectsPersonsRowChangeEvent(((projectsPersonsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveprojectsPersonsRow(projectsPersonsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "projectsPersonsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class projectsTableDataTable : global::System.Data.TypedTableBase<projectsTableRow> {
            
            private global::System.Data.DataColumn columnprojectID;
            
            private global::System.Data.DataColumn columnprojectTitle;
            
            private global::System.Data.DataColumn columnprojectComment;
            
            private global::System.Data.DataColumn columntemp;
            
            private global::System.Data.DataColumn columnprojectMaster;
            
            private global::System.Data.DataColumn columnprojectWorkRoomNumber;
            
            private global::System.Data.DataColumn columnprojectType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsTableDataTable() {
                this.TableName = "projectsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal projectsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected projectsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectIDColumn {
                get {
                    return this.columnprojectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectTitleColumn {
                get {
                    return this.columnprojectTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectCommentColumn {
                get {
                    return this.columnprojectComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempColumn {
                get {
                    return this.columntemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectMasterColumn {
                get {
                    return this.columnprojectMaster;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectWorkRoomNumberColumn {
                get {
                    return this.columnprojectWorkRoomNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectTypeColumn {
                get {
                    return this.columnprojectType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsTableRow this[int index] {
                get {
                    return ((projectsTableRow)(this.Rows[index]));
                }
            }
            
            public event projectsTableRowChangeEventHandler projectsTableRowChanging;
            
            public event projectsTableRowChangeEventHandler projectsTableRowChanged;
            
            public event projectsTableRowChangeEventHandler projectsTableRowDeleting;
            
            public event projectsTableRowChangeEventHandler projectsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddprojectsTableRow(projectsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsTableRow AddprojectsTableRow(string projectTitle, string projectComment, string temp, string projectMaster, string projectWorkRoomNumber, string projectType) {
                projectsTableRow rowprojectsTableRow = ((projectsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        projectTitle,
                        projectComment,
                        temp,
                        projectMaster,
                        projectWorkRoomNumber,
                        projectType};
                rowprojectsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowprojectsTableRow);
                return rowprojectsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsTableRow FindByprojectID(int projectID) {
                return ((projectsTableRow)(this.Rows.Find(new object[] {
                            projectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                projectsTableDataTable cln = ((projectsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new projectsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprojectID = base.Columns["projectID"];
                this.columnprojectTitle = base.Columns["projectTitle"];
                this.columnprojectComment = base.Columns["projectComment"];
                this.columntemp = base.Columns["temp"];
                this.columnprojectMaster = base.Columns["projectMaster"];
                this.columnprojectWorkRoomNumber = base.Columns["projectWorkRoomNumber"];
                this.columnprojectType = base.Columns["projectType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprojectID = new global::System.Data.DataColumn("projectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectID);
                this.columnprojectTitle = new global::System.Data.DataColumn("projectTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectTitle);
                this.columnprojectComment = new global::System.Data.DataColumn("projectComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectComment);
                this.columntemp = new global::System.Data.DataColumn("temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemp);
                this.columnprojectMaster = new global::System.Data.DataColumn("projectMaster", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectMaster);
                this.columnprojectWorkRoomNumber = new global::System.Data.DataColumn("projectWorkRoomNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectWorkRoomNumber);
                this.columnprojectType = new global::System.Data.DataColumn("projectType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnprojectID}, true));
                this.columnprojectID.AutoIncrement = true;
                this.columnprojectID.AutoIncrementSeed = -1;
                this.columnprojectID.AutoIncrementStep = -1;
                this.columnprojectID.AllowDBNull = false;
                this.columnprojectID.ReadOnly = true;
                this.columnprojectID.Unique = true;
                this.columnprojectTitle.AllowDBNull = false;
                this.columnprojectTitle.MaxLength = 100;
                this.columnprojectComment.MaxLength = 250;
                this.columntemp.MaxLength = 50;
                this.columnprojectMaster.MaxLength = 50;
                this.columnprojectWorkRoomNumber.MaxLength = 20;
                this.columnprojectType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsTableRow NewprojectsTableRow() {
                return ((projectsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new projectsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(projectsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.projectsTableRowChanged != null)) {
                    this.projectsTableRowChanged(this, new projectsTableRowChangeEvent(((projectsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.projectsTableRowChanging != null)) {
                    this.projectsTableRowChanging(this, new projectsTableRowChangeEvent(((projectsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.projectsTableRowDeleted != null)) {
                    this.projectsTableRowDeleted(this, new projectsTableRowChangeEvent(((projectsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.projectsTableRowDeleting != null)) {
                    this.projectsTableRowDeleting(this, new projectsTableRowChangeEvent(((projectsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveprojectsTableRow(projectsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "projectsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class spentDefDataTable : global::System.Data.TypedTableBase<spentDefRow> {
            
            private global::System.Data.DataColumn columnspentDefID;
            
            private global::System.Data.DataColumn columnspentMasterID;
            
            private global::System.Data.DataColumn columnspentDefName;
            
            private global::System.Data.DataColumn columntemp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentDefDataTable() {
                this.TableName = "spentDef";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spentDefDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected spentDefDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentDefIDColumn {
                get {
                    return this.columnspentDefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMasterIDColumn {
                get {
                    return this.columnspentMasterID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentDefNameColumn {
                get {
                    return this.columnspentDefName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempColumn {
                get {
                    return this.columntemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentDefRow this[int index] {
                get {
                    return ((spentDefRow)(this.Rows[index]));
                }
            }
            
            public event spentDefRowChangeEventHandler spentDefRowChanging;
            
            public event spentDefRowChangeEventHandler spentDefRowChanged;
            
            public event spentDefRowChangeEventHandler spentDefRowDeleting;
            
            public event spentDefRowChangeEventHandler spentDefRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddspentDefRow(spentDefRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentDefRow AddspentDefRow(spentMasterRow parentspentMasterRowByFK_spentDef_spentMaster, string spentDefName, string temp) {
                spentDefRow rowspentDefRow = ((spentDefRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        spentDefName,
                        temp};
                if ((parentspentMasterRowByFK_spentDef_spentMaster != null)) {
                    columnValuesArray[1] = parentspentMasterRowByFK_spentDef_spentMaster[0];
                }
                rowspentDefRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowspentDefRow);
                return rowspentDefRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentDefRow FindByspentDefID(int spentDefID) {
                return ((spentDefRow)(this.Rows.Find(new object[] {
                            spentDefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                spentDefDataTable cln = ((spentDefDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new spentDefDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnspentDefID = base.Columns["spentDefID"];
                this.columnspentMasterID = base.Columns["spentMasterID"];
                this.columnspentDefName = base.Columns["spentDefName"];
                this.columntemp = base.Columns["temp"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnspentDefID = new global::System.Data.DataColumn("spentDefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentDefID);
                this.columnspentMasterID = new global::System.Data.DataColumn("spentMasterID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMasterID);
                this.columnspentDefName = new global::System.Data.DataColumn("spentDefName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentDefName);
                this.columntemp = new global::System.Data.DataColumn("temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemp);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnspentDefID}, true));
                this.columnspentDefID.AutoIncrement = true;
                this.columnspentDefID.AutoIncrementSeed = -1;
                this.columnspentDefID.AutoIncrementStep = -1;
                this.columnspentDefID.AllowDBNull = false;
                this.columnspentDefID.ReadOnly = true;
                this.columnspentDefID.Unique = true;
                this.columnspentMasterID.AllowDBNull = false;
                this.columnspentDefName.AllowDBNull = false;
                this.columnspentDefName.MaxLength = 50;
                this.columntemp.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentDefRow NewspentDefRow() {
                return ((spentDefRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new spentDefRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(spentDefRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.spentDefRowChanged != null)) {
                    this.spentDefRowChanged(this, new spentDefRowChangeEvent(((spentDefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.spentDefRowChanging != null)) {
                    this.spentDefRowChanging(this, new spentDefRowChangeEvent(((spentDefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.spentDefRowDeleted != null)) {
                    this.spentDefRowDeleted(this, new spentDefRowChangeEvent(((spentDefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.spentDefRowDeleting != null)) {
                    this.spentDefRowDeleting(this, new spentDefRowChangeEvent(((spentDefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovespentDefRow(spentDefRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "spentDefDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class spentMasterDataTable : global::System.Data.TypedTableBase<spentMasterRow> {
            
            private global::System.Data.DataColumn columnspentMasterID;
            
            private global::System.Data.DataColumn columnspentMasterName;
            
            private global::System.Data.DataColumn columnspentMaster_detailType;
            
            private global::System.Data.DataColumn columnspentMaster_required;
            
            private global::System.Data.DataColumn columnspentMaster_kind;
            
            private global::System.Data.DataColumn columnspentGroup_id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentMasterDataTable() {
                this.TableName = "spentMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spentMasterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected spentMasterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMasterIDColumn {
                get {
                    return this.columnspentMasterID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMasterNameColumn {
                get {
                    return this.columnspentMasterName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMaster_detailTypeColumn {
                get {
                    return this.columnspentMaster_detailType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMaster_requiredColumn {
                get {
                    return this.columnspentMaster_required;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMaster_kindColumn {
                get {
                    return this.columnspentMaster_kind;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentGroup_idColumn {
                get {
                    return this.columnspentGroup_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentMasterRow this[int index] {
                get {
                    return ((spentMasterRow)(this.Rows[index]));
                }
            }
            
            public event spentMasterRowChangeEventHandler spentMasterRowChanging;
            
            public event spentMasterRowChangeEventHandler spentMasterRowChanged;
            
            public event spentMasterRowChangeEventHandler spentMasterRowDeleting;
            
            public event spentMasterRowChangeEventHandler spentMasterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddspentMasterRow(spentMasterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentMasterRow AddspentMasterRow(string spentMasterName, int spentMaster_detailType, bool spentMaster_required, int spentMaster_kind, spentGroupsTableRow parentspentGroupsTableRowByFK_spentMaster_spentGroupsTable) {
                spentMasterRow rowspentMasterRow = ((spentMasterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        spentMasterName,
                        spentMaster_detailType,
                        spentMaster_required,
                        spentMaster_kind,
                        null};
                if ((parentspentGroupsTableRowByFK_spentMaster_spentGroupsTable != null)) {
                    columnValuesArray[5] = parentspentGroupsTableRowByFK_spentMaster_spentGroupsTable[0];
                }
                rowspentMasterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowspentMasterRow);
                return rowspentMasterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentMasterRow FindByspentMasterID(int spentMasterID) {
                return ((spentMasterRow)(this.Rows.Find(new object[] {
                            spentMasterID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                spentMasterDataTable cln = ((spentMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new spentMasterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnspentMasterID = base.Columns["spentMasterID"];
                this.columnspentMasterName = base.Columns["spentMasterName"];
                this.columnspentMaster_detailType = base.Columns["spentMaster_detailType"];
                this.columnspentMaster_required = base.Columns["spentMaster_required"];
                this.columnspentMaster_kind = base.Columns["spentMaster_kind"];
                this.columnspentGroup_id = base.Columns["spentGroup_id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnspentMasterID = new global::System.Data.DataColumn("spentMasterID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMasterID);
                this.columnspentMasterName = new global::System.Data.DataColumn("spentMasterName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMasterName);
                this.columnspentMaster_detailType = new global::System.Data.DataColumn("spentMaster_detailType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMaster_detailType);
                this.columnspentMaster_required = new global::System.Data.DataColumn("spentMaster_required", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMaster_required);
                this.columnspentMaster_kind = new global::System.Data.DataColumn("spentMaster_kind", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMaster_kind);
                this.columnspentGroup_id = new global::System.Data.DataColumn("spentGroup_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentGroup_id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnspentMasterID}, true));
                this.columnspentMasterID.AutoIncrement = true;
                this.columnspentMasterID.AutoIncrementSeed = -1;
                this.columnspentMasterID.AutoIncrementStep = -1;
                this.columnspentMasterID.AllowDBNull = false;
                this.columnspentMasterID.ReadOnly = true;
                this.columnspentMasterID.Unique = true;
                this.columnspentMasterName.AllowDBNull = false;
                this.columnspentMasterName.MaxLength = 250;
                this.columnspentMaster_detailType.AllowDBNull = false;
                this.columnspentMaster_required.AllowDBNull = false;
                this.columnspentGroup_id.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentMasterRow NewspentMasterRow() {
                return ((spentMasterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new spentMasterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(spentMasterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.spentMasterRowChanged != null)) {
                    this.spentMasterRowChanged(this, new spentMasterRowChangeEvent(((spentMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.spentMasterRowChanging != null)) {
                    this.spentMasterRowChanging(this, new spentMasterRowChangeEvent(((spentMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.spentMasterRowDeleted != null)) {
                    this.spentMasterRowDeleted(this, new spentMasterRowChangeEvent(((spentMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.spentMasterRowDeleting != null)) {
                    this.spentMasterRowDeleting(this, new spentMasterRowChangeEvent(((spentMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovespentMasterRow(spentMasterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "spentMasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class detractDefDataTable : global::System.Data.TypedTableBase<detractDefRow> {
            
            private global::System.Data.DataColumn columndetractDefID;
            
            private global::System.Data.DataColumn columnpensionID;
            
            private global::System.Data.DataColumn columndefName;
            
            private global::System.Data.DataColumn columntemp;
            
            private global::System.Data.DataColumn columndefValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractDefDataTable() {
                this.TableName = "detractDef";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal detractDefDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected detractDefDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detractDefIDColumn {
                get {
                    return this.columndetractDefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pensionIDColumn {
                get {
                    return this.columnpensionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn defNameColumn {
                get {
                    return this.columndefName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempColumn {
                get {
                    return this.columntemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn defValueColumn {
                get {
                    return this.columndefValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractDefRow this[int index] {
                get {
                    return ((detractDefRow)(this.Rows[index]));
                }
            }
            
            public event detractDefRowChangeEventHandler detractDefRowChanging;
            
            public event detractDefRowChangeEventHandler detractDefRowChanged;
            
            public event detractDefRowChangeEventHandler detractDefRowDeleting;
            
            public event detractDefRowChangeEventHandler detractDefRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddetractDefRow(detractDefRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractDefRow AdddetractDefRow(pensionsTableRow parentpensionsTableRowByFK_detractDef_pensionsTable, string defName, string temp, long defValue) {
                detractDefRow rowdetractDefRow = ((detractDefRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        defName,
                        temp,
                        defValue};
                if ((parentpensionsTableRowByFK_detractDef_pensionsTable != null)) {
                    columnValuesArray[1] = parentpensionsTableRowByFK_detractDef_pensionsTable[0];
                }
                rowdetractDefRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdetractDefRow);
                return rowdetractDefRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractDefRow FindBydetractDefID(int detractDefID) {
                return ((detractDefRow)(this.Rows.Find(new object[] {
                            detractDefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                detractDefDataTable cln = ((detractDefDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new detractDefDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndetractDefID = base.Columns["detractDefID"];
                this.columnpensionID = base.Columns["pensionID"];
                this.columndefName = base.Columns["defName"];
                this.columntemp = base.Columns["temp"];
                this.columndefValue = base.Columns["defValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndetractDefID = new global::System.Data.DataColumn("detractDefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetractDefID);
                this.columnpensionID = new global::System.Data.DataColumn("pensionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpensionID);
                this.columndefName = new global::System.Data.DataColumn("defName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndefName);
                this.columntemp = new global::System.Data.DataColumn("temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemp);
                this.columndefValue = new global::System.Data.DataColumn("defValue", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndefValue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndetractDefID}, true));
                this.columndetractDefID.AutoIncrement = true;
                this.columndetractDefID.AutoIncrementSeed = -1;
                this.columndetractDefID.AutoIncrementStep = -1;
                this.columndetractDefID.AllowDBNull = false;
                this.columndetractDefID.ReadOnly = true;
                this.columndetractDefID.Unique = true;
                this.columnpensionID.AllowDBNull = false;
                this.columndefName.AllowDBNull = false;
                this.columndefName.MaxLength = 50;
                this.columntemp.MaxLength = 250;
                this.columndefValue.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractDefRow NewdetractDefRow() {
                return ((detractDefRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new detractDefRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(detractDefRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.detractDefRowChanged != null)) {
                    this.detractDefRowChanged(this, new detractDefRowChangeEvent(((detractDefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.detractDefRowChanging != null)) {
                    this.detractDefRowChanging(this, new detractDefRowChangeEvent(((detractDefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.detractDefRowDeleted != null)) {
                    this.detractDefRowDeleted(this, new detractDefRowChangeEvent(((detractDefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.detractDefRowDeleting != null)) {
                    this.detractDefRowDeleting(this, new detractDefRowChangeEvent(((detractDefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedetractDefRow(detractDefRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "detractDefDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class pensionDefDataTable : global::System.Data.TypedTableBase<pensionDefRow> {
            
            private global::System.Data.DataColumn columnpensionDefID;
            
            private global::System.Data.DataColumn columnpensionID;
            
            private global::System.Data.DataColumn columntemp;
            
            private global::System.Data.DataColumn columnpensionName;
            
            private global::System.Data.DataColumn columnpensionValue;
            
            private global::System.Data.DataColumn columndetractName;
            
            private global::System.Data.DataColumn columndetractValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionDefDataTable() {
                this.TableName = "pensionDef";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pensionDefDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected pensionDefDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pensionDefIDColumn {
                get {
                    return this.columnpensionDefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pensionIDColumn {
                get {
                    return this.columnpensionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempColumn {
                get {
                    return this.columntemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pensionNameColumn {
                get {
                    return this.columnpensionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pensionValueColumn {
                get {
                    return this.columnpensionValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detractNameColumn {
                get {
                    return this.columndetractName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detractValueColumn {
                get {
                    return this.columndetractValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionDefRow this[int index] {
                get {
                    return ((pensionDefRow)(this.Rows[index]));
                }
            }
            
            public event pensionDefRowChangeEventHandler pensionDefRowChanging;
            
            public event pensionDefRowChangeEventHandler pensionDefRowChanged;
            
            public event pensionDefRowChangeEventHandler pensionDefRowDeleting;
            
            public event pensionDefRowChangeEventHandler pensionDefRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpensionDefRow(pensionDefRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionDefRow AddpensionDefRow(pensionsTableRow parentpensionsTableRowByFK_pensionDef_pensionsTable, string temp, string pensionName, long pensionValue, string detractName, long detractValue) {
                pensionDefRow rowpensionDefRow = ((pensionDefRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        temp,
                        pensionName,
                        pensionValue,
                        detractName,
                        detractValue};
                if ((parentpensionsTableRowByFK_pensionDef_pensionsTable != null)) {
                    columnValuesArray[1] = parentpensionsTableRowByFK_pensionDef_pensionsTable[0];
                }
                rowpensionDefRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpensionDefRow);
                return rowpensionDefRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionDefRow FindBypensionDefID(int pensionDefID) {
                return ((pensionDefRow)(this.Rows.Find(new object[] {
                            pensionDefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                pensionDefDataTable cln = ((pensionDefDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new pensionDefDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpensionDefID = base.Columns["pensionDefID"];
                this.columnpensionID = base.Columns["pensionID"];
                this.columntemp = base.Columns["temp"];
                this.columnpensionName = base.Columns["pensionName"];
                this.columnpensionValue = base.Columns["pensionValue"];
                this.columndetractName = base.Columns["detractName"];
                this.columndetractValue = base.Columns["detractValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpensionDefID = new global::System.Data.DataColumn("pensionDefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpensionDefID);
                this.columnpensionID = new global::System.Data.DataColumn("pensionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpensionID);
                this.columntemp = new global::System.Data.DataColumn("temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemp);
                this.columnpensionName = new global::System.Data.DataColumn("pensionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpensionName);
                this.columnpensionValue = new global::System.Data.DataColumn("pensionValue", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpensionValue);
                this.columndetractName = new global::System.Data.DataColumn("detractName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetractName);
                this.columndetractValue = new global::System.Data.DataColumn("detractValue", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetractValue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpensionDefID}, true));
                this.columnpensionDefID.AutoIncrement = true;
                this.columnpensionDefID.AutoIncrementSeed = -1;
                this.columnpensionDefID.AutoIncrementStep = -1;
                this.columnpensionDefID.AllowDBNull = false;
                this.columnpensionDefID.ReadOnly = true;
                this.columnpensionDefID.Unique = true;
                this.columnpensionID.AllowDBNull = false;
                this.columntemp.MaxLength = 250;
                this.columnpensionName.MaxLength = 50;
                this.columndetractName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionDefRow NewpensionDefRow() {
                return ((pensionDefRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new pensionDefRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(pensionDefRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.pensionDefRowChanged != null)) {
                    this.pensionDefRowChanged(this, new pensionDefRowChangeEvent(((pensionDefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.pensionDefRowChanging != null)) {
                    this.pensionDefRowChanging(this, new pensionDefRowChangeEvent(((pensionDefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.pensionDefRowDeleted != null)) {
                    this.pensionDefRowDeleted(this, new pensionDefRowChangeEvent(((pensionDefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.pensionDefRowDeleting != null)) {
                    this.pensionDefRowDeleting(this, new pensionDefRowChangeEvent(((pensionDefRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepensionDefRow(pensionDefRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "pensionDefDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class pensionsTableDataTable : global::System.Data.TypedTableBase<pensionsTableRow> {
            
            private global::System.Data.DataColumn columnpensionID;
            
            private global::System.Data.DataColumn columnpersonID;
            
            private global::System.Data.DataColumn columnprojectID;
            
            private global::System.Data.DataColumn columnbasePension;
            
            private global::System.Data.DataColumn columnovertimePension;
            
            private global::System.Data.DataColumn columntaxDetraction;
            
            private global::System.Data.DataColumn columninsuranceDetraction;
            
            private global::System.Data.DataColumn columnworkedDays;
            
            private global::System.Data.DataColumn columnovertimeHours;
            
            private global::System.Data.DataColumn columntemp;
            
            private global::System.Data.DataColumn columndDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsTableDataTable() {
                this.TableName = "pensionsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pensionsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected pensionsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pensionIDColumn {
                get {
                    return this.columnpensionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personIDColumn {
                get {
                    return this.columnpersonID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectIDColumn {
                get {
                    return this.columnprojectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn basePensionColumn {
                get {
                    return this.columnbasePension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn overtimePensionColumn {
                get {
                    return this.columnovertimePension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn taxDetractionColumn {
                get {
                    return this.columntaxDetraction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn insuranceDetractionColumn {
                get {
                    return this.columninsuranceDetraction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn workedDaysColumn {
                get {
                    return this.columnworkedDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn overtimeHoursColumn {
                get {
                    return this.columnovertimeHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempColumn {
                get {
                    return this.columntemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dDateColumn {
                get {
                    return this.columndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsTableRow this[int index] {
                get {
                    return ((pensionsTableRow)(this.Rows[index]));
                }
            }
            
            public event pensionsTableRowChangeEventHandler pensionsTableRowChanging;
            
            public event pensionsTableRowChangeEventHandler pensionsTableRowChanged;
            
            public event pensionsTableRowChangeEventHandler pensionsTableRowDeleting;
            
            public event pensionsTableRowChangeEventHandler pensionsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpensionsTableRow(pensionsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsTableRow AddpensionsTableRow(personsTableRow parentpersonsTableRowByFK_pensionsTable_personsTable, projectsTableRow parentprojectsTableRowByFK_pensionsTable_projectsTable, long basePension, long overtimePension, long taxDetraction, long insuranceDetraction, int workedDays, int overtimeHours, string temp, string dDate) {
                pensionsTableRow rowpensionsTableRow = ((pensionsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        basePension,
                        overtimePension,
                        taxDetraction,
                        insuranceDetraction,
                        workedDays,
                        overtimeHours,
                        temp,
                        dDate};
                if ((parentpersonsTableRowByFK_pensionsTable_personsTable != null)) {
                    columnValuesArray[1] = parentpersonsTableRowByFK_pensionsTable_personsTable[0];
                }
                if ((parentprojectsTableRowByFK_pensionsTable_projectsTable != null)) {
                    columnValuesArray[2] = parentprojectsTableRowByFK_pensionsTable_projectsTable[0];
                }
                rowpensionsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpensionsTableRow);
                return rowpensionsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsTableRow FindBypensionID(int pensionID) {
                return ((pensionsTableRow)(this.Rows.Find(new object[] {
                            pensionID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                pensionsTableDataTable cln = ((pensionsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new pensionsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpensionID = base.Columns["pensionID"];
                this.columnpersonID = base.Columns["personID"];
                this.columnprojectID = base.Columns["projectID"];
                this.columnbasePension = base.Columns["basePension"];
                this.columnovertimePension = base.Columns["overtimePension"];
                this.columntaxDetraction = base.Columns["taxDetraction"];
                this.columninsuranceDetraction = base.Columns["insuranceDetraction"];
                this.columnworkedDays = base.Columns["workedDays"];
                this.columnovertimeHours = base.Columns["overtimeHours"];
                this.columntemp = base.Columns["temp"];
                this.columndDate = base.Columns["dDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpensionID = new global::System.Data.DataColumn("pensionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpensionID);
                this.columnpersonID = new global::System.Data.DataColumn("personID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonID);
                this.columnprojectID = new global::System.Data.DataColumn("projectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectID);
                this.columnbasePension = new global::System.Data.DataColumn("basePension", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbasePension);
                this.columnovertimePension = new global::System.Data.DataColumn("overtimePension", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnovertimePension);
                this.columntaxDetraction = new global::System.Data.DataColumn("taxDetraction", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxDetraction);
                this.columninsuranceDetraction = new global::System.Data.DataColumn("insuranceDetraction", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninsuranceDetraction);
                this.columnworkedDays = new global::System.Data.DataColumn("workedDays", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnworkedDays);
                this.columnovertimeHours = new global::System.Data.DataColumn("overtimeHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnovertimeHours);
                this.columntemp = new global::System.Data.DataColumn("temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemp);
                this.columndDate = new global::System.Data.DataColumn("dDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpensionID}, true));
                this.columnpensionID.AutoIncrement = true;
                this.columnpensionID.AutoIncrementSeed = -1;
                this.columnpensionID.AutoIncrementStep = -1;
                this.columnpensionID.AllowDBNull = false;
                this.columnpensionID.ReadOnly = true;
                this.columnpensionID.Unique = true;
                this.columnpersonID.AllowDBNull = false;
                this.columnprojectID.AllowDBNull = false;
                this.columnbasePension.AllowDBNull = false;
                this.columnovertimePension.AllowDBNull = false;
                this.columntaxDetraction.AllowDBNull = false;
                this.columninsuranceDetraction.AllowDBNull = false;
                this.columnworkedDays.AllowDBNull = false;
                this.columnovertimeHours.AllowDBNull = false;
                this.columntemp.MaxLength = 250;
                this.columndDate.AllowDBNull = false;
                this.columndDate.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsTableRow NewpensionsTableRow() {
                return ((pensionsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new pensionsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(pensionsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.pensionsTableRowChanged != null)) {
                    this.pensionsTableRowChanged(this, new pensionsTableRowChangeEvent(((pensionsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.pensionsTableRowChanging != null)) {
                    this.pensionsTableRowChanging(this, new pensionsTableRowChangeEvent(((pensionsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.pensionsTableRowDeleted != null)) {
                    this.pensionsTableRowDeleted(this, new pensionsTableRowChangeEvent(((pensionsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.pensionsTableRowDeleting != null)) {
                    this.pensionsTableRowDeleting(this, new pensionsTableRowChangeEvent(((pensionsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepensionsTableRow(pensionsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "pensionsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class docsTableDataTable : global::System.Data.TypedTableBase<docsTableRow> {
            
            private global::System.Data.DataColumn columndocID;
            
            private global::System.Data.DataColumn columnprice;
            
            private global::System.Data.DataColumn columndocType;
            
            private global::System.Data.DataColumn columndocComment;
            
            private global::System.Data.DataColumn columntemp;
            
            private global::System.Data.DataColumn columnprojectID;
            
            private global::System.Data.DataColumn columnpersonID;
            
            private global::System.Data.DataColumn columndDate;
            
            private global::System.Data.DataColumn columnbankID;
            
            private global::System.Data.DataColumn columnaccountID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public docsTableDataTable() {
                this.TableName = "docsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal docsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected docsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docIDColumn {
                get {
                    return this.columndocID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceColumn {
                get {
                    return this.columnprice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docTypeColumn {
                get {
                    return this.columndocType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docCommentColumn {
                get {
                    return this.columndocComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempColumn {
                get {
                    return this.columntemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectIDColumn {
                get {
                    return this.columnprojectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personIDColumn {
                get {
                    return this.columnpersonID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dDateColumn {
                get {
                    return this.columndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bankIDColumn {
                get {
                    return this.columnbankID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accountIDColumn {
                get {
                    return this.columnaccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public docsTableRow this[int index] {
                get {
                    return ((docsTableRow)(this.Rows[index]));
                }
            }
            
            public event docsTableRowChangeEventHandler docsTableRowChanging;
            
            public event docsTableRowChangeEventHandler docsTableRowChanged;
            
            public event docsTableRowChangeEventHandler docsTableRowDeleting;
            
            public event docsTableRowChangeEventHandler docsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddocsTableRow(docsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public docsTableRow AdddocsTableRow(int docID, long price, string docType, string docComment, string temp, projectsTableRow parentprojectsTableRowByFK_docsTable_projectsTable, personsTableRow parentpersonsTableRowByFK_docsTable_personsTable, string dDate, int bankID, AccountsTableRow parentAccountsTableRowByFK_docsTable_AccountsTable) {
                docsTableRow rowdocsTableRow = ((docsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        docID,
                        price,
                        docType,
                        docComment,
                        temp,
                        null,
                        null,
                        dDate,
                        bankID,
                        null};
                if ((parentprojectsTableRowByFK_docsTable_projectsTable != null)) {
                    columnValuesArray[5] = parentprojectsTableRowByFK_docsTable_projectsTable[0];
                }
                if ((parentpersonsTableRowByFK_docsTable_personsTable != null)) {
                    columnValuesArray[6] = parentpersonsTableRowByFK_docsTable_personsTable[0];
                }
                if ((parentAccountsTableRowByFK_docsTable_AccountsTable != null)) {
                    columnValuesArray[9] = parentAccountsTableRowByFK_docsTable_AccountsTable[0];
                }
                rowdocsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdocsTableRow);
                return rowdocsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public docsTableRow FindBydocID(int docID) {
                return ((docsTableRow)(this.Rows.Find(new object[] {
                            docID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                docsTableDataTable cln = ((docsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new docsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndocID = base.Columns["docID"];
                this.columnprice = base.Columns["price"];
                this.columndocType = base.Columns["docType"];
                this.columndocComment = base.Columns["docComment"];
                this.columntemp = base.Columns["temp"];
                this.columnprojectID = base.Columns["projectID"];
                this.columnpersonID = base.Columns["personID"];
                this.columndDate = base.Columns["dDate"];
                this.columnbankID = base.Columns["bankID"];
                this.columnaccountID = base.Columns["accountID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndocID = new global::System.Data.DataColumn("docID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocID);
                this.columnprice = new global::System.Data.DataColumn("price", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprice);
                this.columndocType = new global::System.Data.DataColumn("docType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocType);
                this.columndocComment = new global::System.Data.DataColumn("docComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocComment);
                this.columntemp = new global::System.Data.DataColumn("temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemp);
                this.columnprojectID = new global::System.Data.DataColumn("projectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectID);
                this.columnpersonID = new global::System.Data.DataColumn("personID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonID);
                this.columndDate = new global::System.Data.DataColumn("dDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndDate);
                this.columnbankID = new global::System.Data.DataColumn("bankID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbankID);
                this.columnaccountID = new global::System.Data.DataColumn("accountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccountID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndocID}, true));
                this.columndocID.AllowDBNull = false;
                this.columndocID.Unique = true;
                this.columnprice.AllowDBNull = false;
                this.columndocType.AllowDBNull = false;
                this.columndocType.MaxLength = 3;
                this.columndocComment.MaxLength = 250;
                this.columntemp.MaxLength = 250;
                this.columnprojectID.AllowDBNull = false;
                this.columndDate.AllowDBNull = false;
                this.columndDate.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public docsTableRow NewdocsTableRow() {
                return ((docsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new docsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(docsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.docsTableRowChanged != null)) {
                    this.docsTableRowChanged(this, new docsTableRowChangeEvent(((docsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.docsTableRowChanging != null)) {
                    this.docsTableRowChanging(this, new docsTableRowChangeEvent(((docsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.docsTableRowDeleted != null)) {
                    this.docsTableRowDeleted(this, new docsTableRowChangeEvent(((docsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.docsTableRowDeleting != null)) {
                    this.docsTableRowDeleting(this, new docsTableRowChangeEvent(((docsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedocsTableRow(docsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "docsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View1DataTable : global::System.Data.TypedTableBase<View1Row> {
            
            private global::System.Data.DataColumn columnchequeNumber;
            
            private global::System.Data.DataColumn columnissuanceDate;
            
            private global::System.Data.DataColumn columnusanceDate;
            
            private global::System.Data.DataColumn columnprojectTitle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View1DataTable() {
                this.TableName = "View1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chequeNumberColumn {
                get {
                    return this.columnchequeNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn issuanceDateColumn {
                get {
                    return this.columnissuanceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn usanceDateColumn {
                get {
                    return this.columnusanceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectTitleColumn {
                get {
                    return this.columnprojectTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View1Row this[int index] {
                get {
                    return ((View1Row)(this.Rows[index]));
                }
            }
            
            public event View1RowChangeEventHandler View1RowChanging;
            
            public event View1RowChangeEventHandler View1RowChanged;
            
            public event View1RowChangeEventHandler View1RowDeleting;
            
            public event View1RowChangeEventHandler View1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView1Row(View1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View1Row AddView1Row(string chequeNumber, string issuanceDate, string usanceDate, string projectTitle) {
                View1Row rowView1Row = ((View1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        chequeNumber,
                        issuanceDate,
                        usanceDate,
                        projectTitle};
                rowView1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowView1Row);
                return rowView1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View1DataTable cln = ((View1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnchequeNumber = base.Columns["chequeNumber"];
                this.columnissuanceDate = base.Columns["issuanceDate"];
                this.columnusanceDate = base.Columns["usanceDate"];
                this.columnprojectTitle = base.Columns["projectTitle"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnchequeNumber = new global::System.Data.DataColumn("chequeNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchequeNumber);
                this.columnissuanceDate = new global::System.Data.DataColumn("issuanceDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnissuanceDate);
                this.columnusanceDate = new global::System.Data.DataColumn("usanceDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnusanceDate);
                this.columnprojectTitle = new global::System.Data.DataColumn("projectTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectTitle);
                this.columnchequeNumber.AllowDBNull = false;
                this.columnchequeNumber.MaxLength = 50;
                this.columnissuanceDate.AllowDBNull = false;
                this.columnissuanceDate.MaxLength = 20;
                this.columnusanceDate.AllowDBNull = false;
                this.columnusanceDate.MaxLength = 20;
                this.columnprojectTitle.AllowDBNull = false;
                this.columnprojectTitle.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View1Row NewView1Row() {
                return ((View1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View1RowChanged != null)) {
                    this.View1RowChanged(this, new View1RowChangeEvent(((View1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View1RowChanging != null)) {
                    this.View1RowChanging(this, new View1RowChangeEvent(((View1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View1RowDeleted != null)) {
                    this.View1RowDeleted(this, new View1RowChangeEvent(((View1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View1RowDeleting != null)) {
                    this.View1RowDeleting(this, new View1RowChangeEvent(((View1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView1Row(View1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class pensionsViewDataTable : global::System.Data.TypedTableBase<pensionsViewRow> {
            
            private global::System.Data.DataColumn columnpersonelNumber;
            
            private global::System.Data.DataColumn columnpersonFamilyAndName;
            
            private global::System.Data.DataColumn columnnationalNumber;
            
            private global::System.Data.DataColumn columnfatherName;
            
            private global::System.Data.DataColumn columnjob;
            
            private global::System.Data.DataColumn columnprojectTitle;
            
            private global::System.Data.DataColumn columnbasePension;
            
            private global::System.Data.DataColumn columnovertimePension;
            
            private global::System.Data.DataColumn columntaxDetraction;
            
            private global::System.Data.DataColumn columninsuranceDetraction;
            
            private global::System.Data.DataColumn columnworkedDays;
            
            private global::System.Data.DataColumn columnovertimeHours;
            
            private global::System.Data.DataColumn columnpersonNO;
            
            private global::System.Data.DataColumn columnpersonBorn;
            
            private global::System.Data.DataColumn columndDate;
            
            private global::System.Data.DataColumn columnpensionID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsViewDataTable() {
                this.TableName = "pensionsView";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pensionsViewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected pensionsViewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personelNumberColumn {
                get {
                    return this.columnpersonelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personFamilyAndNameColumn {
                get {
                    return this.columnpersonFamilyAndName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nationalNumberColumn {
                get {
                    return this.columnnationalNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fatherNameColumn {
                get {
                    return this.columnfatherName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jobColumn {
                get {
                    return this.columnjob;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectTitleColumn {
                get {
                    return this.columnprojectTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn basePensionColumn {
                get {
                    return this.columnbasePension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn overtimePensionColumn {
                get {
                    return this.columnovertimePension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn taxDetractionColumn {
                get {
                    return this.columntaxDetraction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn insuranceDetractionColumn {
                get {
                    return this.columninsuranceDetraction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn workedDaysColumn {
                get {
                    return this.columnworkedDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn overtimeHoursColumn {
                get {
                    return this.columnovertimeHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personNOColumn {
                get {
                    return this.columnpersonNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personBornColumn {
                get {
                    return this.columnpersonBorn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dDateColumn {
                get {
                    return this.columndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pensionIDColumn {
                get {
                    return this.columnpensionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsViewRow this[int index] {
                get {
                    return ((pensionsViewRow)(this.Rows[index]));
                }
            }
            
            public event pensionsViewRowChangeEventHandler pensionsViewRowChanging;
            
            public event pensionsViewRowChangeEventHandler pensionsViewRowChanged;
            
            public event pensionsViewRowChangeEventHandler pensionsViewRowDeleting;
            
            public event pensionsViewRowChangeEventHandler pensionsViewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpensionsViewRow(pensionsViewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsViewRow AddpensionsViewRow(
                        string personelNumber, 
                        string personFamilyAndName, 
                        string nationalNumber, 
                        string fatherName, 
                        string job, 
                        string projectTitle, 
                        long basePension, 
                        long overtimePension, 
                        long taxDetraction, 
                        long insuranceDetraction, 
                        int workedDays, 
                        int overtimeHours, 
                        string personNO, 
                        string personBorn, 
                        string dDate, 
                        int pensionID) {
                pensionsViewRow rowpensionsViewRow = ((pensionsViewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        personelNumber,
                        personFamilyAndName,
                        nationalNumber,
                        fatherName,
                        job,
                        projectTitle,
                        basePension,
                        overtimePension,
                        taxDetraction,
                        insuranceDetraction,
                        workedDays,
                        overtimeHours,
                        personNO,
                        personBorn,
                        dDate,
                        pensionID};
                rowpensionsViewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpensionsViewRow);
                return rowpensionsViewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsViewRow FindBypensionID(int pensionID) {
                return ((pensionsViewRow)(this.Rows.Find(new object[] {
                            pensionID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                pensionsViewDataTable cln = ((pensionsViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new pensionsViewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpersonelNumber = base.Columns["personelNumber"];
                this.columnpersonFamilyAndName = base.Columns["personFamilyAndName"];
                this.columnnationalNumber = base.Columns["nationalNumber"];
                this.columnfatherName = base.Columns["fatherName"];
                this.columnjob = base.Columns["job"];
                this.columnprojectTitle = base.Columns["projectTitle"];
                this.columnbasePension = base.Columns["basePension"];
                this.columnovertimePension = base.Columns["overtimePension"];
                this.columntaxDetraction = base.Columns["taxDetraction"];
                this.columninsuranceDetraction = base.Columns["insuranceDetraction"];
                this.columnworkedDays = base.Columns["workedDays"];
                this.columnovertimeHours = base.Columns["overtimeHours"];
                this.columnpersonNO = base.Columns["personNO"];
                this.columnpersonBorn = base.Columns["personBorn"];
                this.columndDate = base.Columns["dDate"];
                this.columnpensionID = base.Columns["pensionID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpersonelNumber = new global::System.Data.DataColumn("personelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonelNumber);
                this.columnpersonFamilyAndName = new global::System.Data.DataColumn("personFamilyAndName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonFamilyAndName);
                this.columnnationalNumber = new global::System.Data.DataColumn("nationalNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnationalNumber);
                this.columnfatherName = new global::System.Data.DataColumn("fatherName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfatherName);
                this.columnjob = new global::System.Data.DataColumn("job", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjob);
                this.columnprojectTitle = new global::System.Data.DataColumn("projectTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectTitle);
                this.columnbasePension = new global::System.Data.DataColumn("basePension", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbasePension);
                this.columnovertimePension = new global::System.Data.DataColumn("overtimePension", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnovertimePension);
                this.columntaxDetraction = new global::System.Data.DataColumn("taxDetraction", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxDetraction);
                this.columninsuranceDetraction = new global::System.Data.DataColumn("insuranceDetraction", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninsuranceDetraction);
                this.columnworkedDays = new global::System.Data.DataColumn("workedDays", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnworkedDays);
                this.columnovertimeHours = new global::System.Data.DataColumn("overtimeHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnovertimeHours);
                this.columnpersonNO = new global::System.Data.DataColumn("personNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonNO);
                this.columnpersonBorn = new global::System.Data.DataColumn("personBorn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonBorn);
                this.columndDate = new global::System.Data.DataColumn("dDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndDate);
                this.columnpensionID = new global::System.Data.DataColumn("pensionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpensionID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpensionID}, true));
                this.columnpersonelNumber.MaxLength = 50;
                this.columnpersonFamilyAndName.AllowDBNull = false;
                this.columnpersonFamilyAndName.MaxLength = 100;
                this.columnnationalNumber.MaxLength = 50;
                this.columnfatherName.MaxLength = 50;
                this.columnjob.MaxLength = 50;
                this.columnprojectTitle.AllowDBNull = false;
                this.columnprojectTitle.MaxLength = 100;
                this.columnbasePension.AllowDBNull = false;
                this.columnovertimePension.AllowDBNull = false;
                this.columntaxDetraction.AllowDBNull = false;
                this.columninsuranceDetraction.AllowDBNull = false;
                this.columnworkedDays.AllowDBNull = false;
                this.columnovertimeHours.AllowDBNull = false;
                this.columnpersonNO.MaxLength = 20;
                this.columnpersonBorn.MaxLength = 50;
                this.columndDate.AllowDBNull = false;
                this.columndDate.MaxLength = 50;
                this.columnpensionID.AllowDBNull = false;
                this.columnpensionID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsViewRow NewpensionsViewRow() {
                return ((pensionsViewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new pensionsViewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(pensionsViewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.pensionsViewRowChanged != null)) {
                    this.pensionsViewRowChanged(this, new pensionsViewRowChangeEvent(((pensionsViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.pensionsViewRowChanging != null)) {
                    this.pensionsViewRowChanging(this, new pensionsViewRowChangeEvent(((pensionsViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.pensionsViewRowDeleted != null)) {
                    this.pensionsViewRowDeleted(this, new pensionsViewRowChangeEvent(((pensionsViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.pensionsViewRowDeleting != null)) {
                    this.pensionsViewRowDeleting(this, new pensionsViewRowChangeEvent(((pensionsViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepensionsViewRow(pensionsViewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "pensionsViewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class INReceiptViewDataTable : global::System.Data.TypedTableBase<INReceiptViewRow> {
            
            private global::System.Data.DataColumn columnpersonFamilyAndName;
            
            private global::System.Data.DataColumn columndDate;
            
            private global::System.Data.DataColumn columnprice;
            
            private global::System.Data.DataColumn columndocComment;
            
            private global::System.Data.DataColumn columndocID;
            
            private global::System.Data.DataColumn columnfatherName;
            
            private global::System.Data.DataColumn columnpersonNO;
            
            private global::System.Data.DataColumn columnpersonBorn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INReceiptViewDataTable() {
                this.TableName = "INReceiptView";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal INReceiptViewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected INReceiptViewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personFamilyAndNameColumn {
                get {
                    return this.columnpersonFamilyAndName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dDateColumn {
                get {
                    return this.columndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceColumn {
                get {
                    return this.columnprice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docCommentColumn {
                get {
                    return this.columndocComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docIDColumn {
                get {
                    return this.columndocID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fatherNameColumn {
                get {
                    return this.columnfatherName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personNOColumn {
                get {
                    return this.columnpersonNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personBornColumn {
                get {
                    return this.columnpersonBorn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INReceiptViewRow this[int index] {
                get {
                    return ((INReceiptViewRow)(this.Rows[index]));
                }
            }
            
            public event INReceiptViewRowChangeEventHandler INReceiptViewRowChanging;
            
            public event INReceiptViewRowChangeEventHandler INReceiptViewRowChanged;
            
            public event INReceiptViewRowChangeEventHandler INReceiptViewRowDeleting;
            
            public event INReceiptViewRowChangeEventHandler INReceiptViewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddINReceiptViewRow(INReceiptViewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INReceiptViewRow AddINReceiptViewRow(string personFamilyAndName, string dDate, long price, string docComment, int docID, string fatherName, string personNO, string personBorn) {
                INReceiptViewRow rowINReceiptViewRow = ((INReceiptViewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        personFamilyAndName,
                        dDate,
                        price,
                        docComment,
                        docID,
                        fatherName,
                        personNO,
                        personBorn};
                rowINReceiptViewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowINReceiptViewRow);
                return rowINReceiptViewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INReceiptViewRow FindBydocID(int docID) {
                return ((INReceiptViewRow)(this.Rows.Find(new object[] {
                            docID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                INReceiptViewDataTable cln = ((INReceiptViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new INReceiptViewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpersonFamilyAndName = base.Columns["personFamilyAndName"];
                this.columndDate = base.Columns["dDate"];
                this.columnprice = base.Columns["price"];
                this.columndocComment = base.Columns["docComment"];
                this.columndocID = base.Columns["docID"];
                this.columnfatherName = base.Columns["fatherName"];
                this.columnpersonNO = base.Columns["personNO"];
                this.columnpersonBorn = base.Columns["personBorn"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpersonFamilyAndName = new global::System.Data.DataColumn("personFamilyAndName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonFamilyAndName);
                this.columndDate = new global::System.Data.DataColumn("dDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndDate);
                this.columnprice = new global::System.Data.DataColumn("price", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprice);
                this.columndocComment = new global::System.Data.DataColumn("docComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocComment);
                this.columndocID = new global::System.Data.DataColumn("docID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocID);
                this.columnfatherName = new global::System.Data.DataColumn("fatherName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfatherName);
                this.columnpersonNO = new global::System.Data.DataColumn("personNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonNO);
                this.columnpersonBorn = new global::System.Data.DataColumn("personBorn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonBorn);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndocID}, true));
                this.columnpersonFamilyAndName.AllowDBNull = false;
                this.columnpersonFamilyAndName.MaxLength = 100;
                this.columndDate.AllowDBNull = false;
                this.columndDate.MaxLength = 15;
                this.columnprice.AllowDBNull = false;
                this.columndocComment.MaxLength = 250;
                this.columndocID.AllowDBNull = false;
                this.columndocID.Unique = true;
                this.columnfatherName.MaxLength = 50;
                this.columnpersonNO.MaxLength = 20;
                this.columnpersonBorn.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INReceiptViewRow NewINReceiptViewRow() {
                return ((INReceiptViewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new INReceiptViewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(INReceiptViewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.INReceiptViewRowChanged != null)) {
                    this.INReceiptViewRowChanged(this, new INReceiptViewRowChangeEvent(((INReceiptViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.INReceiptViewRowChanging != null)) {
                    this.INReceiptViewRowChanging(this, new INReceiptViewRowChangeEvent(((INReceiptViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.INReceiptViewRowDeleted != null)) {
                    this.INReceiptViewRowDeleted(this, new INReceiptViewRowChangeEvent(((INReceiptViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.INReceiptViewRowDeleting != null)) {
                    this.INReceiptViewRowDeleting(this, new INReceiptViewRowChangeEvent(((INReceiptViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveINReceiptViewRow(INReceiptViewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "INReceiptViewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class chequesViewDataTable : global::System.Data.TypedTableBase<chequesViewRow> {
            
            private global::System.Data.DataColumn columnchequeNumber;
            
            private global::System.Data.DataColumn columnbankName;
            
            private global::System.Data.DataColumn columnchequePrice;
            
            private global::System.Data.DataColumn columnusanceDate;
            
            private global::System.Data.DataColumn columnaccDoc_id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesViewDataTable() {
                this.TableName = "chequesView";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal chequesViewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected chequesViewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chequeNumberColumn {
                get {
                    return this.columnchequeNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bankNameColumn {
                get {
                    return this.columnbankName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chequePriceColumn {
                get {
                    return this.columnchequePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn usanceDateColumn {
                get {
                    return this.columnusanceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_idColumn {
                get {
                    return this.columnaccDoc_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesViewRow this[int index] {
                get {
                    return ((chequesViewRow)(this.Rows[index]));
                }
            }
            
            public event chequesViewRowChangeEventHandler chequesViewRowChanging;
            
            public event chequesViewRowChangeEventHandler chequesViewRowChanged;
            
            public event chequesViewRowChangeEventHandler chequesViewRowDeleting;
            
            public event chequesViewRowChangeEventHandler chequesViewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddchequesViewRow(chequesViewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesViewRow AddchequesViewRow(string chequeNumber, string bankName, long chequePrice, string usanceDate, long accDoc_id) {
                chequesViewRow rowchequesViewRow = ((chequesViewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        chequeNumber,
                        bankName,
                        chequePrice,
                        usanceDate,
                        accDoc_id};
                rowchequesViewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowchequesViewRow);
                return rowchequesViewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                chequesViewDataTable cln = ((chequesViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new chequesViewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnchequeNumber = base.Columns["chequeNumber"];
                this.columnbankName = base.Columns["bankName"];
                this.columnchequePrice = base.Columns["chequePrice"];
                this.columnusanceDate = base.Columns["usanceDate"];
                this.columnaccDoc_id = base.Columns["accDoc_id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnchequeNumber = new global::System.Data.DataColumn("chequeNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchequeNumber);
                this.columnbankName = new global::System.Data.DataColumn("bankName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbankName);
                this.columnchequePrice = new global::System.Data.DataColumn("chequePrice", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchequePrice);
                this.columnusanceDate = new global::System.Data.DataColumn("usanceDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnusanceDate);
                this.columnaccDoc_id = new global::System.Data.DataColumn("accDoc_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_id);
                this.columnchequeNumber.AllowDBNull = false;
                this.columnchequeNumber.MaxLength = 50;
                this.columnbankName.AllowDBNull = false;
                this.columnbankName.MaxLength = 50;
                this.columnusanceDate.AllowDBNull = false;
                this.columnusanceDate.MaxLength = 20;
                this.columnaccDoc_id.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesViewRow NewchequesViewRow() {
                return ((chequesViewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new chequesViewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(chequesViewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.chequesViewRowChanged != null)) {
                    this.chequesViewRowChanged(this, new chequesViewRowChangeEvent(((chequesViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.chequesViewRowChanging != null)) {
                    this.chequesViewRowChanging(this, new chequesViewRowChangeEvent(((chequesViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.chequesViewRowDeleted != null)) {
                    this.chequesViewRowDeleted(this, new chequesViewRowChangeEvent(((chequesViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.chequesViewRowDeleting != null)) {
                    this.chequesViewRowDeleting(this, new chequesViewRowChangeEvent(((chequesViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovechequesViewRow(chequesViewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "chequesViewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class detractsViewDataTable : global::System.Data.TypedTableBase<detractsViewRow> {
            
            private global::System.Data.DataColumn columndefName;
            
            private global::System.Data.DataColumn columndefValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractsViewDataTable() {
                this.TableName = "detractsView";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal detractsViewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected detractsViewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn defNameColumn {
                get {
                    return this.columndefName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn defValueColumn {
                get {
                    return this.columndefValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractsViewRow this[int index] {
                get {
                    return ((detractsViewRow)(this.Rows[index]));
                }
            }
            
            public event detractsViewRowChangeEventHandler detractsViewRowChanging;
            
            public event detractsViewRowChangeEventHandler detractsViewRowChanged;
            
            public event detractsViewRowChangeEventHandler detractsViewRowDeleting;
            
            public event detractsViewRowChangeEventHandler detractsViewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddetractsViewRow(detractsViewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractsViewRow AdddetractsViewRow(string defName, long defValue) {
                detractsViewRow rowdetractsViewRow = ((detractsViewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        defName,
                        defValue};
                rowdetractsViewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdetractsViewRow);
                return rowdetractsViewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                detractsViewDataTable cln = ((detractsViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new detractsViewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndefName = base.Columns["defName"];
                this.columndefValue = base.Columns["defValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndefName = new global::System.Data.DataColumn("defName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndefName);
                this.columndefValue = new global::System.Data.DataColumn("defValue", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndefValue);
                this.columndefName.AllowDBNull = false;
                this.columndefName.MaxLength = 50;
                this.columndefValue.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractsViewRow NewdetractsViewRow() {
                return ((detractsViewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new detractsViewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(detractsViewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.detractsViewRowChanged != null)) {
                    this.detractsViewRowChanged(this, new detractsViewRowChangeEvent(((detractsViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.detractsViewRowChanging != null)) {
                    this.detractsViewRowChanging(this, new detractsViewRowChangeEvent(((detractsViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.detractsViewRowDeleted != null)) {
                    this.detractsViewRowDeleted(this, new detractsViewRowChangeEvent(((detractsViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.detractsViewRowDeleting != null)) {
                    this.detractsViewRowDeleting(this, new detractsViewRowChangeEvent(((detractsViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedetractsViewRow(detractsViewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "detractsViewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class receiptOUTDataTable : global::System.Data.TypedTableBase<receiptOUTRow> {
            
            private global::System.Data.DataColumn columnpersonFamilyAndName;
            
            private global::System.Data.DataColumn columnfatherName;
            
            private global::System.Data.DataColumn columnpersonBorn;
            
            private global::System.Data.DataColumn columnpersonNO;
            
            private global::System.Data.DataColumn columnprice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public receiptOUTDataTable() {
                this.TableName = "receiptOUT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal receiptOUTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected receiptOUTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personFamilyAndNameColumn {
                get {
                    return this.columnpersonFamilyAndName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fatherNameColumn {
                get {
                    return this.columnfatherName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personBornColumn {
                get {
                    return this.columnpersonBorn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personNOColumn {
                get {
                    return this.columnpersonNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceColumn {
                get {
                    return this.columnprice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public receiptOUTRow this[int index] {
                get {
                    return ((receiptOUTRow)(this.Rows[index]));
                }
            }
            
            public event receiptOUTRowChangeEventHandler receiptOUTRowChanging;
            
            public event receiptOUTRowChangeEventHandler receiptOUTRowChanged;
            
            public event receiptOUTRowChangeEventHandler receiptOUTRowDeleting;
            
            public event receiptOUTRowChangeEventHandler receiptOUTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddreceiptOUTRow(receiptOUTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public receiptOUTRow AddreceiptOUTRow(string personFamilyAndName, string fatherName, string personBorn, string personNO, long price) {
                receiptOUTRow rowreceiptOUTRow = ((receiptOUTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        personFamilyAndName,
                        fatherName,
                        personBorn,
                        personNO,
                        price};
                rowreceiptOUTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowreceiptOUTRow);
                return rowreceiptOUTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                receiptOUTDataTable cln = ((receiptOUTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new receiptOUTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpersonFamilyAndName = base.Columns["personFamilyAndName"];
                this.columnfatherName = base.Columns["fatherName"];
                this.columnpersonBorn = base.Columns["personBorn"];
                this.columnpersonNO = base.Columns["personNO"];
                this.columnprice = base.Columns["price"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpersonFamilyAndName = new global::System.Data.DataColumn("personFamilyAndName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonFamilyAndName);
                this.columnfatherName = new global::System.Data.DataColumn("fatherName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfatherName);
                this.columnpersonBorn = new global::System.Data.DataColumn("personBorn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonBorn);
                this.columnpersonNO = new global::System.Data.DataColumn("personNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonNO);
                this.columnprice = new global::System.Data.DataColumn("price", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprice);
                this.columnpersonFamilyAndName.AllowDBNull = false;
                this.columnpersonFamilyAndName.MaxLength = 100;
                this.columnfatherName.MaxLength = 50;
                this.columnpersonBorn.MaxLength = 50;
                this.columnpersonNO.MaxLength = 20;
                this.columnprice.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public receiptOUTRow NewreceiptOUTRow() {
                return ((receiptOUTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new receiptOUTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(receiptOUTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.receiptOUTRowChanged != null)) {
                    this.receiptOUTRowChanged(this, new receiptOUTRowChangeEvent(((receiptOUTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.receiptOUTRowChanging != null)) {
                    this.receiptOUTRowChanging(this, new receiptOUTRowChangeEvent(((receiptOUTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.receiptOUTRowDeleted != null)) {
                    this.receiptOUTRowDeleted(this, new receiptOUTRowChangeEvent(((receiptOUTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.receiptOUTRowDeleting != null)) {
                    this.receiptOUTRowDeleting(this, new receiptOUTRowChangeEvent(((receiptOUTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovereceiptOUTRow(receiptOUTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "receiptOUTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class defsViewDataTable : global::System.Data.TypedTableBase<defsViewRow> {
            
            private global::System.Data.DataColumn columnpensionName;
            
            private global::System.Data.DataColumn columnpensionValue;
            
            private global::System.Data.DataColumn columndetractName;
            
            private global::System.Data.DataColumn columndetractValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public defsViewDataTable() {
                this.TableName = "defsView";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal defsViewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected defsViewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pensionNameColumn {
                get {
                    return this.columnpensionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pensionValueColumn {
                get {
                    return this.columnpensionValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detractNameColumn {
                get {
                    return this.columndetractName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detractValueColumn {
                get {
                    return this.columndetractValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public defsViewRow this[int index] {
                get {
                    return ((defsViewRow)(this.Rows[index]));
                }
            }
            
            public event defsViewRowChangeEventHandler defsViewRowChanging;
            
            public event defsViewRowChangeEventHandler defsViewRowChanged;
            
            public event defsViewRowChangeEventHandler defsViewRowDeleting;
            
            public event defsViewRowChangeEventHandler defsViewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddefsViewRow(defsViewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public defsViewRow AdddefsViewRow(string pensionName, long pensionValue, string detractName, long detractValue) {
                defsViewRow rowdefsViewRow = ((defsViewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        pensionName,
                        pensionValue,
                        detractName,
                        detractValue};
                rowdefsViewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdefsViewRow);
                return rowdefsViewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                defsViewDataTable cln = ((defsViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new defsViewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpensionName = base.Columns["pensionName"];
                this.columnpensionValue = base.Columns["pensionValue"];
                this.columndetractName = base.Columns["detractName"];
                this.columndetractValue = base.Columns["detractValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpensionName = new global::System.Data.DataColumn("pensionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpensionName);
                this.columnpensionValue = new global::System.Data.DataColumn("pensionValue", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpensionValue);
                this.columndetractName = new global::System.Data.DataColumn("detractName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetractName);
                this.columndetractValue = new global::System.Data.DataColumn("detractValue", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetractValue);
                this.columnpensionName.MaxLength = 50;
                this.columndetractName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public defsViewRow NewdefsViewRow() {
                return ((defsViewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new defsViewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(defsViewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.defsViewRowChanged != null)) {
                    this.defsViewRowChanged(this, new defsViewRowChangeEvent(((defsViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.defsViewRowChanging != null)) {
                    this.defsViewRowChanging(this, new defsViewRowChangeEvent(((defsViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.defsViewRowDeleted != null)) {
                    this.defsViewRowDeleted(this, new defsViewRowChangeEvent(((defsViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.defsViewRowDeleting != null)) {
                    this.defsViewRowDeleting(this, new defsViewRowChangeEvent(((defsViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedefsViewRow(defsViewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "defsViewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class accountTypesTableDataTable : global::System.Data.TypedTableBase<accountTypesTableRow> {
            
            private global::System.Data.DataColumn columnaccountType_id;
            
            private global::System.Data.DataColumn columnaccountType_Title;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accountTypesTableDataTable() {
                this.TableName = "accountTypesTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal accountTypesTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected accountTypesTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accountType_idColumn {
                get {
                    return this.columnaccountType_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accountType_TitleColumn {
                get {
                    return this.columnaccountType_Title;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accountTypesTableRow this[int index] {
                get {
                    return ((accountTypesTableRow)(this.Rows[index]));
                }
            }
            
            public event accountTypesTableRowChangeEventHandler accountTypesTableRowChanging;
            
            public event accountTypesTableRowChangeEventHandler accountTypesTableRowChanged;
            
            public event accountTypesTableRowChangeEventHandler accountTypesTableRowDeleting;
            
            public event accountTypesTableRowChangeEventHandler accountTypesTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddaccountTypesTableRow(accountTypesTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accountTypesTableRow AddaccountTypesTableRow(decimal accountType_id, string accountType_Title) {
                accountTypesTableRow rowaccountTypesTableRow = ((accountTypesTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        accountType_id,
                        accountType_Title};
                rowaccountTypesTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowaccountTypesTableRow);
                return rowaccountTypesTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accountTypesTableRow FindByaccountType_id(decimal accountType_id) {
                return ((accountTypesTableRow)(this.Rows.Find(new object[] {
                            accountType_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                accountTypesTableDataTable cln = ((accountTypesTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new accountTypesTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaccountType_id = base.Columns["accountType_id"];
                this.columnaccountType_Title = base.Columns["accountType_Title"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaccountType_id = new global::System.Data.DataColumn("accountType_id", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccountType_id);
                this.columnaccountType_Title = new global::System.Data.DataColumn("accountType_Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccountType_Title);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnaccountType_id}, true));
                this.columnaccountType_id.AllowDBNull = false;
                this.columnaccountType_id.Unique = true;
                this.columnaccountType_Title.AllowDBNull = false;
                this.columnaccountType_Title.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accountTypesTableRow NewaccountTypesTableRow() {
                return ((accountTypesTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new accountTypesTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(accountTypesTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.accountTypesTableRowChanged != null)) {
                    this.accountTypesTableRowChanged(this, new accountTypesTableRowChangeEvent(((accountTypesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.accountTypesTableRowChanging != null)) {
                    this.accountTypesTableRowChanging(this, new accountTypesTableRowChangeEvent(((accountTypesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.accountTypesTableRowDeleted != null)) {
                    this.accountTypesTableRowDeleted(this, new accountTypesTableRowChangeEvent(((accountTypesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.accountTypesTableRowDeleting != null)) {
                    this.accountTypesTableRowDeleting(this, new accountTypesTableRowChangeEvent(((accountTypesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveaccountTypesTableRow(accountTypesTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "accountTypesTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AccountingDocsDataTable : global::System.Data.TypedTableBase<AccountingDocsRow> {
            
            private global::System.Data.DataColumn columnaccDoc_id;
            
            private global::System.Data.DataColumn columnpensionID;
            
            private global::System.Data.DataColumn columnaccDoc_comment;
            
            private global::System.Data.DataColumn columnaccDoc_date;
            
            private global::System.Data.DataColumn columntempo;
            
            private global::System.Data.DataColumn columndocID;
            
            private global::System.Data.DataColumn columninvoice_id;
            
            private global::System.Data.DataColumn columnaccDoc_price;
            
            private global::System.Data.DataColumn columnaccountID;
            
            private global::System.Data.DataColumn columnaccDoc_isItTemporary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingDocsDataTable() {
                this.TableName = "AccountingDocs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountingDocsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AccountingDocsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_idColumn {
                get {
                    return this.columnaccDoc_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pensionIDColumn {
                get {
                    return this.columnpensionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_commentColumn {
                get {
                    return this.columnaccDoc_comment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_dateColumn {
                get {
                    return this.columnaccDoc_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempoColumn {
                get {
                    return this.columntempo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docIDColumn {
                get {
                    return this.columndocID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_idColumn {
                get {
                    return this.columninvoice_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_priceColumn {
                get {
                    return this.columnaccDoc_price;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accountIDColumn {
                get {
                    return this.columnaccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_isItTemporaryColumn {
                get {
                    return this.columnaccDoc_isItTemporary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingDocsRow this[int index] {
                get {
                    return ((AccountingDocsRow)(this.Rows[index]));
                }
            }
            
            public event AccountingDocsRowChangeEventHandler AccountingDocsRowChanging;
            
            public event AccountingDocsRowChangeEventHandler AccountingDocsRowChanged;
            
            public event AccountingDocsRowChangeEventHandler AccountingDocsRowDeleting;
            
            public event AccountingDocsRowChangeEventHandler AccountingDocsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAccountingDocsRow(AccountingDocsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingDocsRow AddAccountingDocsRow(long accDoc_id, pensionsTableRow parentpensionsTableRowByFK_AccountingDocs_pensionsTable, string accDoc_comment, string accDoc_date, string tempo, long docID, invoicesTableRow parentinvoicesTableRowByFK_AccountingDocs_invoicesTable, long accDoc_price, AccountsTableRow parentAccountsTableRowByFK_AccountingDocs_AccountsTable, bool accDoc_isItTemporary) {
                AccountingDocsRow rowAccountingDocsRow = ((AccountingDocsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        accDoc_id,
                        null,
                        accDoc_comment,
                        accDoc_date,
                        tempo,
                        docID,
                        null,
                        accDoc_price,
                        null,
                        accDoc_isItTemporary};
                if ((parentpensionsTableRowByFK_AccountingDocs_pensionsTable != null)) {
                    columnValuesArray[1] = parentpensionsTableRowByFK_AccountingDocs_pensionsTable[0];
                }
                if ((parentinvoicesTableRowByFK_AccountingDocs_invoicesTable != null)) {
                    columnValuesArray[6] = parentinvoicesTableRowByFK_AccountingDocs_invoicesTable[0];
                }
                if ((parentAccountsTableRowByFK_AccountingDocs_AccountsTable != null)) {
                    columnValuesArray[8] = parentAccountsTableRowByFK_AccountingDocs_AccountsTable[0];
                }
                rowAccountingDocsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAccountingDocsRow);
                return rowAccountingDocsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingDocsRow FindByaccDoc_id(long accDoc_id) {
                return ((AccountingDocsRow)(this.Rows.Find(new object[] {
                            accDoc_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AccountingDocsDataTable cln = ((AccountingDocsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AccountingDocsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaccDoc_id = base.Columns["accDoc_id"];
                this.columnpensionID = base.Columns["pensionID"];
                this.columnaccDoc_comment = base.Columns["accDoc_comment"];
                this.columnaccDoc_date = base.Columns["accDoc_date"];
                this.columntempo = base.Columns["tempo"];
                this.columndocID = base.Columns["docID"];
                this.columninvoice_id = base.Columns["invoice_id"];
                this.columnaccDoc_price = base.Columns["accDoc_price"];
                this.columnaccountID = base.Columns["accountID"];
                this.columnaccDoc_isItTemporary = base.Columns["accDoc_isItTemporary"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaccDoc_id = new global::System.Data.DataColumn("accDoc_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_id);
                this.columnpensionID = new global::System.Data.DataColumn("pensionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpensionID);
                this.columnaccDoc_comment = new global::System.Data.DataColumn("accDoc_comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_comment);
                this.columnaccDoc_date = new global::System.Data.DataColumn("accDoc_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_date);
                this.columntempo = new global::System.Data.DataColumn("tempo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempo);
                this.columndocID = new global::System.Data.DataColumn("docID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocID);
                this.columninvoice_id = new global::System.Data.DataColumn("invoice_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_id);
                this.columnaccDoc_price = new global::System.Data.DataColumn("accDoc_price", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_price);
                this.columnaccountID = new global::System.Data.DataColumn("accountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccountID);
                this.columnaccDoc_isItTemporary = new global::System.Data.DataColumn("accDoc_isItTemporary", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_isItTemporary);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnaccDoc_id}, true));
                this.columnaccDoc_id.AllowDBNull = false;
                this.columnaccDoc_id.Unique = true;
                this.columnpensionID.AllowDBNull = false;
                this.columnaccDoc_comment.AllowDBNull = false;
                this.columnaccDoc_comment.MaxLength = 250;
                this.columnaccDoc_date.AllowDBNull = false;
                this.columnaccDoc_date.MaxLength = 20;
                this.columntempo.MaxLength = 250;
                this.columndocID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingDocsRow NewAccountingDocsRow() {
                return ((AccountingDocsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AccountingDocsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AccountingDocsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AccountingDocsRowChanged != null)) {
                    this.AccountingDocsRowChanged(this, new AccountingDocsRowChangeEvent(((AccountingDocsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AccountingDocsRowChanging != null)) {
                    this.AccountingDocsRowChanging(this, new AccountingDocsRowChangeEvent(((AccountingDocsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AccountingDocsRowDeleted != null)) {
                    this.AccountingDocsRowDeleted(this, new AccountingDocsRowChangeEvent(((AccountingDocsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AccountingDocsRowDeleting != null)) {
                    this.AccountingDocsRowDeleting(this, new AccountingDocsRowChangeEvent(((AccountingDocsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAccountingDocsRow(AccountingDocsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AccountingDocsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class accDocEventsTableDataTable : global::System.Data.TypedTableBase<accDocEventsTableRow> {
            
            private global::System.Data.DataColumn columnaccDocEvent_id;
            
            private global::System.Data.DataColumn columnaccDoc_id;
            
            private global::System.Data.DataColumn columnaccDocEvent_retail;
            
            private global::System.Data.DataColumn columnaccDocEvent_indebted;
            
            private global::System.Data.DataColumn columnaccDocEvent_creditor;
            
            private global::System.Data.DataColumn columnaccDocEvent_row;
            
            private global::System.Data.DataColumn columnaccDocEvent_itIsBank;
            
            private global::System.Data.DataColumn columnaccDocEvent_itIsIndebted;
            
            private global::System.Data.DataColumn columnaccDocEvent_detectID;
            
            private global::System.Data.DataColumn columndetailID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accDocEventsTableDataTable() {
                this.TableName = "accDocEventsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal accDocEventsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected accDocEventsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_idColumn {
                get {
                    return this.columnaccDocEvent_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_idColumn {
                get {
                    return this.columnaccDoc_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_retailColumn {
                get {
                    return this.columnaccDocEvent_retail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_indebtedColumn {
                get {
                    return this.columnaccDocEvent_indebted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_creditorColumn {
                get {
                    return this.columnaccDocEvent_creditor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_rowColumn {
                get {
                    return this.columnaccDocEvent_row;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_itIsBankColumn {
                get {
                    return this.columnaccDocEvent_itIsBank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_itIsIndebtedColumn {
                get {
                    return this.columnaccDocEvent_itIsIndebted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_detectIDColumn {
                get {
                    return this.columnaccDocEvent_detectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detailIDColumn {
                get {
                    return this.columndetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accDocEventsTableRow this[int index] {
                get {
                    return ((accDocEventsTableRow)(this.Rows[index]));
                }
            }
            
            public event accDocEventsTableRowChangeEventHandler accDocEventsTableRowChanging;
            
            public event accDocEventsTableRowChangeEventHandler accDocEventsTableRowChanged;
            
            public event accDocEventsTableRowChangeEventHandler accDocEventsTableRowDeleting;
            
            public event accDocEventsTableRowChangeEventHandler accDocEventsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddaccDocEventsTableRow(accDocEventsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accDocEventsTableRow AddaccDocEventsTableRow(AccountingDocsRow parentAccountingDocsRowByFK_accDocEventsTable_AccountingDocs, long accDocEvent_retail, long accDocEvent_indebted, long accDocEvent_creditor, int accDocEvent_row, bool accDocEvent_itIsBank, bool accDocEvent_itIsIndebted, int accDocEvent_detectID, detailsTableRow parentdetailsTableRowByFK_accDocEventsTable_detailsTable) {
                accDocEventsTableRow rowaccDocEventsTableRow = ((accDocEventsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        accDocEvent_retail,
                        accDocEvent_indebted,
                        accDocEvent_creditor,
                        accDocEvent_row,
                        accDocEvent_itIsBank,
                        accDocEvent_itIsIndebted,
                        accDocEvent_detectID,
                        null};
                if ((parentAccountingDocsRowByFK_accDocEventsTable_AccountingDocs != null)) {
                    columnValuesArray[1] = parentAccountingDocsRowByFK_accDocEventsTable_AccountingDocs[0];
                }
                if ((parentdetailsTableRowByFK_accDocEventsTable_detailsTable != null)) {
                    columnValuesArray[9] = parentdetailsTableRowByFK_accDocEventsTable_detailsTable[0];
                }
                rowaccDocEventsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowaccDocEventsTableRow);
                return rowaccDocEventsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accDocEventsTableRow FindByaccDocEvent_id(int accDocEvent_id) {
                return ((accDocEventsTableRow)(this.Rows.Find(new object[] {
                            accDocEvent_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                accDocEventsTableDataTable cln = ((accDocEventsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new accDocEventsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaccDocEvent_id = base.Columns["accDocEvent_id"];
                this.columnaccDoc_id = base.Columns["accDoc_id"];
                this.columnaccDocEvent_retail = base.Columns["accDocEvent_retail"];
                this.columnaccDocEvent_indebted = base.Columns["accDocEvent_indebted"];
                this.columnaccDocEvent_creditor = base.Columns["accDocEvent_creditor"];
                this.columnaccDocEvent_row = base.Columns["accDocEvent_row"];
                this.columnaccDocEvent_itIsBank = base.Columns["accDocEvent_itIsBank"];
                this.columnaccDocEvent_itIsIndebted = base.Columns["accDocEvent_itIsIndebted"];
                this.columnaccDocEvent_detectID = base.Columns["accDocEvent_detectID"];
                this.columndetailID = base.Columns["detailID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaccDocEvent_id = new global::System.Data.DataColumn("accDocEvent_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_id);
                this.columnaccDoc_id = new global::System.Data.DataColumn("accDoc_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_id);
                this.columnaccDocEvent_retail = new global::System.Data.DataColumn("accDocEvent_retail", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_retail);
                this.columnaccDocEvent_indebted = new global::System.Data.DataColumn("accDocEvent_indebted", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_indebted);
                this.columnaccDocEvent_creditor = new global::System.Data.DataColumn("accDocEvent_creditor", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_creditor);
                this.columnaccDocEvent_row = new global::System.Data.DataColumn("accDocEvent_row", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_row);
                this.columnaccDocEvent_itIsBank = new global::System.Data.DataColumn("accDocEvent_itIsBank", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_itIsBank);
                this.columnaccDocEvent_itIsIndebted = new global::System.Data.DataColumn("accDocEvent_itIsIndebted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_itIsIndebted);
                this.columnaccDocEvent_detectID = new global::System.Data.DataColumn("accDocEvent_detectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_detectID);
                this.columndetailID = new global::System.Data.DataColumn("detailID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetailID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnaccDocEvent_id}, true));
                this.columnaccDocEvent_id.AutoIncrement = true;
                this.columnaccDocEvent_id.AutoIncrementSeed = -1;
                this.columnaccDocEvent_id.AutoIncrementStep = -1;
                this.columnaccDocEvent_id.AllowDBNull = false;
                this.columnaccDocEvent_id.ReadOnly = true;
                this.columnaccDocEvent_id.Unique = true;
                this.columnaccDoc_id.AllowDBNull = false;
                this.columnaccDocEvent_row.AllowDBNull = false;
                this.columnaccDocEvent_itIsBank.AllowDBNull = false;
                this.columnaccDocEvent_itIsIndebted.AllowDBNull = false;
                this.columndetailID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accDocEventsTableRow NewaccDocEventsTableRow() {
                return ((accDocEventsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new accDocEventsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(accDocEventsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.accDocEventsTableRowChanged != null)) {
                    this.accDocEventsTableRowChanged(this, new accDocEventsTableRowChangeEvent(((accDocEventsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.accDocEventsTableRowChanging != null)) {
                    this.accDocEventsTableRowChanging(this, new accDocEventsTableRowChangeEvent(((accDocEventsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.accDocEventsTableRowDeleted != null)) {
                    this.accDocEventsTableRowDeleted(this, new accDocEventsTableRowChangeEvent(((accDocEventsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.accDocEventsTableRowDeleting != null)) {
                    this.accDocEventsTableRowDeleting(this, new accDocEventsTableRowChangeEvent(((accDocEventsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveaccDocEventsTableRow(accDocEventsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "accDocEventsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class invoiceItemsTableDataTable : global::System.Data.TypedTableBase<invoiceItemsTableRow> {
            
            private global::System.Data.DataColumn columninvoiceItem_id;
            
            private global::System.Data.DataColumn columninvoice_id;
            
            private global::System.Data.DataColumn columninvoiceItem_row;
            
            private global::System.Data.DataColumn columninvoiceItem_amount;
            
            private global::System.Data.DataColumn columninvoiceItem_phi;
            
            private global::System.Data.DataColumn columninvoiceItem_total;
            
            private global::System.Data.DataColumn columnspentDefID;
            
            private global::System.Data.DataColumn columninvoiceItem_comment;
            
            private global::System.Data.DataColumn columnprojectID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoiceItemsTableDataTable() {
                this.TableName = "invoiceItemsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal invoiceItemsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected invoiceItemsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceItem_idColumn {
                get {
                    return this.columninvoiceItem_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_idColumn {
                get {
                    return this.columninvoice_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceItem_rowColumn {
                get {
                    return this.columninvoiceItem_row;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceItem_amountColumn {
                get {
                    return this.columninvoiceItem_amount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceItem_phiColumn {
                get {
                    return this.columninvoiceItem_phi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceItem_totalColumn {
                get {
                    return this.columninvoiceItem_total;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentDefIDColumn {
                get {
                    return this.columnspentDefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceItem_commentColumn {
                get {
                    return this.columninvoiceItem_comment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectIDColumn {
                get {
                    return this.columnprojectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoiceItemsTableRow this[int index] {
                get {
                    return ((invoiceItemsTableRow)(this.Rows[index]));
                }
            }
            
            public event invoiceItemsTableRowChangeEventHandler invoiceItemsTableRowChanging;
            
            public event invoiceItemsTableRowChangeEventHandler invoiceItemsTableRowChanged;
            
            public event invoiceItemsTableRowChangeEventHandler invoiceItemsTableRowDeleting;
            
            public event invoiceItemsTableRowChangeEventHandler invoiceItemsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddinvoiceItemsTableRow(invoiceItemsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoiceItemsTableRow AddinvoiceItemsTableRow(invoicesTableRow parentinvoicesTableRowByFK_invoiceItemsTable_invoicesTable, int invoiceItem_row, int invoiceItem_amount, long invoiceItem_phi, long invoiceItem_total, spentDefRow parentspentDefRowByFK_invoiceItemsTable_spentDef, string invoiceItem_comment, int projectID) {
                invoiceItemsTableRow rowinvoiceItemsTableRow = ((invoiceItemsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        invoiceItem_row,
                        invoiceItem_amount,
                        invoiceItem_phi,
                        invoiceItem_total,
                        null,
                        invoiceItem_comment,
                        projectID};
                if ((parentinvoicesTableRowByFK_invoiceItemsTable_invoicesTable != null)) {
                    columnValuesArray[1] = parentinvoicesTableRowByFK_invoiceItemsTable_invoicesTable[0];
                }
                if ((parentspentDefRowByFK_invoiceItemsTable_spentDef != null)) {
                    columnValuesArray[6] = parentspentDefRowByFK_invoiceItemsTable_spentDef[0];
                }
                rowinvoiceItemsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowinvoiceItemsTableRow);
                return rowinvoiceItemsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoiceItemsTableRow FindByinvoiceItem_id(int invoiceItem_id) {
                return ((invoiceItemsTableRow)(this.Rows.Find(new object[] {
                            invoiceItem_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                invoiceItemsTableDataTable cln = ((invoiceItemsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new invoiceItemsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninvoiceItem_id = base.Columns["invoiceItem_id"];
                this.columninvoice_id = base.Columns["invoice_id"];
                this.columninvoiceItem_row = base.Columns["invoiceItem_row"];
                this.columninvoiceItem_amount = base.Columns["invoiceItem_amount"];
                this.columninvoiceItem_phi = base.Columns["invoiceItem_phi"];
                this.columninvoiceItem_total = base.Columns["invoiceItem_total"];
                this.columnspentDefID = base.Columns["spentDefID"];
                this.columninvoiceItem_comment = base.Columns["invoiceItem_comment"];
                this.columnprojectID = base.Columns["projectID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninvoiceItem_id = new global::System.Data.DataColumn("invoiceItem_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceItem_id);
                this.columninvoice_id = new global::System.Data.DataColumn("invoice_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_id);
                this.columninvoiceItem_row = new global::System.Data.DataColumn("invoiceItem_row", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceItem_row);
                this.columninvoiceItem_amount = new global::System.Data.DataColumn("invoiceItem_amount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceItem_amount);
                this.columninvoiceItem_phi = new global::System.Data.DataColumn("invoiceItem_phi", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceItem_phi);
                this.columninvoiceItem_total = new global::System.Data.DataColumn("invoiceItem_total", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceItem_total);
                this.columnspentDefID = new global::System.Data.DataColumn("spentDefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentDefID);
                this.columninvoiceItem_comment = new global::System.Data.DataColumn("invoiceItem_comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceItem_comment);
                this.columnprojectID = new global::System.Data.DataColumn("projectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columninvoiceItem_id}, true));
                this.columninvoiceItem_id.AutoIncrement = true;
                this.columninvoiceItem_id.AutoIncrementSeed = -1;
                this.columninvoiceItem_id.AutoIncrementStep = -1;
                this.columninvoiceItem_id.AllowDBNull = false;
                this.columninvoiceItem_id.ReadOnly = true;
                this.columninvoiceItem_id.Unique = true;
                this.columninvoice_id.AllowDBNull = false;
                this.columninvoiceItem_row.AllowDBNull = false;
                this.columninvoiceItem_amount.AllowDBNull = false;
                this.columninvoiceItem_phi.AllowDBNull = false;
                this.columninvoiceItem_total.AllowDBNull = false;
                this.columnspentDefID.AllowDBNull = false;
                this.columninvoiceItem_comment.AllowDBNull = false;
                this.columninvoiceItem_comment.MaxLength = 250;
                this.columnprojectID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoiceItemsTableRow NewinvoiceItemsTableRow() {
                return ((invoiceItemsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new invoiceItemsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(invoiceItemsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.invoiceItemsTableRowChanged != null)) {
                    this.invoiceItemsTableRowChanged(this, new invoiceItemsTableRowChangeEvent(((invoiceItemsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.invoiceItemsTableRowChanging != null)) {
                    this.invoiceItemsTableRowChanging(this, new invoiceItemsTableRowChangeEvent(((invoiceItemsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.invoiceItemsTableRowDeleted != null)) {
                    this.invoiceItemsTableRowDeleted(this, new invoiceItemsTableRowChangeEvent(((invoiceItemsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.invoiceItemsTableRowDeleting != null)) {
                    this.invoiceItemsTableRowDeleting(this, new invoiceItemsTableRowChangeEvent(((invoiceItemsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveinvoiceItemsTableRow(invoiceItemsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "invoiceItemsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class invoicesTableDataTable : global::System.Data.TypedTableBase<invoicesTableRow> {
            
            private global::System.Data.DataColumn columninvoice_id;
            
            private global::System.Data.DataColumn columninvoice_date;
            
            private global::System.Data.DataColumn columninvoice_total;
            
            private global::System.Data.DataColumn columninvoice_comment;
            
            private global::System.Data.DataColumn columnpersonID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoicesTableDataTable() {
                this.TableName = "invoicesTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal invoicesTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected invoicesTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_idColumn {
                get {
                    return this.columninvoice_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_dateColumn {
                get {
                    return this.columninvoice_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_totalColumn {
                get {
                    return this.columninvoice_total;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_commentColumn {
                get {
                    return this.columninvoice_comment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personIDColumn {
                get {
                    return this.columnpersonID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoicesTableRow this[int index] {
                get {
                    return ((invoicesTableRow)(this.Rows[index]));
                }
            }
            
            public event invoicesTableRowChangeEventHandler invoicesTableRowChanging;
            
            public event invoicesTableRowChangeEventHandler invoicesTableRowChanged;
            
            public event invoicesTableRowChangeEventHandler invoicesTableRowDeleting;
            
            public event invoicesTableRowChangeEventHandler invoicesTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddinvoicesTableRow(invoicesTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoicesTableRow AddinvoicesTableRow(long invoice_id, string invoice_date, long invoice_total, string invoice_comment, int personID) {
                invoicesTableRow rowinvoicesTableRow = ((invoicesTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        invoice_id,
                        invoice_date,
                        invoice_total,
                        invoice_comment,
                        personID};
                rowinvoicesTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowinvoicesTableRow);
                return rowinvoicesTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoicesTableRow FindByinvoice_id(long invoice_id) {
                return ((invoicesTableRow)(this.Rows.Find(new object[] {
                            invoice_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                invoicesTableDataTable cln = ((invoicesTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new invoicesTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninvoice_id = base.Columns["invoice_id"];
                this.columninvoice_date = base.Columns["invoice_date"];
                this.columninvoice_total = base.Columns["invoice_total"];
                this.columninvoice_comment = base.Columns["invoice_comment"];
                this.columnpersonID = base.Columns["personID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninvoice_id = new global::System.Data.DataColumn("invoice_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_id);
                this.columninvoice_date = new global::System.Data.DataColumn("invoice_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_date);
                this.columninvoice_total = new global::System.Data.DataColumn("invoice_total", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_total);
                this.columninvoice_comment = new global::System.Data.DataColumn("invoice_comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_comment);
                this.columnpersonID = new global::System.Data.DataColumn("personID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columninvoice_id}, true));
                this.columninvoice_id.AllowDBNull = false;
                this.columninvoice_id.Unique = true;
                this.columninvoice_date.AllowDBNull = false;
                this.columninvoice_date.MaxLength = 15;
                this.columninvoice_total.AllowDBNull = false;
                this.columninvoice_comment.AllowDBNull = false;
                this.columninvoice_comment.MaxLength = 250;
                this.columnpersonID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoicesTableRow NewinvoicesTableRow() {
                return ((invoicesTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new invoicesTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(invoicesTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.invoicesTableRowChanged != null)) {
                    this.invoicesTableRowChanged(this, new invoicesTableRowChangeEvent(((invoicesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.invoicesTableRowChanging != null)) {
                    this.invoicesTableRowChanging(this, new invoicesTableRowChangeEvent(((invoicesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.invoicesTableRowDeleted != null)) {
                    this.invoicesTableRowDeleted(this, new invoicesTableRowChangeEvent(((invoicesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.invoicesTableRowDeleting != null)) {
                    this.invoicesTableRowDeleting(this, new invoicesTableRowChangeEvent(((invoicesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveinvoicesTableRow(invoicesTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "invoicesTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viw_invoiceItemsDataTable : global::System.Data.TypedTableBase<viw_invoiceItemsRow> {
            
            private global::System.Data.DataColumn columninvoiceItem_row;
            
            private global::System.Data.DataColumn columnspentDefName;
            
            private global::System.Data.DataColumn columninvoiceItem_amount;
            
            private global::System.Data.DataColumn columninvoiceItem_phi;
            
            private global::System.Data.DataColumn columninvoiceItem_total;
            
            private global::System.Data.DataColumn columninvoiceItem_comment;
            
            private global::System.Data.DataColumn columnprojectTitle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_invoiceItemsDataTable() {
                this.TableName = "viw_invoiceItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_invoiceItemsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viw_invoiceItemsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceItem_rowColumn {
                get {
                    return this.columninvoiceItem_row;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentDefNameColumn {
                get {
                    return this.columnspentDefName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceItem_amountColumn {
                get {
                    return this.columninvoiceItem_amount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceItem_phiColumn {
                get {
                    return this.columninvoiceItem_phi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceItem_totalColumn {
                get {
                    return this.columninvoiceItem_total;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoiceItem_commentColumn {
                get {
                    return this.columninvoiceItem_comment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectTitleColumn {
                get {
                    return this.columnprojectTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_invoiceItemsRow this[int index] {
                get {
                    return ((viw_invoiceItemsRow)(this.Rows[index]));
                }
            }
            
            public event viw_invoiceItemsRowChangeEventHandler viw_invoiceItemsRowChanging;
            
            public event viw_invoiceItemsRowChangeEventHandler viw_invoiceItemsRowChanged;
            
            public event viw_invoiceItemsRowChangeEventHandler viw_invoiceItemsRowDeleting;
            
            public event viw_invoiceItemsRowChangeEventHandler viw_invoiceItemsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addviw_invoiceItemsRow(viw_invoiceItemsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_invoiceItemsRow Addviw_invoiceItemsRow(int invoiceItem_row, string spentDefName, int invoiceItem_amount, long invoiceItem_phi, long invoiceItem_total, string invoiceItem_comment, string projectTitle) {
                viw_invoiceItemsRow rowviw_invoiceItemsRow = ((viw_invoiceItemsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        invoiceItem_row,
                        spentDefName,
                        invoiceItem_amount,
                        invoiceItem_phi,
                        invoiceItem_total,
                        invoiceItem_comment,
                        projectTitle};
                rowviw_invoiceItemsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowviw_invoiceItemsRow);
                return rowviw_invoiceItemsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                viw_invoiceItemsDataTable cln = ((viw_invoiceItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new viw_invoiceItemsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninvoiceItem_row = base.Columns["invoiceItem_row"];
                this.columnspentDefName = base.Columns["spentDefName"];
                this.columninvoiceItem_amount = base.Columns["invoiceItem_amount"];
                this.columninvoiceItem_phi = base.Columns["invoiceItem_phi"];
                this.columninvoiceItem_total = base.Columns["invoiceItem_total"];
                this.columninvoiceItem_comment = base.Columns["invoiceItem_comment"];
                this.columnprojectTitle = base.Columns["projectTitle"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninvoiceItem_row = new global::System.Data.DataColumn("invoiceItem_row", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceItem_row);
                this.columnspentDefName = new global::System.Data.DataColumn("spentDefName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentDefName);
                this.columninvoiceItem_amount = new global::System.Data.DataColumn("invoiceItem_amount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceItem_amount);
                this.columninvoiceItem_phi = new global::System.Data.DataColumn("invoiceItem_phi", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceItem_phi);
                this.columninvoiceItem_total = new global::System.Data.DataColumn("invoiceItem_total", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceItem_total);
                this.columninvoiceItem_comment = new global::System.Data.DataColumn("invoiceItem_comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoiceItem_comment);
                this.columnprojectTitle = new global::System.Data.DataColumn("projectTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectTitle);
                this.columninvoiceItem_row.AllowDBNull = false;
                this.columnspentDefName.AllowDBNull = false;
                this.columnspentDefName.MaxLength = 50;
                this.columninvoiceItem_amount.AllowDBNull = false;
                this.columninvoiceItem_phi.AllowDBNull = false;
                this.columninvoiceItem_total.AllowDBNull = false;
                this.columninvoiceItem_comment.AllowDBNull = false;
                this.columninvoiceItem_comment.MaxLength = 250;
                this.columnprojectTitle.AllowDBNull = false;
                this.columnprojectTitle.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_invoiceItemsRow Newviw_invoiceItemsRow() {
                return ((viw_invoiceItemsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new viw_invoiceItemsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(viw_invoiceItemsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viw_invoiceItemsRowChanged != null)) {
                    this.viw_invoiceItemsRowChanged(this, new viw_invoiceItemsRowChangeEvent(((viw_invoiceItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viw_invoiceItemsRowChanging != null)) {
                    this.viw_invoiceItemsRowChanging(this, new viw_invoiceItemsRowChangeEvent(((viw_invoiceItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viw_invoiceItemsRowDeleted != null)) {
                    this.viw_invoiceItemsRowDeleted(this, new viw_invoiceItemsRowChangeEvent(((viw_invoiceItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viw_invoiceItemsRowDeleting != null)) {
                    this.viw_invoiceItemsRowDeleting(this, new viw_invoiceItemsRowChangeEvent(((viw_invoiceItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeviw_invoiceItemsRow(viw_invoiceItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viw_invoiceItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viw_accDocDataTable : global::System.Data.TypedTableBase<viw_accDocRow> {
            
            private global::System.Data.DataColumn columnaccDoc_id;
            
            private global::System.Data.DataColumn columnaccDoc_date;
            
            private global::System.Data.DataColumn columnaccDoc_comment;
            
            private global::System.Data.DataColumn columnaccDocEvent_indebted;
            
            private global::System.Data.DataColumn columnaccDocEvent_creditor;
            
            private global::System.Data.DataColumn columnaccDocEvent_itIsBank;
            
            private global::System.Data.DataColumn columnaccDocEvent_row;
            
            private global::System.Data.DataColumn columntempo;
            
            private global::System.Data.DataColumn columnaccDocEvent_itIsIndebted;
            
            private global::System.Data.DataColumn columndetailTitle;
            
            private global::System.Data.DataColumn columnaccDocEvent_id;
            
            private global::System.Data.DataColumn columnspentMasterID;
            
            private global::System.Data.DataColumn columndetailID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_accDocDataTable() {
                this.TableName = "viw_accDoc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_accDocDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viw_accDocDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_idColumn {
                get {
                    return this.columnaccDoc_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_dateColumn {
                get {
                    return this.columnaccDoc_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_commentColumn {
                get {
                    return this.columnaccDoc_comment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_indebtedColumn {
                get {
                    return this.columnaccDocEvent_indebted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_creditorColumn {
                get {
                    return this.columnaccDocEvent_creditor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_itIsBankColumn {
                get {
                    return this.columnaccDocEvent_itIsBank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_rowColumn {
                get {
                    return this.columnaccDocEvent_row;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tempoColumn {
                get {
                    return this.columntempo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_itIsIndebtedColumn {
                get {
                    return this.columnaccDocEvent_itIsIndebted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detailTitleColumn {
                get {
                    return this.columndetailTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_idColumn {
                get {
                    return this.columnaccDocEvent_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMasterIDColumn {
                get {
                    return this.columnspentMasterID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detailIDColumn {
                get {
                    return this.columndetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_accDocRow this[int index] {
                get {
                    return ((viw_accDocRow)(this.Rows[index]));
                }
            }
            
            public event viw_accDocRowChangeEventHandler viw_accDocRowChanging;
            
            public event viw_accDocRowChangeEventHandler viw_accDocRowChanged;
            
            public event viw_accDocRowChangeEventHandler viw_accDocRowDeleting;
            
            public event viw_accDocRowChangeEventHandler viw_accDocRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addviw_accDocRow(viw_accDocRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_accDocRow Addviw_accDocRow(long accDoc_id, string accDoc_date, string accDoc_comment, long accDocEvent_indebted, long accDocEvent_creditor, bool accDocEvent_itIsBank, int accDocEvent_row, string tempo, bool accDocEvent_itIsIndebted, string detailTitle, int accDocEvent_id, int spentMasterID, int detailID) {
                viw_accDocRow rowviw_accDocRow = ((viw_accDocRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        accDoc_id,
                        accDoc_date,
                        accDoc_comment,
                        accDocEvent_indebted,
                        accDocEvent_creditor,
                        accDocEvent_itIsBank,
                        accDocEvent_row,
                        tempo,
                        accDocEvent_itIsIndebted,
                        detailTitle,
                        accDocEvent_id,
                        spentMasterID,
                        detailID};
                rowviw_accDocRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowviw_accDocRow);
                return rowviw_accDocRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_accDocRow FindByaccDoc_id(long accDoc_id) {
                return ((viw_accDocRow)(this.Rows.Find(new object[] {
                            accDoc_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                viw_accDocDataTable cln = ((viw_accDocDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new viw_accDocDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaccDoc_id = base.Columns["accDoc_id"];
                this.columnaccDoc_date = base.Columns["accDoc_date"];
                this.columnaccDoc_comment = base.Columns["accDoc_comment"];
                this.columnaccDocEvent_indebted = base.Columns["accDocEvent_indebted"];
                this.columnaccDocEvent_creditor = base.Columns["accDocEvent_creditor"];
                this.columnaccDocEvent_itIsBank = base.Columns["accDocEvent_itIsBank"];
                this.columnaccDocEvent_row = base.Columns["accDocEvent_row"];
                this.columntempo = base.Columns["tempo"];
                this.columnaccDocEvent_itIsIndebted = base.Columns["accDocEvent_itIsIndebted"];
                this.columndetailTitle = base.Columns["detailTitle"];
                this.columnaccDocEvent_id = base.Columns["accDocEvent_id"];
                this.columnspentMasterID = base.Columns["spentMasterID"];
                this.columndetailID = base.Columns["detailID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaccDoc_id = new global::System.Data.DataColumn("accDoc_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_id);
                this.columnaccDoc_date = new global::System.Data.DataColumn("accDoc_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_date);
                this.columnaccDoc_comment = new global::System.Data.DataColumn("accDoc_comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_comment);
                this.columnaccDocEvent_indebted = new global::System.Data.DataColumn("accDocEvent_indebted", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_indebted);
                this.columnaccDocEvent_creditor = new global::System.Data.DataColumn("accDocEvent_creditor", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_creditor);
                this.columnaccDocEvent_itIsBank = new global::System.Data.DataColumn("accDocEvent_itIsBank", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_itIsBank);
                this.columnaccDocEvent_row = new global::System.Data.DataColumn("accDocEvent_row", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_row);
                this.columntempo = new global::System.Data.DataColumn("tempo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntempo);
                this.columnaccDocEvent_itIsIndebted = new global::System.Data.DataColumn("accDocEvent_itIsIndebted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_itIsIndebted);
                this.columndetailTitle = new global::System.Data.DataColumn("detailTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetailTitle);
                this.columnaccDocEvent_id = new global::System.Data.DataColumn("accDocEvent_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_id);
                this.columnspentMasterID = new global::System.Data.DataColumn("spentMasterID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMasterID);
                this.columndetailID = new global::System.Data.DataColumn("detailID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetailID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnaccDoc_id}, true));
                this.columnaccDoc_id.AllowDBNull = false;
                this.columnaccDoc_id.Unique = true;
                this.columnaccDoc_date.AllowDBNull = false;
                this.columnaccDoc_date.MaxLength = 10;
                this.columnaccDoc_comment.MaxLength = 250;
                this.columnaccDocEvent_itIsBank.AllowDBNull = false;
                this.columnaccDocEvent_row.AllowDBNull = false;
                this.columntempo.MaxLength = 250;
                this.columnaccDocEvent_itIsIndebted.AllowDBNull = false;
                this.columndetailTitle.ReadOnly = true;
                this.columndetailTitle.MaxLength = 351;
                this.columnaccDocEvent_id.AllowDBNull = false;
                this.columnspentMasterID.AllowDBNull = false;
                this.columndetailID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_accDocRow Newviw_accDocRow() {
                return ((viw_accDocRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new viw_accDocRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(viw_accDocRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viw_accDocRowChanged != null)) {
                    this.viw_accDocRowChanged(this, new viw_accDocRowChangeEvent(((viw_accDocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viw_accDocRowChanging != null)) {
                    this.viw_accDocRowChanging(this, new viw_accDocRowChangeEvent(((viw_accDocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viw_accDocRowDeleted != null)) {
                    this.viw_accDocRowDeleted(this, new viw_accDocRowChangeEvent(((viw_accDocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viw_accDocRowDeleting != null)) {
                    this.viw_accDocRowDeleting(this, new viw_accDocRowChangeEvent(((viw_accDocRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeviw_accDocRow(viw_accDocRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viw_accDocDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viw_ledgerDataTable : global::System.Data.TypedTableBase<viw_ledgerRow> {
            
            private global::System.Data.DataColumn columnaccDoc_id;
            
            private global::System.Data.DataColumn columnaccDoc_date;
            
            private global::System.Data.DataColumn columnaccDoc_comment;
            
            private global::System.Data.DataColumn columnaccDocEvent_indebted;
            
            private global::System.Data.DataColumn columnaccDocEvent_creditor;
            
            private global::System.Data.DataColumn columnspentMasterID;
            
            private global::System.Data.DataColumn columnaccDocEvent_retail;
            
            private global::System.Data.DataColumn columnspentMasterName;
            
            private global::System.Data.DataColumn columnaccDocEvent_detectID;
            
            private global::System.Data.DataColumn columnaccDocEvent_id;
            
            private global::System.Data.DataColumn columndetail_name;
            
            private global::System.Data.DataColumn columndetailID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerDataTable() {
                this.TableName = "viw_ledger";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_ledgerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viw_ledgerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_idColumn {
                get {
                    return this.columnaccDoc_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_dateColumn {
                get {
                    return this.columnaccDoc_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_commentColumn {
                get {
                    return this.columnaccDoc_comment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_indebtedColumn {
                get {
                    return this.columnaccDocEvent_indebted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_creditorColumn {
                get {
                    return this.columnaccDocEvent_creditor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMasterIDColumn {
                get {
                    return this.columnspentMasterID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_retailColumn {
                get {
                    return this.columnaccDocEvent_retail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMasterNameColumn {
                get {
                    return this.columnspentMasterName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_detectIDColumn {
                get {
                    return this.columnaccDocEvent_detectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDocEvent_idColumn {
                get {
                    return this.columnaccDocEvent_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detail_nameColumn {
                get {
                    return this.columndetail_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detailIDColumn {
                get {
                    return this.columndetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerRow this[int index] {
                get {
                    return ((viw_ledgerRow)(this.Rows[index]));
                }
            }
            
            public event viw_ledgerRowChangeEventHandler viw_ledgerRowChanging;
            
            public event viw_ledgerRowChangeEventHandler viw_ledgerRowChanged;
            
            public event viw_ledgerRowChangeEventHandler viw_ledgerRowDeleting;
            
            public event viw_ledgerRowChangeEventHandler viw_ledgerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addviw_ledgerRow(viw_ledgerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerRow Addviw_ledgerRow(long accDoc_id, string accDoc_date, string accDoc_comment, long accDocEvent_indebted, long accDocEvent_creditor, int spentMasterID, long accDocEvent_retail, string spentMasterName, int accDocEvent_detectID, int accDocEvent_id, string detail_name, int detailID) {
                viw_ledgerRow rowviw_ledgerRow = ((viw_ledgerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        accDoc_id,
                        accDoc_date,
                        accDoc_comment,
                        accDocEvent_indebted,
                        accDocEvent_creditor,
                        spentMasterID,
                        accDocEvent_retail,
                        spentMasterName,
                        accDocEvent_detectID,
                        accDocEvent_id,
                        detail_name,
                        detailID};
                rowviw_ledgerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowviw_ledgerRow);
                return rowviw_ledgerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerRow FindByaccDoc_id(long accDoc_id) {
                return ((viw_ledgerRow)(this.Rows.Find(new object[] {
                            accDoc_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                viw_ledgerDataTable cln = ((viw_ledgerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new viw_ledgerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaccDoc_id = base.Columns["accDoc_id"];
                this.columnaccDoc_date = base.Columns["accDoc_date"];
                this.columnaccDoc_comment = base.Columns["accDoc_comment"];
                this.columnaccDocEvent_indebted = base.Columns["accDocEvent_indebted"];
                this.columnaccDocEvent_creditor = base.Columns["accDocEvent_creditor"];
                this.columnspentMasterID = base.Columns["spentMasterID"];
                this.columnaccDocEvent_retail = base.Columns["accDocEvent_retail"];
                this.columnspentMasterName = base.Columns["spentMasterName"];
                this.columnaccDocEvent_detectID = base.Columns["accDocEvent_detectID"];
                this.columnaccDocEvent_id = base.Columns["accDocEvent_id"];
                this.columndetail_name = base.Columns["detail_name"];
                this.columndetailID = base.Columns["detailID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaccDoc_id = new global::System.Data.DataColumn("accDoc_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_id);
                this.columnaccDoc_date = new global::System.Data.DataColumn("accDoc_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_date);
                this.columnaccDoc_comment = new global::System.Data.DataColumn("accDoc_comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_comment);
                this.columnaccDocEvent_indebted = new global::System.Data.DataColumn("accDocEvent_indebted", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_indebted);
                this.columnaccDocEvent_creditor = new global::System.Data.DataColumn("accDocEvent_creditor", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_creditor);
                this.columnspentMasterID = new global::System.Data.DataColumn("spentMasterID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMasterID);
                this.columnaccDocEvent_retail = new global::System.Data.DataColumn("accDocEvent_retail", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_retail);
                this.columnspentMasterName = new global::System.Data.DataColumn("spentMasterName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMasterName);
                this.columnaccDocEvent_detectID = new global::System.Data.DataColumn("accDocEvent_detectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_detectID);
                this.columnaccDocEvent_id = new global::System.Data.DataColumn("accDocEvent_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDocEvent_id);
                this.columndetail_name = new global::System.Data.DataColumn("detail_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetail_name);
                this.columndetailID = new global::System.Data.DataColumn("detailID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetailID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnaccDoc_id}, true));
                this.columnaccDoc_id.AllowDBNull = false;
                this.columnaccDoc_id.Unique = true;
                this.columnaccDoc_date.AllowDBNull = false;
                this.columnaccDoc_date.MaxLength = 10;
                this.columnaccDoc_comment.MaxLength = 250;
                this.columnspentMasterID.AllowDBNull = false;
                this.columnspentMasterName.AllowDBNull = false;
                this.columnspentMasterName.MaxLength = 250;
                this.columnaccDocEvent_id.AllowDBNull = false;
                this.columndetail_name.MaxLength = 100;
                this.columndetailID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerRow Newviw_ledgerRow() {
                return ((viw_ledgerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new viw_ledgerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(viw_ledgerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viw_ledgerRowChanged != null)) {
                    this.viw_ledgerRowChanged(this, new viw_ledgerRowChangeEvent(((viw_ledgerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viw_ledgerRowChanging != null)) {
                    this.viw_ledgerRowChanging(this, new viw_ledgerRowChangeEvent(((viw_ledgerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viw_ledgerRowDeleted != null)) {
                    this.viw_ledgerRowDeleted(this, new viw_ledgerRowChangeEvent(((viw_ledgerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viw_ledgerRowDeleting != null)) {
                    this.viw_ledgerRowDeleting(this, new viw_ledgerRowChangeEvent(((viw_ledgerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeviw_ledgerRow(viw_ledgerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viw_ledgerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viw_balanceDataTable : global::System.Data.TypedTableBase<viw_balanceRow> {
            
            private global::System.Data.DataColumn columnspentMasterName;
            
            private global::System.Data.DataColumn columnindTotal;
            
            private global::System.Data.DataColumn columncreTotal;
            
            private global::System.Data.DataColumn columnspentMasterID;
            
            private global::System.Data.DataColumn columndetail_name;
            
            private global::System.Data.DataColumn columndetailID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_balanceDataTable() {
                this.TableName = "viw_balance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_balanceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viw_balanceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMasterNameColumn {
                get {
                    return this.columnspentMasterName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indTotalColumn {
                get {
                    return this.columnindTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn creTotalColumn {
                get {
                    return this.columncreTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMasterIDColumn {
                get {
                    return this.columnspentMasterID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detail_nameColumn {
                get {
                    return this.columndetail_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detailIDColumn {
                get {
                    return this.columndetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_balanceRow this[int index] {
                get {
                    return ((viw_balanceRow)(this.Rows[index]));
                }
            }
            
            public event viw_balanceRowChangeEventHandler viw_balanceRowChanging;
            
            public event viw_balanceRowChangeEventHandler viw_balanceRowChanged;
            
            public event viw_balanceRowChangeEventHandler viw_balanceRowDeleting;
            
            public event viw_balanceRowChangeEventHandler viw_balanceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addviw_balanceRow(viw_balanceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_balanceRow Addviw_balanceRow(string spentMasterName, long indTotal, long creTotal, int spentMasterID, string detail_name, int detailID) {
                viw_balanceRow rowviw_balanceRow = ((viw_balanceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        spentMasterName,
                        indTotal,
                        creTotal,
                        spentMasterID,
                        detail_name,
                        detailID};
                rowviw_balanceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowviw_balanceRow);
                return rowviw_balanceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                viw_balanceDataTable cln = ((viw_balanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new viw_balanceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnspentMasterName = base.Columns["spentMasterName"];
                this.columnindTotal = base.Columns["indTotal"];
                this.columncreTotal = base.Columns["creTotal"];
                this.columnspentMasterID = base.Columns["spentMasterID"];
                this.columndetail_name = base.Columns["detail_name"];
                this.columndetailID = base.Columns["detailID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnspentMasterName = new global::System.Data.DataColumn("spentMasterName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMasterName);
                this.columnindTotal = new global::System.Data.DataColumn("indTotal", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnindTotal);
                this.columncreTotal = new global::System.Data.DataColumn("creTotal", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreTotal);
                this.columnspentMasterID = new global::System.Data.DataColumn("spentMasterID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMasterID);
                this.columndetail_name = new global::System.Data.DataColumn("detail_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetail_name);
                this.columndetailID = new global::System.Data.DataColumn("detailID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetailID);
                this.columnspentMasterName.AllowDBNull = false;
                this.columnspentMasterName.MaxLength = 250;
                this.columnspentMasterID.AllowDBNull = false;
                this.columndetail_name.MaxLength = 100;
                this.columndetailID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_balanceRow Newviw_balanceRow() {
                return ((viw_balanceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new viw_balanceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(viw_balanceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viw_balanceRowChanged != null)) {
                    this.viw_balanceRowChanged(this, new viw_balanceRowChangeEvent(((viw_balanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viw_balanceRowChanging != null)) {
                    this.viw_balanceRowChanging(this, new viw_balanceRowChangeEvent(((viw_balanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viw_balanceRowDeleted != null)) {
                    this.viw_balanceRowDeleted(this, new viw_balanceRowChangeEvent(((viw_balanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viw_balanceRowDeleting != null)) {
                    this.viw_balanceRowDeleting(this, new viw_balanceRowChangeEvent(((viw_balanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeviw_balanceRow(viw_balanceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viw_balanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class detailsTableDataTable : global::System.Data.TypedTableBase<detailsTableRow> {
            
            private global::System.Data.DataColumn columndetailID;
            
            private global::System.Data.DataColumn columnspentMasterID;
            
            private global::System.Data.DataColumn columndetail_name;
            
            private global::System.Data.DataColumn columnprojectID;
            
            private global::System.Data.DataColumn columnpersonID;
            
            private global::System.Data.DataColumn columnaccountID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detailsTableDataTable() {
                this.TableName = "detailsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal detailsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected detailsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detailIDColumn {
                get {
                    return this.columndetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMasterIDColumn {
                get {
                    return this.columnspentMasterID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detail_nameColumn {
                get {
                    return this.columndetail_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectIDColumn {
                get {
                    return this.columnprojectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personIDColumn {
                get {
                    return this.columnpersonID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accountIDColumn {
                get {
                    return this.columnaccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detailsTableRow this[int index] {
                get {
                    return ((detailsTableRow)(this.Rows[index]));
                }
            }
            
            public event detailsTableRowChangeEventHandler detailsTableRowChanging;
            
            public event detailsTableRowChangeEventHandler detailsTableRowChanged;
            
            public event detailsTableRowChangeEventHandler detailsTableRowDeleting;
            
            public event detailsTableRowChangeEventHandler detailsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddetailsTableRow(detailsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detailsTableRow AdddetailsTableRow(int detailID, spentMasterRow parentspentMasterRowByFK_detailsTable_spentMaster, string detail_name, projectsTableRow parentprojectsTableRowByFK_detailsTable_projectsTable, personsTableRow parentpersonsTableRowByFK_detailsTable_personsTable, AccountsTableRow parentAccountsTableRowByFK_detailsTable_AccountsTable) {
                detailsTableRow rowdetailsTableRow = ((detailsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        detailID,
                        null,
                        detail_name,
                        null,
                        null,
                        null};
                if ((parentspentMasterRowByFK_detailsTable_spentMaster != null)) {
                    columnValuesArray[1] = parentspentMasterRowByFK_detailsTable_spentMaster[0];
                }
                if ((parentprojectsTableRowByFK_detailsTable_projectsTable != null)) {
                    columnValuesArray[3] = parentprojectsTableRowByFK_detailsTable_projectsTable[0];
                }
                if ((parentpersonsTableRowByFK_detailsTable_personsTable != null)) {
                    columnValuesArray[4] = parentpersonsTableRowByFK_detailsTable_personsTable[0];
                }
                if ((parentAccountsTableRowByFK_detailsTable_AccountsTable != null)) {
                    columnValuesArray[5] = parentAccountsTableRowByFK_detailsTable_AccountsTable[0];
                }
                rowdetailsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdetailsTableRow);
                return rowdetailsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detailsTableRow FindBydetailID(int detailID) {
                return ((detailsTableRow)(this.Rows.Find(new object[] {
                            detailID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                detailsTableDataTable cln = ((detailsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new detailsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndetailID = base.Columns["detailID"];
                this.columnspentMasterID = base.Columns["spentMasterID"];
                this.columndetail_name = base.Columns["detail_name"];
                this.columnprojectID = base.Columns["projectID"];
                this.columnpersonID = base.Columns["personID"];
                this.columnaccountID = base.Columns["accountID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndetailID = new global::System.Data.DataColumn("detailID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetailID);
                this.columnspentMasterID = new global::System.Data.DataColumn("spentMasterID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMasterID);
                this.columndetail_name = new global::System.Data.DataColumn("detail_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetail_name);
                this.columnprojectID = new global::System.Data.DataColumn("projectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectID);
                this.columnpersonID = new global::System.Data.DataColumn("personID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonID);
                this.columnaccountID = new global::System.Data.DataColumn("accountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccountID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndetailID}, true));
                this.columndetailID.AllowDBNull = false;
                this.columndetailID.Unique = true;
                this.columnspentMasterID.AllowDBNull = false;
                this.columndetail_name.AllowDBNull = false;
                this.columndetail_name.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detailsTableRow NewdetailsTableRow() {
                return ((detailsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new detailsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(detailsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.detailsTableRowChanged != null)) {
                    this.detailsTableRowChanged(this, new detailsTableRowChangeEvent(((detailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.detailsTableRowChanging != null)) {
                    this.detailsTableRowChanging(this, new detailsTableRowChangeEvent(((detailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.detailsTableRowDeleted != null)) {
                    this.detailsTableRowDeleted(this, new detailsTableRowChangeEvent(((detailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.detailsTableRowDeleting != null)) {
                    this.detailsTableRowDeleting(this, new detailsTableRowChangeEvent(((detailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedetailsTableRow(detailsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "detailsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viw_detailsDataTable : global::System.Data.TypedTableBase<viw_detailsRow> {
            
            private global::System.Data.DataColumn columnspentMasterID;
            
            private global::System.Data.DataColumn columndetailID;
            
            private global::System.Data.DataColumn columnfullDetailName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsDataTable() {
                this.TableName = "viw_details";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_detailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viw_detailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMasterIDColumn {
                get {
                    return this.columnspentMasterID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detailIDColumn {
                get {
                    return this.columndetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fullDetailNameColumn {
                get {
                    return this.columnfullDetailName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsRow this[int index] {
                get {
                    return ((viw_detailsRow)(this.Rows[index]));
                }
            }
            
            public event viw_detailsRowChangeEventHandler viw_detailsRowChanging;
            
            public event viw_detailsRowChangeEventHandler viw_detailsRowChanged;
            
            public event viw_detailsRowChangeEventHandler viw_detailsRowDeleting;
            
            public event viw_detailsRowChangeEventHandler viw_detailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addviw_detailsRow(viw_detailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsRow Addviw_detailsRow(int spentMasterID, int detailID, string fullDetailName) {
                viw_detailsRow rowviw_detailsRow = ((viw_detailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        spentMasterID,
                        detailID,
                        fullDetailName};
                rowviw_detailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowviw_detailsRow);
                return rowviw_detailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsRow FindBydetailID(int detailID) {
                return ((viw_detailsRow)(this.Rows.Find(new object[] {
                            detailID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                viw_detailsDataTable cln = ((viw_detailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new viw_detailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnspentMasterID = base.Columns["spentMasterID"];
                this.columndetailID = base.Columns["detailID"];
                this.columnfullDetailName = base.Columns["fullDetailName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnspentMasterID = new global::System.Data.DataColumn("spentMasterID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMasterID);
                this.columndetailID = new global::System.Data.DataColumn("detailID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetailID);
                this.columnfullDetailName = new global::System.Data.DataColumn("fullDetailName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfullDetailName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndetailID}, true));
                this.columnspentMasterID.AllowDBNull = false;
                this.columndetailID.AllowDBNull = false;
                this.columndetailID.Unique = true;
                this.columnfullDetailName.ReadOnly = true;
                this.columnfullDetailName.MaxLength = 351;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsRow Newviw_detailsRow() {
                return ((viw_detailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new viw_detailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(viw_detailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viw_detailsRowChanged != null)) {
                    this.viw_detailsRowChanged(this, new viw_detailsRowChangeEvent(((viw_detailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viw_detailsRowChanging != null)) {
                    this.viw_detailsRowChanging(this, new viw_detailsRowChangeEvent(((viw_detailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viw_detailsRowDeleted != null)) {
                    this.viw_detailsRowDeleted(this, new viw_detailsRowChangeEvent(((viw_detailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viw_detailsRowDeleting != null)) {
                    this.viw_detailsRowDeleting(this, new viw_detailsRowChangeEvent(((viw_detailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeviw_detailsRow(viw_detailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viw_detailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class spentGroupsTableDataTable : global::System.Data.TypedTableBase<spentGroupsTableRow> {
            
            private global::System.Data.DataColumn columnspentGroup_id;
            
            private global::System.Data.DataColumn columnspentGroup_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentGroupsTableDataTable() {
                this.TableName = "spentGroupsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spentGroupsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected spentGroupsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentGroup_idColumn {
                get {
                    return this.columnspentGroup_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentGroup_nameColumn {
                get {
                    return this.columnspentGroup_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentGroupsTableRow this[int index] {
                get {
                    return ((spentGroupsTableRow)(this.Rows[index]));
                }
            }
            
            public event spentGroupsTableRowChangeEventHandler spentGroupsTableRowChanging;
            
            public event spentGroupsTableRowChangeEventHandler spentGroupsTableRowChanged;
            
            public event spentGroupsTableRowChangeEventHandler spentGroupsTableRowDeleting;
            
            public event spentGroupsTableRowChangeEventHandler spentGroupsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddspentGroupsTableRow(spentGroupsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentGroupsTableRow AddspentGroupsTableRow(int spentGroup_id, string spentGroup_name) {
                spentGroupsTableRow rowspentGroupsTableRow = ((spentGroupsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        spentGroup_id,
                        spentGroup_name};
                rowspentGroupsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowspentGroupsTableRow);
                return rowspentGroupsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                spentGroupsTableDataTable cln = ((spentGroupsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new spentGroupsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnspentGroup_id = base.Columns["spentGroup_id"];
                this.columnspentGroup_name = base.Columns["spentGroup_name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnspentGroup_id = new global::System.Data.DataColumn("spentGroup_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentGroup_id);
                this.columnspentGroup_name = new global::System.Data.DataColumn("spentGroup_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentGroup_name);
                this.columnspentGroup_id.AllowDBNull = false;
                this.columnspentGroup_name.AllowDBNull = false;
                this.columnspentGroup_name.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentGroupsTableRow NewspentGroupsTableRow() {
                return ((spentGroupsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new spentGroupsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(spentGroupsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.spentGroupsTableRowChanged != null)) {
                    this.spentGroupsTableRowChanged(this, new spentGroupsTableRowChangeEvent(((spentGroupsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.spentGroupsTableRowChanging != null)) {
                    this.spentGroupsTableRowChanging(this, new spentGroupsTableRowChangeEvent(((spentGroupsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.spentGroupsTableRowDeleted != null)) {
                    this.spentGroupsTableRowDeleted(this, new spentGroupsTableRowChangeEvent(((spentGroupsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.spentGroupsTableRowDeleting != null)) {
                    this.spentGroupsTableRowDeleting(this, new spentGroupsTableRowChangeEvent(((spentGroupsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovespentGroupsTableRow(spentGroupsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "spentGroupsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TaraznamehDataTable : global::System.Data.TypedTableBase<TaraznamehRow> {
            
            private global::System.Data.DataColumn columntar_id;
            
            private global::System.Data.DataColumn columntar_indColTitle;
            
            private global::System.Data.DataColumn columntar_indColPrice;
            
            private global::System.Data.DataColumn columntar_indColIsItTitr;
            
            private global::System.Data.DataColumn columntar_creColTitle;
            
            private global::System.Data.DataColumn columntar_creColPrice;
            
            private global::System.Data.DataColumn columntar_creColIsItTitr;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaraznamehDataTable() {
                this.TableName = "Taraznameh";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaraznamehDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TaraznamehDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tar_idColumn {
                get {
                    return this.columntar_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tar_indColTitleColumn {
                get {
                    return this.columntar_indColTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tar_indColPriceColumn {
                get {
                    return this.columntar_indColPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tar_indColIsItTitrColumn {
                get {
                    return this.columntar_indColIsItTitr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tar_creColTitleColumn {
                get {
                    return this.columntar_creColTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tar_creColPriceColumn {
                get {
                    return this.columntar_creColPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tar_creColIsItTitrColumn {
                get {
                    return this.columntar_creColIsItTitr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaraznamehRow this[int index] {
                get {
                    return ((TaraznamehRow)(this.Rows[index]));
                }
            }
            
            public event TaraznamehRowChangeEventHandler TaraznamehRowChanging;
            
            public event TaraznamehRowChangeEventHandler TaraznamehRowChanged;
            
            public event TaraznamehRowChangeEventHandler TaraznamehRowDeleting;
            
            public event TaraznamehRowChangeEventHandler TaraznamehRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTaraznamehRow(TaraznamehRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaraznamehRow AddTaraznamehRow(string tar_indColTitle, long tar_indColPrice, bool tar_indColIsItTitr, string tar_creColTitle, long tar_creColPrice, bool tar_creColIsItTitr) {
                TaraznamehRow rowTaraznamehRow = ((TaraznamehRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        tar_indColTitle,
                        tar_indColPrice,
                        tar_indColIsItTitr,
                        tar_creColTitle,
                        tar_creColPrice,
                        tar_creColIsItTitr};
                rowTaraznamehRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTaraznamehRow);
                return rowTaraznamehRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaraznamehRow FindBytar_id(int tar_id) {
                return ((TaraznamehRow)(this.Rows.Find(new object[] {
                            tar_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TaraznamehDataTable cln = ((TaraznamehDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TaraznamehDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntar_id = base.Columns["tar_id"];
                this.columntar_indColTitle = base.Columns["tar_indColTitle"];
                this.columntar_indColPrice = base.Columns["tar_indColPrice"];
                this.columntar_indColIsItTitr = base.Columns["tar_indColIsItTitr"];
                this.columntar_creColTitle = base.Columns["tar_creColTitle"];
                this.columntar_creColPrice = base.Columns["tar_creColPrice"];
                this.columntar_creColIsItTitr = base.Columns["tar_creColIsItTitr"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntar_id = new global::System.Data.DataColumn("tar_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntar_id);
                this.columntar_indColTitle = new global::System.Data.DataColumn("tar_indColTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntar_indColTitle);
                this.columntar_indColPrice = new global::System.Data.DataColumn("tar_indColPrice", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntar_indColPrice);
                this.columntar_indColIsItTitr = new global::System.Data.DataColumn("tar_indColIsItTitr", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntar_indColIsItTitr);
                this.columntar_creColTitle = new global::System.Data.DataColumn("tar_creColTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntar_creColTitle);
                this.columntar_creColPrice = new global::System.Data.DataColumn("tar_creColPrice", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntar_creColPrice);
                this.columntar_creColIsItTitr = new global::System.Data.DataColumn("tar_creColIsItTitr", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntar_creColIsItTitr);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntar_id}, true));
                this.columntar_id.AutoIncrement = true;
                this.columntar_id.AutoIncrementSeed = -1;
                this.columntar_id.AutoIncrementStep = -1;
                this.columntar_id.AllowDBNull = false;
                this.columntar_id.ReadOnly = true;
                this.columntar_id.Unique = true;
                this.columntar_indColTitle.MaxLength = 50;
                this.columntar_creColTitle.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaraznamehRow NewTaraznamehRow() {
                return ((TaraznamehRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TaraznamehRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TaraznamehRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TaraznamehRowChanged != null)) {
                    this.TaraznamehRowChanged(this, new TaraznamehRowChangeEvent(((TaraznamehRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TaraznamehRowChanging != null)) {
                    this.TaraznamehRowChanging(this, new TaraznamehRowChangeEvent(((TaraznamehRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TaraznamehRowDeleted != null)) {
                    this.TaraznamehRowDeleted(this, new TaraznamehRowChangeEvent(((TaraznamehRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TaraznamehRowDeleting != null)) {
                    this.TaraznamehRowDeleting(this, new TaraznamehRowChangeEvent(((TaraznamehRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTaraznamehRow(TaraznamehRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TaraznamehDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class freeFormsTableDataTable : global::System.Data.TypedTableBase<freeFormsTableRow> {
            
            private global::System.Data.DataColumn columnfreeForm_id;
            
            private global::System.Data.DataColumn columnfreeForm_date;
            
            private global::System.Data.DataColumn columnpersonID;
            
            private global::System.Data.DataColumn columnfreeForm_office;
            
            private global::System.Data.DataColumn columnfreeForm_personalReason;
            
            private global::System.Data.DataColumn columnfreeForm_timeOut;
            
            private global::System.Data.DataColumn columnfreeForm_outTime;
            
            private global::System.Data.DataColumn columnfreeForm_returnTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public freeFormsTableDataTable() {
                this.TableName = "freeFormsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal freeFormsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected freeFormsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_idColumn {
                get {
                    return this.columnfreeForm_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_dateColumn {
                get {
                    return this.columnfreeForm_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personIDColumn {
                get {
                    return this.columnpersonID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_officeColumn {
                get {
                    return this.columnfreeForm_office;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_personalReasonColumn {
                get {
                    return this.columnfreeForm_personalReason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_timeOutColumn {
                get {
                    return this.columnfreeForm_timeOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_outTimeColumn {
                get {
                    return this.columnfreeForm_outTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_returnTimeColumn {
                get {
                    return this.columnfreeForm_returnTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public freeFormsTableRow this[int index] {
                get {
                    return ((freeFormsTableRow)(this.Rows[index]));
                }
            }
            
            public event freeFormsTableRowChangeEventHandler freeFormsTableRowChanging;
            
            public event freeFormsTableRowChangeEventHandler freeFormsTableRowChanged;
            
            public event freeFormsTableRowChangeEventHandler freeFormsTableRowDeleting;
            
            public event freeFormsTableRowChangeEventHandler freeFormsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddfreeFormsTableRow(freeFormsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public freeFormsTableRow AddfreeFormsTableRow(string freeForm_date, int personID, string freeForm_office, bool freeForm_personalReason, string freeForm_timeOut, string freeForm_outTime, string freeForm_returnTime) {
                freeFormsTableRow rowfreeFormsTableRow = ((freeFormsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        freeForm_date,
                        personID,
                        freeForm_office,
                        freeForm_personalReason,
                        freeForm_timeOut,
                        freeForm_outTime,
                        freeForm_returnTime};
                rowfreeFormsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowfreeFormsTableRow);
                return rowfreeFormsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public freeFormsTableRow FindByfreeForm_id(long freeForm_id) {
                return ((freeFormsTableRow)(this.Rows.Find(new object[] {
                            freeForm_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                freeFormsTableDataTable cln = ((freeFormsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new freeFormsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfreeForm_id = base.Columns["freeForm_id"];
                this.columnfreeForm_date = base.Columns["freeForm_date"];
                this.columnpersonID = base.Columns["personID"];
                this.columnfreeForm_office = base.Columns["freeForm_office"];
                this.columnfreeForm_personalReason = base.Columns["freeForm_personalReason"];
                this.columnfreeForm_timeOut = base.Columns["freeForm_timeOut"];
                this.columnfreeForm_outTime = base.Columns["freeForm_outTime"];
                this.columnfreeForm_returnTime = base.Columns["freeForm_returnTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfreeForm_id = new global::System.Data.DataColumn("freeForm_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_id);
                this.columnfreeForm_date = new global::System.Data.DataColumn("freeForm_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_date);
                this.columnpersonID = new global::System.Data.DataColumn("personID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonID);
                this.columnfreeForm_office = new global::System.Data.DataColumn("freeForm_office", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_office);
                this.columnfreeForm_personalReason = new global::System.Data.DataColumn("freeForm_personalReason", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_personalReason);
                this.columnfreeForm_timeOut = new global::System.Data.DataColumn("freeForm_timeOut", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_timeOut);
                this.columnfreeForm_outTime = new global::System.Data.DataColumn("freeForm_outTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_outTime);
                this.columnfreeForm_returnTime = new global::System.Data.DataColumn("freeForm_returnTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_returnTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnfreeForm_id}, true));
                this.columnfreeForm_id.AutoIncrement = true;
                this.columnfreeForm_id.AutoIncrementSeed = -1;
                this.columnfreeForm_id.AutoIncrementStep = -1;
                this.columnfreeForm_id.AllowDBNull = false;
                this.columnfreeForm_id.ReadOnly = true;
                this.columnfreeForm_id.Unique = true;
                this.columnfreeForm_date.AllowDBNull = false;
                this.columnfreeForm_date.MaxLength = 15;
                this.columnpersonID.AllowDBNull = false;
                this.columnfreeForm_office.MaxLength = 50;
                this.columnfreeForm_personalReason.AllowDBNull = false;
                this.columnfreeForm_timeOut.AllowDBNull = false;
                this.columnfreeForm_timeOut.MaxLength = 10;
                this.columnfreeForm_outTime.AllowDBNull = false;
                this.columnfreeForm_outTime.MaxLength = 10;
                this.columnfreeForm_returnTime.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public freeFormsTableRow NewfreeFormsTableRow() {
                return ((freeFormsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new freeFormsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(freeFormsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.freeFormsTableRowChanged != null)) {
                    this.freeFormsTableRowChanged(this, new freeFormsTableRowChangeEvent(((freeFormsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.freeFormsTableRowChanging != null)) {
                    this.freeFormsTableRowChanging(this, new freeFormsTableRowChangeEvent(((freeFormsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.freeFormsTableRowDeleted != null)) {
                    this.freeFormsTableRowDeleted(this, new freeFormsTableRowChangeEvent(((freeFormsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.freeFormsTableRowDeleting != null)) {
                    this.freeFormsTableRowDeleting(this, new freeFormsTableRowChangeEvent(((freeFormsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovefreeFormsTableRow(freeFormsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "freeFormsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viw_freeFormsDataTable : global::System.Data.TypedTableBase<viw_freeFormsRow> {
            
            private global::System.Data.DataColumn columnpersonFamilyAndName;
            
            private global::System.Data.DataColumn columnfreeForm_id;
            
            private global::System.Data.DataColumn columnfreeForm_date;
            
            private global::System.Data.DataColumn columnfreeForm_office;
            
            private global::System.Data.DataColumn columnfreeForm_personalReason;
            
            private global::System.Data.DataColumn columnfreeForm_timeOut;
            
            private global::System.Data.DataColumn columnfreeForm_outTime;
            
            private global::System.Data.DataColumn columnfreeForm_returnTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_freeFormsDataTable() {
                this.TableName = "viw_freeForms";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_freeFormsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viw_freeFormsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn personFamilyAndNameColumn {
                get {
                    return this.columnpersonFamilyAndName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_idColumn {
                get {
                    return this.columnfreeForm_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_dateColumn {
                get {
                    return this.columnfreeForm_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_officeColumn {
                get {
                    return this.columnfreeForm_office;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_personalReasonColumn {
                get {
                    return this.columnfreeForm_personalReason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_timeOutColumn {
                get {
                    return this.columnfreeForm_timeOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_outTimeColumn {
                get {
                    return this.columnfreeForm_outTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freeForm_returnTimeColumn {
                get {
                    return this.columnfreeForm_returnTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_freeFormsRow this[int index] {
                get {
                    return ((viw_freeFormsRow)(this.Rows[index]));
                }
            }
            
            public event viw_freeFormsRowChangeEventHandler viw_freeFormsRowChanging;
            
            public event viw_freeFormsRowChangeEventHandler viw_freeFormsRowChanged;
            
            public event viw_freeFormsRowChangeEventHandler viw_freeFormsRowDeleting;
            
            public event viw_freeFormsRowChangeEventHandler viw_freeFormsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addviw_freeFormsRow(viw_freeFormsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_freeFormsRow Addviw_freeFormsRow(string personFamilyAndName, long freeForm_id, string freeForm_date, string freeForm_office, bool freeForm_personalReason, string freeForm_timeOut, string freeForm_outTime, string freeForm_returnTime) {
                viw_freeFormsRow rowviw_freeFormsRow = ((viw_freeFormsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        personFamilyAndName,
                        freeForm_id,
                        freeForm_date,
                        freeForm_office,
                        freeForm_personalReason,
                        freeForm_timeOut,
                        freeForm_outTime,
                        freeForm_returnTime};
                rowviw_freeFormsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowviw_freeFormsRow);
                return rowviw_freeFormsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_freeFormsRow FindByfreeForm_id(long freeForm_id) {
                return ((viw_freeFormsRow)(this.Rows.Find(new object[] {
                            freeForm_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                viw_freeFormsDataTable cln = ((viw_freeFormsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new viw_freeFormsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpersonFamilyAndName = base.Columns["personFamilyAndName"];
                this.columnfreeForm_id = base.Columns["freeForm_id"];
                this.columnfreeForm_date = base.Columns["freeForm_date"];
                this.columnfreeForm_office = base.Columns["freeForm_office"];
                this.columnfreeForm_personalReason = base.Columns["freeForm_personalReason"];
                this.columnfreeForm_timeOut = base.Columns["freeForm_timeOut"];
                this.columnfreeForm_outTime = base.Columns["freeForm_outTime"];
                this.columnfreeForm_returnTime = base.Columns["freeForm_returnTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpersonFamilyAndName = new global::System.Data.DataColumn("personFamilyAndName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpersonFamilyAndName);
                this.columnfreeForm_id = new global::System.Data.DataColumn("freeForm_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_id);
                this.columnfreeForm_date = new global::System.Data.DataColumn("freeForm_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_date);
                this.columnfreeForm_office = new global::System.Data.DataColumn("freeForm_office", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_office);
                this.columnfreeForm_personalReason = new global::System.Data.DataColumn("freeForm_personalReason", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_personalReason);
                this.columnfreeForm_timeOut = new global::System.Data.DataColumn("freeForm_timeOut", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_timeOut);
                this.columnfreeForm_outTime = new global::System.Data.DataColumn("freeForm_outTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_outTime);
                this.columnfreeForm_returnTime = new global::System.Data.DataColumn("freeForm_returnTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreeForm_returnTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnfreeForm_id}, true));
                this.columnpersonFamilyAndName.AllowDBNull = false;
                this.columnpersonFamilyAndName.MaxLength = 100;
                this.columnfreeForm_id.AllowDBNull = false;
                this.columnfreeForm_id.Unique = true;
                this.columnfreeForm_date.AllowDBNull = false;
                this.columnfreeForm_date.MaxLength = 15;
                this.columnfreeForm_office.MaxLength = 50;
                this.columnfreeForm_personalReason.AllowDBNull = false;
                this.columnfreeForm_timeOut.AllowDBNull = false;
                this.columnfreeForm_timeOut.MaxLength = 10;
                this.columnfreeForm_outTime.AllowDBNull = false;
                this.columnfreeForm_outTime.MaxLength = 10;
                this.columnfreeForm_returnTime.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_freeFormsRow Newviw_freeFormsRow() {
                return ((viw_freeFormsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new viw_freeFormsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(viw_freeFormsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viw_freeFormsRowChanged != null)) {
                    this.viw_freeFormsRowChanged(this, new viw_freeFormsRowChangeEvent(((viw_freeFormsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viw_freeFormsRowChanging != null)) {
                    this.viw_freeFormsRowChanging(this, new viw_freeFormsRowChangeEvent(((viw_freeFormsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viw_freeFormsRowDeleted != null)) {
                    this.viw_freeFormsRowDeleted(this, new viw_freeFormsRowChangeEvent(((viw_freeFormsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viw_freeFormsRowDeleting != null)) {
                    this.viw_freeFormsRowDeleting(this, new viw_freeFormsRowChangeEvent(((viw_freeFormsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeviw_freeFormsRow(viw_freeFormsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viw_freeFormsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viw_ledgerRemainsDataTable : global::System.Data.TypedTableBase<viw_ledgerRemainsRow> {
            
            private global::System.Data.DataColumn columnspentMasterID;
            
            private global::System.Data.DataColumn columnspentMasterName;
            
            private global::System.Data.DataColumn columnindTotal;
            
            private global::System.Data.DataColumn columncreTotal;
            
            private global::System.Data.DataColumn columndetailID;
            
            private global::System.Data.DataColumn columndetail_name;
            
            private global::System.Data.DataColumn columnreportTitle;
            
            private global::System.Data.DataColumn columnpara1;
            
            private global::System.Data.DataColumn columnpara2;
            
            private global::System.Data.DataColumn columnpara3;
            
            private global::System.Data.DataColumn columnaccDoc_date;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerRemainsDataTable() {
                this.TableName = "viw_ledgerRemains";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_ledgerRemainsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viw_ledgerRemainsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMasterIDColumn {
                get {
                    return this.columnspentMasterID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn spentMasterNameColumn {
                get {
                    return this.columnspentMasterName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indTotalColumn {
                get {
                    return this.columnindTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn creTotalColumn {
                get {
                    return this.columncreTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detailIDColumn {
                get {
                    return this.columndetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detail_nameColumn {
                get {
                    return this.columndetail_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reportTitleColumn {
                get {
                    return this.columnreportTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn para1Column {
                get {
                    return this.columnpara1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn para2Column {
                get {
                    return this.columnpara2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn para3Column {
                get {
                    return this.columnpara3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_dateColumn {
                get {
                    return this.columnaccDoc_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerRemainsRow this[int index] {
                get {
                    return ((viw_ledgerRemainsRow)(this.Rows[index]));
                }
            }
            
            public event viw_ledgerRemainsRowChangeEventHandler viw_ledgerRemainsRowChanging;
            
            public event viw_ledgerRemainsRowChangeEventHandler viw_ledgerRemainsRowChanged;
            
            public event viw_ledgerRemainsRowChangeEventHandler viw_ledgerRemainsRowDeleting;
            
            public event viw_ledgerRemainsRowChangeEventHandler viw_ledgerRemainsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addviw_ledgerRemainsRow(viw_ledgerRemainsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerRemainsRow Addviw_ledgerRemainsRow(int spentMasterID, string spentMasterName, long indTotal, long creTotal, int detailID, string detail_name, string reportTitle, string para1, string para2, string para3, string accDoc_date) {
                viw_ledgerRemainsRow rowviw_ledgerRemainsRow = ((viw_ledgerRemainsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        spentMasterID,
                        spentMasterName,
                        indTotal,
                        creTotal,
                        detailID,
                        detail_name,
                        reportTitle,
                        para1,
                        para2,
                        para3,
                        accDoc_date};
                rowviw_ledgerRemainsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowviw_ledgerRemainsRow);
                return rowviw_ledgerRemainsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerRemainsRow FindByspentMasterID(int spentMasterID) {
                return ((viw_ledgerRemainsRow)(this.Rows.Find(new object[] {
                            spentMasterID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                viw_ledgerRemainsDataTable cln = ((viw_ledgerRemainsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new viw_ledgerRemainsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnspentMasterID = base.Columns["spentMasterID"];
                this.columnspentMasterName = base.Columns["spentMasterName"];
                this.columnindTotal = base.Columns["indTotal"];
                this.columncreTotal = base.Columns["creTotal"];
                this.columndetailID = base.Columns["detailID"];
                this.columndetail_name = base.Columns["detail_name"];
                this.columnreportTitle = base.Columns["reportTitle"];
                this.columnpara1 = base.Columns["para1"];
                this.columnpara2 = base.Columns["para2"];
                this.columnpara3 = base.Columns["para3"];
                this.columnaccDoc_date = base.Columns["accDoc_date"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnspentMasterID = new global::System.Data.DataColumn("spentMasterID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMasterID);
                this.columnspentMasterName = new global::System.Data.DataColumn("spentMasterName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspentMasterName);
                this.columnindTotal = new global::System.Data.DataColumn("indTotal", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnindTotal);
                this.columncreTotal = new global::System.Data.DataColumn("creTotal", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreTotal);
                this.columndetailID = new global::System.Data.DataColumn("detailID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetailID);
                this.columndetail_name = new global::System.Data.DataColumn("detail_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetail_name);
                this.columnreportTitle = new global::System.Data.DataColumn("reportTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreportTitle);
                this.columnpara1 = new global::System.Data.DataColumn("para1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpara1);
                this.columnpara2 = new global::System.Data.DataColumn("para2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpara2);
                this.columnpara3 = new global::System.Data.DataColumn("para3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpara3);
                this.columnaccDoc_date = new global::System.Data.DataColumn("accDoc_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_date);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnspentMasterID}, true));
                this.columnspentMasterID.AllowDBNull = false;
                this.columnspentMasterID.Unique = true;
                this.columnspentMasterName.AllowDBNull = false;
                this.columnspentMasterName.MaxLength = 250;
                this.columndetailID.AllowDBNull = false;
                this.columndetail_name.MaxLength = 100;
                this.columnreportTitle.ReadOnly = true;
                this.columnreportTitle.MaxLength = 1;
                this.columnpara1.ReadOnly = true;
                this.columnpara1.MaxLength = 1;
                this.columnpara2.ReadOnly = true;
                this.columnpara2.MaxLength = 1;
                this.columnpara3.ReadOnly = true;
                this.columnpara3.MaxLength = 1;
                this.columnaccDoc_date.AllowDBNull = false;
                this.columnaccDoc_date.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerRemainsRow Newviw_ledgerRemainsRow() {
                return ((viw_ledgerRemainsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new viw_ledgerRemainsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(viw_ledgerRemainsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viw_ledgerRemainsRowChanged != null)) {
                    this.viw_ledgerRemainsRowChanged(this, new viw_ledgerRemainsRowChangeEvent(((viw_ledgerRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viw_ledgerRemainsRowChanging != null)) {
                    this.viw_ledgerRemainsRowChanging(this, new viw_ledgerRemainsRowChangeEvent(((viw_ledgerRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viw_ledgerRemainsRowDeleted != null)) {
                    this.viw_ledgerRemainsRowDeleted(this, new viw_ledgerRemainsRowChangeEvent(((viw_ledgerRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viw_ledgerRemainsRowDeleting != null)) {
                    this.viw_ledgerRemainsRowDeleting(this, new viw_ledgerRemainsRowChangeEvent(((viw_ledgerRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeviw_ledgerRemainsRow(viw_ledgerRemainsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viw_ledgerRemainsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class viw_detailsCodesDataTable : global::System.Data.TypedTableBase<viw_detailsCodesRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columntitle;
            
            private global::System.Data.DataColumn columnkind;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsCodesDataTable() {
                this.TableName = "viw_detailsCodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_detailsCodesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected viw_detailsCodesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kindColumn {
                get {
                    return this.columnkind;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsCodesRow this[int index] {
                get {
                    return ((viw_detailsCodesRow)(this.Rows[index]));
                }
            }
            
            public event viw_detailsCodesRowChangeEventHandler viw_detailsCodesRowChanging;
            
            public event viw_detailsCodesRowChangeEventHandler viw_detailsCodesRowChanged;
            
            public event viw_detailsCodesRowChangeEventHandler viw_detailsCodesRowDeleting;
            
            public event viw_detailsCodesRowChangeEventHandler viw_detailsCodesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addviw_detailsCodesRow(viw_detailsCodesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsCodesRow Addviw_detailsCodesRow(int id, string title, string kind) {
                viw_detailsCodesRow rowviw_detailsCodesRow = ((viw_detailsCodesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        title,
                        kind};
                rowviw_detailsCodesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowviw_detailsCodesRow);
                return rowviw_detailsCodesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsCodesRow FindByid(int id) {
                return ((viw_detailsCodesRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                viw_detailsCodesDataTable cln = ((viw_detailsCodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new viw_detailsCodesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columntitle = base.Columns["title"];
                this.columnkind = base.Columns["kind"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columntitle = new global::System.Data.DataColumn("title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columnkind = new global::System.Data.DataColumn("kind", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkind);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columntitle.AllowDBNull = false;
                this.columntitle.MaxLength = 250;
                this.columnkind.ReadOnly = true;
                this.columnkind.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsCodesRow Newviw_detailsCodesRow() {
                return ((viw_detailsCodesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new viw_detailsCodesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(viw_detailsCodesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viw_detailsCodesRowChanged != null)) {
                    this.viw_detailsCodesRowChanged(this, new viw_detailsCodesRowChangeEvent(((viw_detailsCodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viw_detailsCodesRowChanging != null)) {
                    this.viw_detailsCodesRowChanging(this, new viw_detailsCodesRowChangeEvent(((viw_detailsCodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viw_detailsCodesRowDeleted != null)) {
                    this.viw_detailsCodesRowDeleted(this, new viw_detailsCodesRowChangeEvent(((viw_detailsCodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viw_detailsCodesRowDeleting != null)) {
                    this.viw_detailsCodesRowDeleting(this, new viw_detailsCodesRowChangeEvent(((viw_detailsCodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeviw_detailsCodesRow(viw_detailsCodesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "viw_detailsCodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class usersTableDataTable : global::System.Data.TypedTableBase<usersTableRow> {
            
            private global::System.Data.DataColumn columnuser_id;
            
            private global::System.Data.DataColumn columnuser_name;
            
            private global::System.Data.DataColumn columnuser_picIndex;
            
            private global::System.Data.DataColumn columnuser_picPath;
            
            private global::System.Data.DataColumn columnuser_limitString;
            
            private global::System.Data.DataColumn columnuser_limitType;
            
            private global::System.Data.DataColumn columnuser_password;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usersTableDataTable() {
                this.TableName = "usersTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal usersTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected usersTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_idColumn {
                get {
                    return this.columnuser_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_nameColumn {
                get {
                    return this.columnuser_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_picIndexColumn {
                get {
                    return this.columnuser_picIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_picPathColumn {
                get {
                    return this.columnuser_picPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_limitStringColumn {
                get {
                    return this.columnuser_limitString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_limitTypeColumn {
                get {
                    return this.columnuser_limitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_passwordColumn {
                get {
                    return this.columnuser_password;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usersTableRow this[int index] {
                get {
                    return ((usersTableRow)(this.Rows[index]));
                }
            }
            
            public event usersTableRowChangeEventHandler usersTableRowChanging;
            
            public event usersTableRowChangeEventHandler usersTableRowChanged;
            
            public event usersTableRowChangeEventHandler usersTableRowDeleting;
            
            public event usersTableRowChangeEventHandler usersTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddusersTableRow(usersTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usersTableRow AddusersTableRow(int user_id, string user_name, int user_picIndex, string user_picPath, string user_limitString, int user_limitType, string user_password) {
                usersTableRow rowusersTableRow = ((usersTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        user_id,
                        user_name,
                        user_picIndex,
                        user_picPath,
                        user_limitString,
                        user_limitType,
                        user_password};
                rowusersTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowusersTableRow);
                return rowusersTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                usersTableDataTable cln = ((usersTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new usersTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuser_id = base.Columns["user_id"];
                this.columnuser_name = base.Columns["user_name"];
                this.columnuser_picIndex = base.Columns["user_picIndex"];
                this.columnuser_picPath = base.Columns["user_picPath"];
                this.columnuser_limitString = base.Columns["user_limitString"];
                this.columnuser_limitType = base.Columns["user_limitType"];
                this.columnuser_password = base.Columns["user_password"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuser_id = new global::System.Data.DataColumn("user_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_id);
                this.columnuser_name = new global::System.Data.DataColumn("user_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_name);
                this.columnuser_picIndex = new global::System.Data.DataColumn("user_picIndex", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_picIndex);
                this.columnuser_picPath = new global::System.Data.DataColumn("user_picPath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_picPath);
                this.columnuser_limitString = new global::System.Data.DataColumn("user_limitString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_limitString);
                this.columnuser_limitType = new global::System.Data.DataColumn("user_limitType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_limitType);
                this.columnuser_password = new global::System.Data.DataColumn("user_password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_password);
                this.columnuser_id.AllowDBNull = false;
                this.columnuser_name.AllowDBNull = false;
                this.columnuser_name.MaxLength = 50;
                this.columnuser_picIndex.AllowDBNull = false;
                this.columnuser_picPath.MaxLength = 250;
                this.columnuser_limitString.AllowDBNull = false;
                this.columnuser_limitString.MaxLength = 250;
                this.columnuser_limitType.AllowDBNull = false;
                this.columnuser_password.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usersTableRow NewusersTableRow() {
                return ((usersTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new usersTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(usersTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.usersTableRowChanged != null)) {
                    this.usersTableRowChanged(this, new usersTableRowChangeEvent(((usersTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.usersTableRowChanging != null)) {
                    this.usersTableRowChanging(this, new usersTableRowChangeEvent(((usersTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.usersTableRowDeleted != null)) {
                    this.usersTableRowDeleted(this, new usersTableRowChangeEvent(((usersTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.usersTableRowDeleting != null)) {
                    this.usersTableRowDeleting(this, new usersTableRowChangeEvent(((usersTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveusersTableRow(usersTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PSDatabase5DataSet ds = new PSDatabase5DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "usersTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AccountsTableRow : global::System.Data.DataRow {
            
            private AccountsTableDataTable tableAccountsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAccountsTable = ((AccountsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accountID {
                get {
                    return ((int)(this[this.tableAccountsTable.accountIDColumn]));
                }
                set {
                    this[this.tableAccountsTable.accountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bankID {
                get {
                    return ((int)(this[this.tableAccountsTable.bankIDColumn]));
                }
                set {
                    this[this.tableAccountsTable.bankIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string temp {
                get {
                    try {
                        return ((string)(this[this.tableAccountsTable.tempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'temp\' in table \'AccountsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountsTable.tempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string account_chapterName {
                get {
                    try {
                        return ((string)(this[this.tableAccountsTable.account_chapterNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'account_chapterName\' in table \'AccountsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountsTable.account_chapterNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string account_chapterNo {
                get {
                    try {
                        return ((string)(this[this.tableAccountsTable.account_chapterNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'account_chapterNo\' in table \'AccountsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountsTable.account_chapterNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string account_number {
                get {
                    return ((string)(this[this.tableAccountsTable.account_numberColumn]));
                }
                set {
                    this[this.tableAccountsTable.account_numberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long account_amount {
                get {
                    return ((long)(this[this.tableAccountsTable.account_amountColumn]));
                }
                set {
                    this[this.tableAccountsTable.account_amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long account_remain {
                get {
                    return ((long)(this[this.tableAccountsTable.account_remainColumn]));
                }
                set {
                    this[this.tableAccountsTable.account_remainColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accountType_id {
                get {
                    return ((int)(this[this.tableAccountsTable.accountType_idColumn]));
                }
                set {
                    this[this.tableAccountsTable.accountType_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanksTableRow BanksTableRow {
                get {
                    return ((BanksTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_AccountsTable_BanksTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_AccountsTable_BanksTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempNull() {
                return this.IsNull(this.tableAccountsTable.tempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempNull() {
                this[this.tableAccountsTable.tempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaccount_chapterNameNull() {
                return this.IsNull(this.tableAccountsTable.account_chapterNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaccount_chapterNameNull() {
                this[this.tableAccountsTable.account_chapterNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaccount_chapterNoNull() {
                return this.IsNull(this.tableAccountsTable.account_chapterNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaccount_chapterNoNull() {
                this[this.tableAccountsTable.account_chapterNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesTableRow[] GetchequesTableRows() {
                if ((this.Table.ChildRelations["FK_chequesTable_AccountsTable"] == null)) {
                    return new chequesTableRow[0];
                }
                else {
                    return ((chequesTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_chequesTable_AccountsTable"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingDocsRow[] GetAccountingDocsRows() {
                if ((this.Table.ChildRelations["FK_AccountingDocs_AccountsTable"] == null)) {
                    return new AccountingDocsRow[0];
                }
                else {
                    return ((AccountingDocsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_AccountingDocs_AccountsTable"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public docsTableRow[] GetdocsTableRows() {
                if ((this.Table.ChildRelations["FK_docsTable_AccountsTable"] == null)) {
                    return new docsTableRow[0];
                }
                else {
                    return ((docsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_docsTable_AccountsTable"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detailsTableRow[] GetdetailsTableRows() {
                if ((this.Table.ChildRelations["FK_detailsTable_AccountsTable"] == null)) {
                    return new detailsTableRow[0];
                }
                else {
                    return ((detailsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_detailsTable_AccountsTable"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BanksTableRow : global::System.Data.DataRow {
            
            private BanksTableDataTable tableBanksTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BanksTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBanksTable = ((BanksTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bankID {
                get {
                    return ((int)(this[this.tableBanksTable.bankIDColumn]));
                }
                set {
                    this[this.tableBanksTable.bankIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bankName {
                get {
                    return ((string)(this[this.tableBanksTable.bankNameColumn]));
                }
                set {
                    this[this.tableBanksTable.bankNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string temp {
                get {
                    try {
                        return ((string)(this[this.tableBanksTable.tempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'temp\' in table \'BanksTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBanksTable.tempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempNull() {
                return this.IsNull(this.tableBanksTable.tempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempNull() {
                this[this.tableBanksTable.tempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountsTableRow[] GetAccountsTableRows() {
                if ((this.Table.ChildRelations["FK_AccountsTable_BanksTable"] == null)) {
                    return new AccountsTableRow[0];
                }
                else {
                    return ((AccountsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_AccountsTable_BanksTable"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class chequesTableRow : global::System.Data.DataRow {
            
            private chequesTableDataTable tablechequesTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal chequesTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablechequesTable = ((chequesTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int chequeID {
                get {
                    return ((int)(this[this.tablechequesTable.chequeIDColumn]));
                }
                set {
                    this[this.tablechequesTable.chequeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int personID {
                get {
                    return ((int)(this[this.tablechequesTable.personIDColumn]));
                }
                set {
                    this[this.tablechequesTable.personIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chequeNumber {
                get {
                    return ((string)(this[this.tablechequesTable.chequeNumberColumn]));
                }
                set {
                    this[this.tablechequesTable.chequeNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string issuanceDate {
                get {
                    return ((string)(this[this.tablechequesTable.issuanceDateColumn]));
                }
                set {
                    this[this.tablechequesTable.issuanceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string usanceDate {
                get {
                    return ((string)(this[this.tablechequesTable.usanceDateColumn]));
                }
                set {
                    this[this.tablechequesTable.usanceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accountID {
                get {
                    return ((int)(this[this.tablechequesTable.accountIDColumn]));
                }
                set {
                    this[this.tablechequesTable.accountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string isTo {
                get {
                    return ((string)(this[this.tablechequesTable.isToColumn]));
                }
                set {
                    this[this.tablechequesTable.isToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chequeComent {
                get {
                    try {
                        return ((string)(this[this.tablechequesTable.chequeComentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chequeComent\' in table \'chequesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechequesTable.chequeComentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long chequePrice {
                get {
                    try {
                        return ((long)(this[this.tablechequesTable.chequePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chequePrice\' in table \'chequesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechequesTable.chequePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chequeState {
                get {
                    return ((string)(this[this.tablechequesTable.chequeStateColumn]));
                }
                set {
                    this[this.tablechequesTable.chequeStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string temp {
                get {
                    try {
                        return ((string)(this[this.tablechequesTable.tempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'temp\' in table \'chequesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechequesTable.tempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool chequeIsMine {
                get {
                    return ((bool)(this[this.tablechequesTable.chequeIsMineColumn]));
                }
                set {
                    this[this.tablechequesTable.chequeIsMineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bankID {
                get {
                    try {
                        return ((int)(this[this.tablechequesTable.bankIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bankID\' in table \'chequesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechequesTable.bankIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDoc_id {
                get {
                    return ((long)(this[this.tablechequesTable.accDoc_idColumn]));
                }
                set {
                    this[this.tablechequesTable.accDoc_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personsTableRow personsTableRow {
                get {
                    return ((personsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_chequesTable_personsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_chequesTable_personsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountsTableRow AccountsTableRow {
                get {
                    return ((AccountsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_chequesTable_AccountsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_chequesTable_AccountsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingDocsRow AccountingDocsRow {
                get {
                    return ((AccountingDocsRow)(this.GetParentRow(this.Table.ParentRelations["FK_chequesTable_AccountingDocs"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_chequesTable_AccountingDocs"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IschequeComentNull() {
                return this.IsNull(this.tablechequesTable.chequeComentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetchequeComentNull() {
                this[this.tablechequesTable.chequeComentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IschequePriceNull() {
                return this.IsNull(this.tablechequesTable.chequePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetchequePriceNull() {
                this[this.tablechequesTable.chequePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempNull() {
                return this.IsNull(this.tablechequesTable.tempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempNull() {
                this[this.tablechequesTable.tempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbankIDNull() {
                return this.IsNull(this.tablechequesTable.bankIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbankIDNull() {
                this[this.tablechequesTable.bankIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class personsTableRow : global::System.Data.DataRow {
            
            private personsTableDataTable tablepersonsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal personsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepersonsTable = ((personsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int personID {
                get {
                    return ((int)(this[this.tablepersonsTable.personIDColumn]));
                }
                set {
                    this[this.tablepersonsTable.personIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personFamilyAndName {
                get {
                    return ((string)(this[this.tablepersonsTable.personFamilyAndNameColumn]));
                }
                set {
                    this[this.tablepersonsTable.personFamilyAndNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personelNumber {
                get {
                    try {
                        return ((string)(this[this.tablepersonsTable.personelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personelNumber\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.personelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nationalNumber {
                get {
                    try {
                        return ((string)(this[this.tablepersonsTable.nationalNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nationalNumber\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.nationalNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string job {
                get {
                    try {
                        return ((string)(this[this.tablepersonsTable.jobColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'job\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.jobColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fatherName {
                get {
                    try {
                        return ((string)(this[this.tablepersonsTable.fatherNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fatherName\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.fatherNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personNO {
                get {
                    try {
                        return ((string)(this[this.tablepersonsTable.personNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personNO\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.personNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personBorn {
                get {
                    try {
                        return ((string)(this[this.tablepersonsTable.personBornColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personBorn\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.personBornColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personPhone1 {
                get {
                    try {
                        return ((string)(this[this.tablepersonsTable.personPhone1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personPhone1\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.personPhone1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personPhone2 {
                get {
                    try {
                        return ((string)(this[this.tablepersonsTable.personPhone2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personPhone2\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.personPhone2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personAddress1 {
                get {
                    try {
                        return ((string)(this[this.tablepersonsTable.personAddress1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personAddress1\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.personAddress1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personAddress2 {
                get {
                    try {
                        return ((string)(this[this.tablepersonsTable.personAddress2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personAddress2\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.personAddress2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string beforeType {
                get {
                    try {
                        return ((string)(this[this.tablepersonsTable.beforeTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'beforeType\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.beforeTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long beforeRemainMoney {
                get {
                    try {
                        return ((long)(this[this.tablepersonsTable.beforeRemainMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'beforeRemainMoney\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.beforeRemainMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long indebtedPrice {
                get {
                    try {
                        return ((long)(this[this.tablepersonsTable.indebtedPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'indebtedPrice\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.indebtedPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long creditorPrice {
                get {
                    try {
                        return ((long)(this[this.tablepersonsTable.creditorPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'creditorPrice\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.creditorPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string temp {
                get {
                    try {
                        return ((string)(this[this.tablepersonsTable.tempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'temp\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.tempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string vehicleKind {
                get {
                    try {
                        return ((string)(this[this.tablepersonsTable.vehicleKindColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'vehicleKind\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.vehicleKindColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] personPic {
                get {
                    try {
                        return ((byte[])(this[this.tablepersonsTable.personPicColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personPic\' in table \'personsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersonsTable.personPicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool personForInfoPP {
                get {
                    return ((bool)(this[this.tablepersonsTable.personForInfoPPColumn]));
                }
                set {
                    this[this.tablepersonsTable.personForInfoPPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonelNumberNull() {
                return this.IsNull(this.tablepersonsTable.personelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonelNumberNull() {
                this[this.tablepersonsTable.personelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnationalNumberNull() {
                return this.IsNull(this.tablepersonsTable.nationalNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnationalNumberNull() {
                this[this.tablepersonsTable.nationalNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjobNull() {
                return this.IsNull(this.tablepersonsTable.jobColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjobNull() {
                this[this.tablepersonsTable.jobColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfatherNameNull() {
                return this.IsNull(this.tablepersonsTable.fatherNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfatherNameNull() {
                this[this.tablepersonsTable.fatherNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonNONull() {
                return this.IsNull(this.tablepersonsTable.personNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonNONull() {
                this[this.tablepersonsTable.personNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonBornNull() {
                return this.IsNull(this.tablepersonsTable.personBornColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonBornNull() {
                this[this.tablepersonsTable.personBornColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonPhone1Null() {
                return this.IsNull(this.tablepersonsTable.personPhone1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonPhone1Null() {
                this[this.tablepersonsTable.personPhone1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonPhone2Null() {
                return this.IsNull(this.tablepersonsTable.personPhone2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonPhone2Null() {
                this[this.tablepersonsTable.personPhone2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonAddress1Null() {
                return this.IsNull(this.tablepersonsTable.personAddress1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonAddress1Null() {
                this[this.tablepersonsTable.personAddress1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonAddress2Null() {
                return this.IsNull(this.tablepersonsTable.personAddress2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonAddress2Null() {
                this[this.tablepersonsTable.personAddress2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbeforeTypeNull() {
                return this.IsNull(this.tablepersonsTable.beforeTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbeforeTypeNull() {
                this[this.tablepersonsTable.beforeTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbeforeRemainMoneyNull() {
                return this.IsNull(this.tablepersonsTable.beforeRemainMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbeforeRemainMoneyNull() {
                this[this.tablepersonsTable.beforeRemainMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsindebtedPriceNull() {
                return this.IsNull(this.tablepersonsTable.indebtedPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetindebtedPriceNull() {
                this[this.tablepersonsTable.indebtedPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscreditorPriceNull() {
                return this.IsNull(this.tablepersonsTable.creditorPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcreditorPriceNull() {
                this[this.tablepersonsTable.creditorPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempNull() {
                return this.IsNull(this.tablepersonsTable.tempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempNull() {
                this[this.tablepersonsTable.tempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvehicleKindNull() {
                return this.IsNull(this.tablepersonsTable.vehicleKindColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvehicleKindNull() {
                this[this.tablepersonsTable.vehicleKindColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonPicNull() {
                return this.IsNull(this.tablepersonsTable.personPicColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonPicNull() {
                this[this.tablepersonsTable.personPicColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesTableRow[] GetchequesTableRows() {
                if ((this.Table.ChildRelations["FK_chequesTable_personsTable"] == null)) {
                    return new chequesTableRow[0];
                }
                else {
                    return ((chequesTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_chequesTable_personsTable"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsPersonsRow[] GetprojectsPersonsRows() {
                if ((this.Table.ChildRelations["FK_projectsPersons_personsTable"] == null)) {
                    return new projectsPersonsRow[0];
                }
                else {
                    return ((projectsPersonsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_projectsPersons_personsTable"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public docsTableRow[] GetdocsTableRows() {
                if ((this.Table.ChildRelations["FK_docsTable_personsTable"] == null)) {
                    return new docsTableRow[0];
                }
                else {
                    return ((docsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_docsTable_personsTable"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsTableRow[] GetpensionsTableRows() {
                if ((this.Table.ChildRelations["FK_pensionsTable_personsTable"] == null)) {
                    return new pensionsTableRow[0];
                }
                else {
                    return ((pensionsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_pensionsTable_personsTable"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detailsTableRow[] GetdetailsTableRows() {
                if ((this.Table.ChildRelations["FK_detailsTable_personsTable"] == null)) {
                    return new detailsTableRow[0];
                }
                else {
                    return ((detailsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_detailsTable_personsTable"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class projectsPersonsRow : global::System.Data.DataRow {
            
            private projectsPersonsDataTable tableprojectsPersons;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal projectsPersonsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableprojectsPersons = ((projectsPersonsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int projectID {
                get {
                    return ((int)(this[this.tableprojectsPersons.projectIDColumn]));
                }
                set {
                    this[this.tableprojectsPersons.projectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int personID {
                get {
                    return ((int)(this[this.tableprojectsPersons.personIDColumn]));
                }
                set {
                    this[this.tableprojectsPersons.personIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string temp {
                get {
                    try {
                        return ((string)(this[this.tableprojectsPersons.tempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'temp\' in table \'projectsPersons\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprojectsPersons.tempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personsTableRow personsTableRow {
                get {
                    return ((personsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_projectsPersons_personsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_projectsPersons_personsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsTableRow projectsTableRow {
                get {
                    return ((projectsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_projectsPersons_projectsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_projectsPersons_projectsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempNull() {
                return this.IsNull(this.tableprojectsPersons.tempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempNull() {
                this[this.tableprojectsPersons.tempColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class projectsTableRow : global::System.Data.DataRow {
            
            private projectsTableDataTable tableprojectsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal projectsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableprojectsTable = ((projectsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int projectID {
                get {
                    return ((int)(this[this.tableprojectsTable.projectIDColumn]));
                }
                set {
                    this[this.tableprojectsTable.projectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string projectTitle {
                get {
                    return ((string)(this[this.tableprojectsTable.projectTitleColumn]));
                }
                set {
                    this[this.tableprojectsTable.projectTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string projectComment {
                get {
                    try {
                        return ((string)(this[this.tableprojectsTable.projectCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'projectComment\' in table \'projectsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprojectsTable.projectCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string temp {
                get {
                    try {
                        return ((string)(this[this.tableprojectsTable.tempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'temp\' in table \'projectsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprojectsTable.tempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string projectMaster {
                get {
                    try {
                        return ((string)(this[this.tableprojectsTable.projectMasterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'projectMaster\' in table \'projectsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprojectsTable.projectMasterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string projectWorkRoomNumber {
                get {
                    try {
                        return ((string)(this[this.tableprojectsTable.projectWorkRoomNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'projectWorkRoomNumber\' in table \'projectsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprojectsTable.projectWorkRoomNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string projectType {
                get {
                    try {
                        return ((string)(this[this.tableprojectsTable.projectTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'projectType\' in table \'projectsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprojectsTable.projectTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprojectCommentNull() {
                return this.IsNull(this.tableprojectsTable.projectCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprojectCommentNull() {
                this[this.tableprojectsTable.projectCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempNull() {
                return this.IsNull(this.tableprojectsTable.tempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempNull() {
                this[this.tableprojectsTable.tempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprojectMasterNull() {
                return this.IsNull(this.tableprojectsTable.projectMasterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprojectMasterNull() {
                this[this.tableprojectsTable.projectMasterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprojectWorkRoomNumberNull() {
                return this.IsNull(this.tableprojectsTable.projectWorkRoomNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprojectWorkRoomNumberNull() {
                this[this.tableprojectsTable.projectWorkRoomNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprojectTypeNull() {
                return this.IsNull(this.tableprojectsTable.projectTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprojectTypeNull() {
                this[this.tableprojectsTable.projectTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsPersonsRow[] GetprojectsPersonsRows() {
                if ((this.Table.ChildRelations["FK_projectsPersons_projectsTable"] == null)) {
                    return new projectsPersonsRow[0];
                }
                else {
                    return ((projectsPersonsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_projectsPersons_projectsTable"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsTableRow[] GetpensionsTableRows() {
                if ((this.Table.ChildRelations["FK_pensionsTable_projectsTable"] == null)) {
                    return new pensionsTableRow[0];
                }
                else {
                    return ((pensionsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_pensionsTable_projectsTable"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public docsTableRow[] GetdocsTableRows() {
                if ((this.Table.ChildRelations["FK_docsTable_projectsTable"] == null)) {
                    return new docsTableRow[0];
                }
                else {
                    return ((docsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_docsTable_projectsTable"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detailsTableRow[] GetdetailsTableRows() {
                if ((this.Table.ChildRelations["FK_detailsTable_projectsTable"] == null)) {
                    return new detailsTableRow[0];
                }
                else {
                    return ((detailsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_detailsTable_projectsTable"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class spentDefRow : global::System.Data.DataRow {
            
            private spentDefDataTable tablespentDef;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spentDefRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablespentDef = ((spentDefDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentDefID {
                get {
                    return ((int)(this[this.tablespentDef.spentDefIDColumn]));
                }
                set {
                    this[this.tablespentDef.spentDefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentMasterID {
                get {
                    return ((int)(this[this.tablespentDef.spentMasterIDColumn]));
                }
                set {
                    this[this.tablespentDef.spentMasterIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string spentDefName {
                get {
                    return ((string)(this[this.tablespentDef.spentDefNameColumn]));
                }
                set {
                    this[this.tablespentDef.spentDefNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string temp {
                get {
                    try {
                        return ((string)(this[this.tablespentDef.tempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'temp\' in table \'spentDef\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespentDef.tempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentMasterRow spentMasterRow {
                get {
                    return ((spentMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_spentDef_spentMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_spentDef_spentMaster"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempNull() {
                return this.IsNull(this.tablespentDef.tempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempNull() {
                this[this.tablespentDef.tempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoiceItemsTableRow[] GetinvoiceItemsTableRows() {
                if ((this.Table.ChildRelations["FK_invoiceItemsTable_spentDef"] == null)) {
                    return new invoiceItemsTableRow[0];
                }
                else {
                    return ((invoiceItemsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_invoiceItemsTable_spentDef"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class spentMasterRow : global::System.Data.DataRow {
            
            private spentMasterDataTable tablespentMaster;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spentMasterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablespentMaster = ((spentMasterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentMasterID {
                get {
                    return ((int)(this[this.tablespentMaster.spentMasterIDColumn]));
                }
                set {
                    this[this.tablespentMaster.spentMasterIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string spentMasterName {
                get {
                    return ((string)(this[this.tablespentMaster.spentMasterNameColumn]));
                }
                set {
                    this[this.tablespentMaster.spentMasterNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentMaster_detailType {
                get {
                    return ((int)(this[this.tablespentMaster.spentMaster_detailTypeColumn]));
                }
                set {
                    this[this.tablespentMaster.spentMaster_detailTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool spentMaster_required {
                get {
                    return ((bool)(this[this.tablespentMaster.spentMaster_requiredColumn]));
                }
                set {
                    this[this.tablespentMaster.spentMaster_requiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentMaster_kind {
                get {
                    try {
                        return ((int)(this[this.tablespentMaster.spentMaster_kindColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'spentMaster_kind\' in table \'spentMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespentMaster.spentMaster_kindColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentGroup_id {
                get {
                    return ((int)(this[this.tablespentMaster.spentGroup_idColumn]));
                }
                set {
                    this[this.tablespentMaster.spentGroup_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentGroupsTableRow spentGroupsTableRow {
                get {
                    return ((spentGroupsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_spentMaster_spentGroupsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_spentMaster_spentGroupsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsspentMaster_kindNull() {
                return this.IsNull(this.tablespentMaster.spentMaster_kindColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetspentMaster_kindNull() {
                this[this.tablespentMaster.spentMaster_kindColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentDefRow[] GetspentDefRows() {
                if ((this.Table.ChildRelations["FK_spentDef_spentMaster"] == null)) {
                    return new spentDefRow[0];
                }
                else {
                    return ((spentDefRow[])(base.GetChildRows(this.Table.ChildRelations["FK_spentDef_spentMaster"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detailsTableRow[] GetdetailsTableRows() {
                if ((this.Table.ChildRelations["FK_detailsTable_spentMaster"] == null)) {
                    return new detailsTableRow[0];
                }
                else {
                    return ((detailsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_detailsTable_spentMaster"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class detractDefRow : global::System.Data.DataRow {
            
            private detractDefDataTable tabledetractDef;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal detractDefRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledetractDef = ((detractDefDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int detractDefID {
                get {
                    return ((int)(this[this.tabledetractDef.detractDefIDColumn]));
                }
                set {
                    this[this.tabledetractDef.detractDefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pensionID {
                get {
                    return ((int)(this[this.tabledetractDef.pensionIDColumn]));
                }
                set {
                    this[this.tabledetractDef.pensionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string defName {
                get {
                    return ((string)(this[this.tabledetractDef.defNameColumn]));
                }
                set {
                    this[this.tabledetractDef.defNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string temp {
                get {
                    try {
                        return ((string)(this[this.tabledetractDef.tempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'temp\' in table \'detractDef\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledetractDef.tempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long defValue {
                get {
                    return ((long)(this[this.tabledetractDef.defValueColumn]));
                }
                set {
                    this[this.tabledetractDef.defValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsTableRow pensionsTableRow {
                get {
                    return ((pensionsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_detractDef_pensionsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_detractDef_pensionsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempNull() {
                return this.IsNull(this.tabledetractDef.tempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempNull() {
                this[this.tabledetractDef.tempColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class pensionDefRow : global::System.Data.DataRow {
            
            private pensionDefDataTable tablepensionDef;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pensionDefRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepensionDef = ((pensionDefDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pensionDefID {
                get {
                    return ((int)(this[this.tablepensionDef.pensionDefIDColumn]));
                }
                set {
                    this[this.tablepensionDef.pensionDefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pensionID {
                get {
                    return ((int)(this[this.tablepensionDef.pensionIDColumn]));
                }
                set {
                    this[this.tablepensionDef.pensionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string temp {
                get {
                    try {
                        return ((string)(this[this.tablepensionDef.tempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'temp\' in table \'pensionDef\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepensionDef.tempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pensionName {
                get {
                    try {
                        return ((string)(this[this.tablepensionDef.pensionNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pensionName\' in table \'pensionDef\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepensionDef.pensionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long pensionValue {
                get {
                    try {
                        return ((long)(this[this.tablepensionDef.pensionValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pensionValue\' in table \'pensionDef\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepensionDef.pensionValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string detractName {
                get {
                    try {
                        return ((string)(this[this.tablepensionDef.detractNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'detractName\' in table \'pensionDef\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepensionDef.detractNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long detractValue {
                get {
                    try {
                        return ((long)(this[this.tablepensionDef.detractValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'detractValue\' in table \'pensionDef\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepensionDef.detractValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsTableRow pensionsTableRow {
                get {
                    return ((pensionsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_pensionDef_pensionsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_pensionDef_pensionsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempNull() {
                return this.IsNull(this.tablepensionDef.tempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempNull() {
                this[this.tablepensionDef.tempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspensionNameNull() {
                return this.IsNull(this.tablepensionDef.pensionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpensionNameNull() {
                this[this.tablepensionDef.pensionNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspensionValueNull() {
                return this.IsNull(this.tablepensionDef.pensionValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpensionValueNull() {
                this[this.tablepensionDef.pensionValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdetractNameNull() {
                return this.IsNull(this.tablepensionDef.detractNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdetractNameNull() {
                this[this.tablepensionDef.detractNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdetractValueNull() {
                return this.IsNull(this.tablepensionDef.detractValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdetractValueNull() {
                this[this.tablepensionDef.detractValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class pensionsTableRow : global::System.Data.DataRow {
            
            private pensionsTableDataTable tablepensionsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pensionsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepensionsTable = ((pensionsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pensionID {
                get {
                    return ((int)(this[this.tablepensionsTable.pensionIDColumn]));
                }
                set {
                    this[this.tablepensionsTable.pensionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int personID {
                get {
                    return ((int)(this[this.tablepensionsTable.personIDColumn]));
                }
                set {
                    this[this.tablepensionsTable.personIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int projectID {
                get {
                    return ((int)(this[this.tablepensionsTable.projectIDColumn]));
                }
                set {
                    this[this.tablepensionsTable.projectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long basePension {
                get {
                    return ((long)(this[this.tablepensionsTable.basePensionColumn]));
                }
                set {
                    this[this.tablepensionsTable.basePensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long overtimePension {
                get {
                    return ((long)(this[this.tablepensionsTable.overtimePensionColumn]));
                }
                set {
                    this[this.tablepensionsTable.overtimePensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long taxDetraction {
                get {
                    return ((long)(this[this.tablepensionsTable.taxDetractionColumn]));
                }
                set {
                    this[this.tablepensionsTable.taxDetractionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long insuranceDetraction {
                get {
                    return ((long)(this[this.tablepensionsTable.insuranceDetractionColumn]));
                }
                set {
                    this[this.tablepensionsTable.insuranceDetractionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int workedDays {
                get {
                    return ((int)(this[this.tablepensionsTable.workedDaysColumn]));
                }
                set {
                    this[this.tablepensionsTable.workedDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int overtimeHours {
                get {
                    return ((int)(this[this.tablepensionsTable.overtimeHoursColumn]));
                }
                set {
                    this[this.tablepensionsTable.overtimeHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string temp {
                get {
                    try {
                        return ((string)(this[this.tablepensionsTable.tempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'temp\' in table \'pensionsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepensionsTable.tempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dDate {
                get {
                    return ((string)(this[this.tablepensionsTable.dDateColumn]));
                }
                set {
                    this[this.tablepensionsTable.dDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personsTableRow personsTableRow {
                get {
                    return ((personsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_pensionsTable_personsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_pensionsTable_personsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsTableRow projectsTableRow {
                get {
                    return ((projectsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_pensionsTable_projectsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_pensionsTable_projectsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempNull() {
                return this.IsNull(this.tablepensionsTable.tempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempNull() {
                this[this.tablepensionsTable.tempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractDefRow[] GetdetractDefRows() {
                if ((this.Table.ChildRelations["FK_detractDef_pensionsTable"] == null)) {
                    return new detractDefRow[0];
                }
                else {
                    return ((detractDefRow[])(base.GetChildRows(this.Table.ChildRelations["FK_detractDef_pensionsTable"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionDefRow[] GetpensionDefRows() {
                if ((this.Table.ChildRelations["FK_pensionDef_pensionsTable"] == null)) {
                    return new pensionDefRow[0];
                }
                else {
                    return ((pensionDefRow[])(base.GetChildRows(this.Table.ChildRelations["FK_pensionDef_pensionsTable"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingDocsRow[] GetAccountingDocsRows() {
                if ((this.Table.ChildRelations["FK_AccountingDocs_pensionsTable"] == null)) {
                    return new AccountingDocsRow[0];
                }
                else {
                    return ((AccountingDocsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_AccountingDocs_pensionsTable"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class docsTableRow : global::System.Data.DataRow {
            
            private docsTableDataTable tabledocsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal docsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledocsTable = ((docsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int docID {
                get {
                    return ((int)(this[this.tabledocsTable.docIDColumn]));
                }
                set {
                    this[this.tabledocsTable.docIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long price {
                get {
                    return ((long)(this[this.tabledocsTable.priceColumn]));
                }
                set {
                    this[this.tabledocsTable.priceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string docType {
                get {
                    return ((string)(this[this.tabledocsTable.docTypeColumn]));
                }
                set {
                    this[this.tabledocsTable.docTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string docComment {
                get {
                    try {
                        return ((string)(this[this.tabledocsTable.docCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'docComment\' in table \'docsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledocsTable.docCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string temp {
                get {
                    try {
                        return ((string)(this[this.tabledocsTable.tempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'temp\' in table \'docsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledocsTable.tempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int projectID {
                get {
                    return ((int)(this[this.tabledocsTable.projectIDColumn]));
                }
                set {
                    this[this.tabledocsTable.projectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int personID {
                get {
                    try {
                        return ((int)(this[this.tabledocsTable.personIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personID\' in table \'docsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledocsTable.personIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dDate {
                get {
                    return ((string)(this[this.tabledocsTable.dDateColumn]));
                }
                set {
                    this[this.tabledocsTable.dDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bankID {
                get {
                    try {
                        return ((int)(this[this.tabledocsTable.bankIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bankID\' in table \'docsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledocsTable.bankIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accountID {
                get {
                    try {
                        return ((int)(this[this.tabledocsTable.accountIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accountID\' in table \'docsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledocsTable.accountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personsTableRow personsTableRow {
                get {
                    return ((personsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_docsTable_personsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_docsTable_personsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsTableRow projectsTableRow {
                get {
                    return ((projectsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_docsTable_projectsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_docsTable_projectsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountsTableRow AccountsTableRow {
                get {
                    return ((AccountsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_docsTable_AccountsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_docsTable_AccountsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdocCommentNull() {
                return this.IsNull(this.tabledocsTable.docCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdocCommentNull() {
                this[this.tabledocsTable.docCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempNull() {
                return this.IsNull(this.tabledocsTable.tempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempNull() {
                this[this.tabledocsTable.tempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonIDNull() {
                return this.IsNull(this.tabledocsTable.personIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonIDNull() {
                this[this.tabledocsTable.personIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbankIDNull() {
                return this.IsNull(this.tabledocsTable.bankIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbankIDNull() {
                this[this.tabledocsTable.bankIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccountIDNull() {
                return this.IsNull(this.tabledocsTable.accountIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccountIDNull() {
                this[this.tabledocsTable.accountIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View1Row : global::System.Data.DataRow {
            
            private View1DataTable tableView1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView1 = ((View1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chequeNumber {
                get {
                    return ((string)(this[this.tableView1.chequeNumberColumn]));
                }
                set {
                    this[this.tableView1.chequeNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string issuanceDate {
                get {
                    return ((string)(this[this.tableView1.issuanceDateColumn]));
                }
                set {
                    this[this.tableView1.issuanceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string usanceDate {
                get {
                    return ((string)(this[this.tableView1.usanceDateColumn]));
                }
                set {
                    this[this.tableView1.usanceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string projectTitle {
                get {
                    return ((string)(this[this.tableView1.projectTitleColumn]));
                }
                set {
                    this[this.tableView1.projectTitleColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class pensionsViewRow : global::System.Data.DataRow {
            
            private pensionsViewDataTable tablepensionsView;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pensionsViewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepensionsView = ((pensionsViewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personelNumber {
                get {
                    try {
                        return ((string)(this[this.tablepensionsView.personelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personelNumber\' in table \'pensionsView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepensionsView.personelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personFamilyAndName {
                get {
                    return ((string)(this[this.tablepensionsView.personFamilyAndNameColumn]));
                }
                set {
                    this[this.tablepensionsView.personFamilyAndNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nationalNumber {
                get {
                    try {
                        return ((string)(this[this.tablepensionsView.nationalNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nationalNumber\' in table \'pensionsView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepensionsView.nationalNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fatherName {
                get {
                    try {
                        return ((string)(this[this.tablepensionsView.fatherNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fatherName\' in table \'pensionsView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepensionsView.fatherNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string job {
                get {
                    try {
                        return ((string)(this[this.tablepensionsView.jobColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'job\' in table \'pensionsView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepensionsView.jobColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string projectTitle {
                get {
                    return ((string)(this[this.tablepensionsView.projectTitleColumn]));
                }
                set {
                    this[this.tablepensionsView.projectTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long basePension {
                get {
                    return ((long)(this[this.tablepensionsView.basePensionColumn]));
                }
                set {
                    this[this.tablepensionsView.basePensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long overtimePension {
                get {
                    return ((long)(this[this.tablepensionsView.overtimePensionColumn]));
                }
                set {
                    this[this.tablepensionsView.overtimePensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long taxDetraction {
                get {
                    return ((long)(this[this.tablepensionsView.taxDetractionColumn]));
                }
                set {
                    this[this.tablepensionsView.taxDetractionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long insuranceDetraction {
                get {
                    return ((long)(this[this.tablepensionsView.insuranceDetractionColumn]));
                }
                set {
                    this[this.tablepensionsView.insuranceDetractionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int workedDays {
                get {
                    return ((int)(this[this.tablepensionsView.workedDaysColumn]));
                }
                set {
                    this[this.tablepensionsView.workedDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int overtimeHours {
                get {
                    return ((int)(this[this.tablepensionsView.overtimeHoursColumn]));
                }
                set {
                    this[this.tablepensionsView.overtimeHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personNO {
                get {
                    try {
                        return ((string)(this[this.tablepensionsView.personNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personNO\' in table \'pensionsView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepensionsView.personNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personBorn {
                get {
                    try {
                        return ((string)(this[this.tablepensionsView.personBornColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personBorn\' in table \'pensionsView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepensionsView.personBornColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dDate {
                get {
                    return ((string)(this[this.tablepensionsView.dDateColumn]));
                }
                set {
                    this[this.tablepensionsView.dDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pensionID {
                get {
                    return ((int)(this[this.tablepensionsView.pensionIDColumn]));
                }
                set {
                    this[this.tablepensionsView.pensionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonelNumberNull() {
                return this.IsNull(this.tablepensionsView.personelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonelNumberNull() {
                this[this.tablepensionsView.personelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnationalNumberNull() {
                return this.IsNull(this.tablepensionsView.nationalNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnationalNumberNull() {
                this[this.tablepensionsView.nationalNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfatherNameNull() {
                return this.IsNull(this.tablepensionsView.fatherNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfatherNameNull() {
                this[this.tablepensionsView.fatherNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjobNull() {
                return this.IsNull(this.tablepensionsView.jobColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjobNull() {
                this[this.tablepensionsView.jobColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonNONull() {
                return this.IsNull(this.tablepensionsView.personNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonNONull() {
                this[this.tablepensionsView.personNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonBornNull() {
                return this.IsNull(this.tablepensionsView.personBornColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonBornNull() {
                this[this.tablepensionsView.personBornColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class INReceiptViewRow : global::System.Data.DataRow {
            
            private INReceiptViewDataTable tableINReceiptView;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal INReceiptViewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableINReceiptView = ((INReceiptViewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personFamilyAndName {
                get {
                    return ((string)(this[this.tableINReceiptView.personFamilyAndNameColumn]));
                }
                set {
                    this[this.tableINReceiptView.personFamilyAndNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dDate {
                get {
                    return ((string)(this[this.tableINReceiptView.dDateColumn]));
                }
                set {
                    this[this.tableINReceiptView.dDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long price {
                get {
                    return ((long)(this[this.tableINReceiptView.priceColumn]));
                }
                set {
                    this[this.tableINReceiptView.priceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string docComment {
                get {
                    try {
                        return ((string)(this[this.tableINReceiptView.docCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'docComment\' in table \'INReceiptView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINReceiptView.docCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int docID {
                get {
                    return ((int)(this[this.tableINReceiptView.docIDColumn]));
                }
                set {
                    this[this.tableINReceiptView.docIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fatherName {
                get {
                    try {
                        return ((string)(this[this.tableINReceiptView.fatherNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fatherName\' in table \'INReceiptView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINReceiptView.fatherNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personNO {
                get {
                    try {
                        return ((string)(this[this.tableINReceiptView.personNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personNO\' in table \'INReceiptView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINReceiptView.personNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personBorn {
                get {
                    try {
                        return ((string)(this[this.tableINReceiptView.personBornColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personBorn\' in table \'INReceiptView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINReceiptView.personBornColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdocCommentNull() {
                return this.IsNull(this.tableINReceiptView.docCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdocCommentNull() {
                this[this.tableINReceiptView.docCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfatherNameNull() {
                return this.IsNull(this.tableINReceiptView.fatherNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfatherNameNull() {
                this[this.tableINReceiptView.fatherNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonNONull() {
                return this.IsNull(this.tableINReceiptView.personNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonNONull() {
                this[this.tableINReceiptView.personNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonBornNull() {
                return this.IsNull(this.tableINReceiptView.personBornColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonBornNull() {
                this[this.tableINReceiptView.personBornColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class chequesViewRow : global::System.Data.DataRow {
            
            private chequesViewDataTable tablechequesView;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal chequesViewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablechequesView = ((chequesViewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chequeNumber {
                get {
                    return ((string)(this[this.tablechequesView.chequeNumberColumn]));
                }
                set {
                    this[this.tablechequesView.chequeNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bankName {
                get {
                    return ((string)(this[this.tablechequesView.bankNameColumn]));
                }
                set {
                    this[this.tablechequesView.bankNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long chequePrice {
                get {
                    try {
                        return ((long)(this[this.tablechequesView.chequePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chequePrice\' in table \'chequesView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechequesView.chequePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string usanceDate {
                get {
                    return ((string)(this[this.tablechequesView.usanceDateColumn]));
                }
                set {
                    this[this.tablechequesView.usanceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDoc_id {
                get {
                    return ((long)(this[this.tablechequesView.accDoc_idColumn]));
                }
                set {
                    this[this.tablechequesView.accDoc_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IschequePriceNull() {
                return this.IsNull(this.tablechequesView.chequePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetchequePriceNull() {
                this[this.tablechequesView.chequePriceColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class detractsViewRow : global::System.Data.DataRow {
            
            private detractsViewDataTable tabledetractsView;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal detractsViewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledetractsView = ((detractsViewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string defName {
                get {
                    return ((string)(this[this.tabledetractsView.defNameColumn]));
                }
                set {
                    this[this.tabledetractsView.defNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long defValue {
                get {
                    return ((long)(this[this.tabledetractsView.defValueColumn]));
                }
                set {
                    this[this.tabledetractsView.defValueColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class receiptOUTRow : global::System.Data.DataRow {
            
            private receiptOUTDataTable tablereceiptOUT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal receiptOUTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablereceiptOUT = ((receiptOUTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personFamilyAndName {
                get {
                    return ((string)(this[this.tablereceiptOUT.personFamilyAndNameColumn]));
                }
                set {
                    this[this.tablereceiptOUT.personFamilyAndNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fatherName {
                get {
                    try {
                        return ((string)(this[this.tablereceiptOUT.fatherNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fatherName\' in table \'receiptOUT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereceiptOUT.fatherNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personBorn {
                get {
                    try {
                        return ((string)(this[this.tablereceiptOUT.personBornColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personBorn\' in table \'receiptOUT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereceiptOUT.personBornColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personNO {
                get {
                    try {
                        return ((string)(this[this.tablereceiptOUT.personNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personNO\' in table \'receiptOUT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereceiptOUT.personNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long price {
                get {
                    return ((long)(this[this.tablereceiptOUT.priceColumn]));
                }
                set {
                    this[this.tablereceiptOUT.priceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfatherNameNull() {
                return this.IsNull(this.tablereceiptOUT.fatherNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfatherNameNull() {
                this[this.tablereceiptOUT.fatherNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonBornNull() {
                return this.IsNull(this.tablereceiptOUT.personBornColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonBornNull() {
                this[this.tablereceiptOUT.personBornColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonNONull() {
                return this.IsNull(this.tablereceiptOUT.personNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonNONull() {
                this[this.tablereceiptOUT.personNOColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class defsViewRow : global::System.Data.DataRow {
            
            private defsViewDataTable tabledefsView;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal defsViewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledefsView = ((defsViewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pensionName {
                get {
                    try {
                        return ((string)(this[this.tabledefsView.pensionNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pensionName\' in table \'defsView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledefsView.pensionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long pensionValue {
                get {
                    try {
                        return ((long)(this[this.tabledefsView.pensionValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pensionValue\' in table \'defsView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledefsView.pensionValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string detractName {
                get {
                    try {
                        return ((string)(this[this.tabledefsView.detractNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'detractName\' in table \'defsView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledefsView.detractNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long detractValue {
                get {
                    try {
                        return ((long)(this[this.tabledefsView.detractValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'detractValue\' in table \'defsView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledefsView.detractValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspensionNameNull() {
                return this.IsNull(this.tabledefsView.pensionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpensionNameNull() {
                this[this.tabledefsView.pensionNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspensionValueNull() {
                return this.IsNull(this.tabledefsView.pensionValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpensionValueNull() {
                this[this.tabledefsView.pensionValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdetractNameNull() {
                return this.IsNull(this.tabledefsView.detractNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdetractNameNull() {
                this[this.tabledefsView.detractNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdetractValueNull() {
                return this.IsNull(this.tabledefsView.detractValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdetractValueNull() {
                this[this.tabledefsView.detractValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class accountTypesTableRow : global::System.Data.DataRow {
            
            private accountTypesTableDataTable tableaccountTypesTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal accountTypesTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableaccountTypesTable = ((accountTypesTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal accountType_id {
                get {
                    return ((decimal)(this[this.tableaccountTypesTable.accountType_idColumn]));
                }
                set {
                    this[this.tableaccountTypesTable.accountType_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accountType_Title {
                get {
                    return ((string)(this[this.tableaccountTypesTable.accountType_TitleColumn]));
                }
                set {
                    this[this.tableaccountTypesTable.accountType_TitleColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AccountingDocsRow : global::System.Data.DataRow {
            
            private AccountingDocsDataTable tableAccountingDocs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountingDocsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAccountingDocs = ((AccountingDocsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDoc_id {
                get {
                    return ((long)(this[this.tableAccountingDocs.accDoc_idColumn]));
                }
                set {
                    this[this.tableAccountingDocs.accDoc_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pensionID {
                get {
                    return ((int)(this[this.tableAccountingDocs.pensionIDColumn]));
                }
                set {
                    this[this.tableAccountingDocs.pensionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accDoc_comment {
                get {
                    return ((string)(this[this.tableAccountingDocs.accDoc_commentColumn]));
                }
                set {
                    this[this.tableAccountingDocs.accDoc_commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accDoc_date {
                get {
                    return ((string)(this[this.tableAccountingDocs.accDoc_dateColumn]));
                }
                set {
                    this[this.tableAccountingDocs.accDoc_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tempo {
                get {
                    try {
                        return ((string)(this[this.tableAccountingDocs.tempoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempo\' in table \'AccountingDocs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountingDocs.tempoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long docID {
                get {
                    return ((long)(this[this.tableAccountingDocs.docIDColumn]));
                }
                set {
                    this[this.tableAccountingDocs.docIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long invoice_id {
                get {
                    try {
                        return ((long)(this[this.tableAccountingDocs.invoice_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_id\' in table \'AccountingDocs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountingDocs.invoice_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDoc_price {
                get {
                    try {
                        return ((long)(this[this.tableAccountingDocs.accDoc_priceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDoc_price\' in table \'AccountingDocs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountingDocs.accDoc_priceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accountID {
                get {
                    try {
                        return ((int)(this[this.tableAccountingDocs.accountIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accountID\' in table \'AccountingDocs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountingDocs.accountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool accDoc_isItTemporary {
                get {
                    try {
                        return ((bool)(this[this.tableAccountingDocs.accDoc_isItTemporaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDoc_isItTemporary\' in table \'AccountingDocs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountingDocs.accDoc_isItTemporaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsTableRow pensionsTableRow {
                get {
                    return ((pensionsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_AccountingDocs_pensionsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_AccountingDocs_pensionsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoicesTableRow invoicesTableRow {
                get {
                    return ((invoicesTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_AccountingDocs_invoicesTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_AccountingDocs_invoicesTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountsTableRow AccountsTableRow {
                get {
                    return ((AccountsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_AccountingDocs_AccountsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_AccountingDocs_AccountsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempoNull() {
                return this.IsNull(this.tableAccountingDocs.tempoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempoNull() {
                this[this.tableAccountingDocs.tempoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_idNull() {
                return this.IsNull(this.tableAccountingDocs.invoice_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_idNull() {
                this[this.tableAccountingDocs.invoice_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDoc_priceNull() {
                return this.IsNull(this.tableAccountingDocs.accDoc_priceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDoc_priceNull() {
                this[this.tableAccountingDocs.accDoc_priceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccountIDNull() {
                return this.IsNull(this.tableAccountingDocs.accountIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccountIDNull() {
                this[this.tableAccountingDocs.accountIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDoc_isItTemporaryNull() {
                return this.IsNull(this.tableAccountingDocs.accDoc_isItTemporaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDoc_isItTemporaryNull() {
                this[this.tableAccountingDocs.accDoc_isItTemporaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accDocEventsTableRow[] GetaccDocEventsTableRows() {
                if ((this.Table.ChildRelations["FK_accDocEventsTable_AccountingDocs"] == null)) {
                    return new accDocEventsTableRow[0];
                }
                else {
                    return ((accDocEventsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_accDocEventsTable_AccountingDocs"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesTableRow[] GetchequesTableRows() {
                if ((this.Table.ChildRelations["FK_chequesTable_AccountingDocs"] == null)) {
                    return new chequesTableRow[0];
                }
                else {
                    return ((chequesTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_chequesTable_AccountingDocs"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class accDocEventsTableRow : global::System.Data.DataRow {
            
            private accDocEventsTableDataTable tableaccDocEventsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal accDocEventsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableaccDocEventsTable = ((accDocEventsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accDocEvent_id {
                get {
                    return ((int)(this[this.tableaccDocEventsTable.accDocEvent_idColumn]));
                }
                set {
                    this[this.tableaccDocEventsTable.accDocEvent_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDoc_id {
                get {
                    return ((long)(this[this.tableaccDocEventsTable.accDoc_idColumn]));
                }
                set {
                    this[this.tableaccDocEventsTable.accDoc_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDocEvent_retail {
                get {
                    try {
                        return ((long)(this[this.tableaccDocEventsTable.accDocEvent_retailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDocEvent_retail\' in table \'accDocEventsTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableaccDocEventsTable.accDocEvent_retailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDocEvent_indebted {
                get {
                    try {
                        return ((long)(this[this.tableaccDocEventsTable.accDocEvent_indebtedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDocEvent_indebted\' in table \'accDocEventsTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableaccDocEventsTable.accDocEvent_indebtedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDocEvent_creditor {
                get {
                    try {
                        return ((long)(this[this.tableaccDocEventsTable.accDocEvent_creditorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDocEvent_creditor\' in table \'accDocEventsTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableaccDocEventsTable.accDocEvent_creditorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accDocEvent_row {
                get {
                    return ((int)(this[this.tableaccDocEventsTable.accDocEvent_rowColumn]));
                }
                set {
                    this[this.tableaccDocEventsTable.accDocEvent_rowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool accDocEvent_itIsBank {
                get {
                    return ((bool)(this[this.tableaccDocEventsTable.accDocEvent_itIsBankColumn]));
                }
                set {
                    this[this.tableaccDocEventsTable.accDocEvent_itIsBankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool accDocEvent_itIsIndebted {
                get {
                    return ((bool)(this[this.tableaccDocEventsTable.accDocEvent_itIsIndebtedColumn]));
                }
                set {
                    this[this.tableaccDocEventsTable.accDocEvent_itIsIndebtedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accDocEvent_detectID {
                get {
                    try {
                        return ((int)(this[this.tableaccDocEventsTable.accDocEvent_detectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDocEvent_detectID\' in table \'accDocEventsTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableaccDocEventsTable.accDocEvent_detectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int detailID {
                get {
                    return ((int)(this[this.tableaccDocEventsTable.detailIDColumn]));
                }
                set {
                    this[this.tableaccDocEventsTable.detailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingDocsRow AccountingDocsRow {
                get {
                    return ((AccountingDocsRow)(this.GetParentRow(this.Table.ParentRelations["FK_accDocEventsTable_AccountingDocs"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_accDocEventsTable_AccountingDocs"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detailsTableRow detailsTableRow {
                get {
                    return ((detailsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_accDocEventsTable_detailsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_accDocEventsTable_detailsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDocEvent_retailNull() {
                return this.IsNull(this.tableaccDocEventsTable.accDocEvent_retailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDocEvent_retailNull() {
                this[this.tableaccDocEventsTable.accDocEvent_retailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDocEvent_indebtedNull() {
                return this.IsNull(this.tableaccDocEventsTable.accDocEvent_indebtedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDocEvent_indebtedNull() {
                this[this.tableaccDocEventsTable.accDocEvent_indebtedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDocEvent_creditorNull() {
                return this.IsNull(this.tableaccDocEventsTable.accDocEvent_creditorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDocEvent_creditorNull() {
                this[this.tableaccDocEventsTable.accDocEvent_creditorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDocEvent_detectIDNull() {
                return this.IsNull(this.tableaccDocEventsTable.accDocEvent_detectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDocEvent_detectIDNull() {
                this[this.tableaccDocEventsTable.accDocEvent_detectIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class invoiceItemsTableRow : global::System.Data.DataRow {
            
            private invoiceItemsTableDataTable tableinvoiceItemsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal invoiceItemsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableinvoiceItemsTable = ((invoiceItemsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int invoiceItem_id {
                get {
                    return ((int)(this[this.tableinvoiceItemsTable.invoiceItem_idColumn]));
                }
                set {
                    this[this.tableinvoiceItemsTable.invoiceItem_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long invoice_id {
                get {
                    return ((long)(this[this.tableinvoiceItemsTable.invoice_idColumn]));
                }
                set {
                    this[this.tableinvoiceItemsTable.invoice_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int invoiceItem_row {
                get {
                    return ((int)(this[this.tableinvoiceItemsTable.invoiceItem_rowColumn]));
                }
                set {
                    this[this.tableinvoiceItemsTable.invoiceItem_rowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int invoiceItem_amount {
                get {
                    return ((int)(this[this.tableinvoiceItemsTable.invoiceItem_amountColumn]));
                }
                set {
                    this[this.tableinvoiceItemsTable.invoiceItem_amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long invoiceItem_phi {
                get {
                    return ((long)(this[this.tableinvoiceItemsTable.invoiceItem_phiColumn]));
                }
                set {
                    this[this.tableinvoiceItemsTable.invoiceItem_phiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long invoiceItem_total {
                get {
                    return ((long)(this[this.tableinvoiceItemsTable.invoiceItem_totalColumn]));
                }
                set {
                    this[this.tableinvoiceItemsTable.invoiceItem_totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentDefID {
                get {
                    return ((int)(this[this.tableinvoiceItemsTable.spentDefIDColumn]));
                }
                set {
                    this[this.tableinvoiceItemsTable.spentDefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoiceItem_comment {
                get {
                    return ((string)(this[this.tableinvoiceItemsTable.invoiceItem_commentColumn]));
                }
                set {
                    this[this.tableinvoiceItemsTable.invoiceItem_commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int projectID {
                get {
                    return ((int)(this[this.tableinvoiceItemsTable.projectIDColumn]));
                }
                set {
                    this[this.tableinvoiceItemsTable.projectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoicesTableRow invoicesTableRow {
                get {
                    return ((invoicesTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_invoiceItemsTable_invoicesTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_invoiceItemsTable_invoicesTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentDefRow spentDefRow {
                get {
                    return ((spentDefRow)(this.GetParentRow(this.Table.ParentRelations["FK_invoiceItemsTable_spentDef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_invoiceItemsTable_spentDef"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class invoicesTableRow : global::System.Data.DataRow {
            
            private invoicesTableDataTable tableinvoicesTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal invoicesTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableinvoicesTable = ((invoicesTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long invoice_id {
                get {
                    return ((long)(this[this.tableinvoicesTable.invoice_idColumn]));
                }
                set {
                    this[this.tableinvoicesTable.invoice_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoice_date {
                get {
                    return ((string)(this[this.tableinvoicesTable.invoice_dateColumn]));
                }
                set {
                    this[this.tableinvoicesTable.invoice_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long invoice_total {
                get {
                    return ((long)(this[this.tableinvoicesTable.invoice_totalColumn]));
                }
                set {
                    this[this.tableinvoicesTable.invoice_totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoice_comment {
                get {
                    return ((string)(this[this.tableinvoicesTable.invoice_commentColumn]));
                }
                set {
                    this[this.tableinvoicesTable.invoice_commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int personID {
                get {
                    return ((int)(this[this.tableinvoicesTable.personIDColumn]));
                }
                set {
                    this[this.tableinvoicesTable.personIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoiceItemsTableRow[] GetinvoiceItemsTableRows() {
                if ((this.Table.ChildRelations["FK_invoiceItemsTable_invoicesTable"] == null)) {
                    return new invoiceItemsTableRow[0];
                }
                else {
                    return ((invoiceItemsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_invoiceItemsTable_invoicesTable"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingDocsRow[] GetAccountingDocsRows() {
                if ((this.Table.ChildRelations["FK_AccountingDocs_invoicesTable"] == null)) {
                    return new AccountingDocsRow[0];
                }
                else {
                    return ((AccountingDocsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_AccountingDocs_invoicesTable"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viw_invoiceItemsRow : global::System.Data.DataRow {
            
            private viw_invoiceItemsDataTable tableviw_invoiceItems;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_invoiceItemsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviw_invoiceItems = ((viw_invoiceItemsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int invoiceItem_row {
                get {
                    return ((int)(this[this.tableviw_invoiceItems.invoiceItem_rowColumn]));
                }
                set {
                    this[this.tableviw_invoiceItems.invoiceItem_rowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string spentDefName {
                get {
                    return ((string)(this[this.tableviw_invoiceItems.spentDefNameColumn]));
                }
                set {
                    this[this.tableviw_invoiceItems.spentDefNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int invoiceItem_amount {
                get {
                    return ((int)(this[this.tableviw_invoiceItems.invoiceItem_amountColumn]));
                }
                set {
                    this[this.tableviw_invoiceItems.invoiceItem_amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long invoiceItem_phi {
                get {
                    return ((long)(this[this.tableviw_invoiceItems.invoiceItem_phiColumn]));
                }
                set {
                    this[this.tableviw_invoiceItems.invoiceItem_phiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long invoiceItem_total {
                get {
                    return ((long)(this[this.tableviw_invoiceItems.invoiceItem_totalColumn]));
                }
                set {
                    this[this.tableviw_invoiceItems.invoiceItem_totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoiceItem_comment {
                get {
                    return ((string)(this[this.tableviw_invoiceItems.invoiceItem_commentColumn]));
                }
                set {
                    this[this.tableviw_invoiceItems.invoiceItem_commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string projectTitle {
                get {
                    return ((string)(this[this.tableviw_invoiceItems.projectTitleColumn]));
                }
                set {
                    this[this.tableviw_invoiceItems.projectTitleColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viw_accDocRow : global::System.Data.DataRow {
            
            private viw_accDocDataTable tableviw_accDoc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_accDocRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviw_accDoc = ((viw_accDocDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDoc_id {
                get {
                    return ((long)(this[this.tableviw_accDoc.accDoc_idColumn]));
                }
                set {
                    this[this.tableviw_accDoc.accDoc_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accDoc_date {
                get {
                    return ((string)(this[this.tableviw_accDoc.accDoc_dateColumn]));
                }
                set {
                    this[this.tableviw_accDoc.accDoc_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accDoc_comment {
                get {
                    try {
                        return ((string)(this[this.tableviw_accDoc.accDoc_commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDoc_comment\' in table \'viw_accDoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_accDoc.accDoc_commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDocEvent_indebted {
                get {
                    try {
                        return ((long)(this[this.tableviw_accDoc.accDocEvent_indebtedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDocEvent_indebted\' in table \'viw_accDoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_accDoc.accDocEvent_indebtedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDocEvent_creditor {
                get {
                    try {
                        return ((long)(this[this.tableviw_accDoc.accDocEvent_creditorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDocEvent_creditor\' in table \'viw_accDoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_accDoc.accDocEvent_creditorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool accDocEvent_itIsBank {
                get {
                    return ((bool)(this[this.tableviw_accDoc.accDocEvent_itIsBankColumn]));
                }
                set {
                    this[this.tableviw_accDoc.accDocEvent_itIsBankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accDocEvent_row {
                get {
                    return ((int)(this[this.tableviw_accDoc.accDocEvent_rowColumn]));
                }
                set {
                    this[this.tableviw_accDoc.accDocEvent_rowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tempo {
                get {
                    try {
                        return ((string)(this[this.tableviw_accDoc.tempoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tempo\' in table \'viw_accDoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_accDoc.tempoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool accDocEvent_itIsIndebted {
                get {
                    return ((bool)(this[this.tableviw_accDoc.accDocEvent_itIsIndebtedColumn]));
                }
                set {
                    this[this.tableviw_accDoc.accDocEvent_itIsIndebtedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string detailTitle {
                get {
                    try {
                        return ((string)(this[this.tableviw_accDoc.detailTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'detailTitle\' in table \'viw_accDoc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_accDoc.detailTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accDocEvent_id {
                get {
                    return ((int)(this[this.tableviw_accDoc.accDocEvent_idColumn]));
                }
                set {
                    this[this.tableviw_accDoc.accDocEvent_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentMasterID {
                get {
                    return ((int)(this[this.tableviw_accDoc.spentMasterIDColumn]));
                }
                set {
                    this[this.tableviw_accDoc.spentMasterIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int detailID {
                get {
                    return ((int)(this[this.tableviw_accDoc.detailIDColumn]));
                }
                set {
                    this[this.tableviw_accDoc.detailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDoc_commentNull() {
                return this.IsNull(this.tableviw_accDoc.accDoc_commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDoc_commentNull() {
                this[this.tableviw_accDoc.accDoc_commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDocEvent_indebtedNull() {
                return this.IsNull(this.tableviw_accDoc.accDocEvent_indebtedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDocEvent_indebtedNull() {
                this[this.tableviw_accDoc.accDocEvent_indebtedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDocEvent_creditorNull() {
                return this.IsNull(this.tableviw_accDoc.accDocEvent_creditorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDocEvent_creditorNull() {
                this[this.tableviw_accDoc.accDocEvent_creditorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstempoNull() {
                return this.IsNull(this.tableviw_accDoc.tempoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettempoNull() {
                this[this.tableviw_accDoc.tempoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdetailTitleNull() {
                return this.IsNull(this.tableviw_accDoc.detailTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdetailTitleNull() {
                this[this.tableviw_accDoc.detailTitleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viw_ledgerRow : global::System.Data.DataRow {
            
            private viw_ledgerDataTable tableviw_ledger;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_ledgerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviw_ledger = ((viw_ledgerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDoc_id {
                get {
                    return ((long)(this[this.tableviw_ledger.accDoc_idColumn]));
                }
                set {
                    this[this.tableviw_ledger.accDoc_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accDoc_date {
                get {
                    return ((string)(this[this.tableviw_ledger.accDoc_dateColumn]));
                }
                set {
                    this[this.tableviw_ledger.accDoc_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accDoc_comment {
                get {
                    try {
                        return ((string)(this[this.tableviw_ledger.accDoc_commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDoc_comment\' in table \'viw_ledger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_ledger.accDoc_commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDocEvent_indebted {
                get {
                    try {
                        return ((long)(this[this.tableviw_ledger.accDocEvent_indebtedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDocEvent_indebted\' in table \'viw_ledger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_ledger.accDocEvent_indebtedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDocEvent_creditor {
                get {
                    try {
                        return ((long)(this[this.tableviw_ledger.accDocEvent_creditorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDocEvent_creditor\' in table \'viw_ledger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_ledger.accDocEvent_creditorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentMasterID {
                get {
                    return ((int)(this[this.tableviw_ledger.spentMasterIDColumn]));
                }
                set {
                    this[this.tableviw_ledger.spentMasterIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDocEvent_retail {
                get {
                    try {
                        return ((long)(this[this.tableviw_ledger.accDocEvent_retailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDocEvent_retail\' in table \'viw_ledger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_ledger.accDocEvent_retailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string spentMasterName {
                get {
                    return ((string)(this[this.tableviw_ledger.spentMasterNameColumn]));
                }
                set {
                    this[this.tableviw_ledger.spentMasterNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accDocEvent_detectID {
                get {
                    try {
                        return ((int)(this[this.tableviw_ledger.accDocEvent_detectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDocEvent_detectID\' in table \'viw_ledger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_ledger.accDocEvent_detectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accDocEvent_id {
                get {
                    return ((int)(this[this.tableviw_ledger.accDocEvent_idColumn]));
                }
                set {
                    this[this.tableviw_ledger.accDocEvent_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string detail_name {
                get {
                    try {
                        return ((string)(this[this.tableviw_ledger.detail_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'detail_name\' in table \'viw_ledger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_ledger.detail_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int detailID {
                get {
                    return ((int)(this[this.tableviw_ledger.detailIDColumn]));
                }
                set {
                    this[this.tableviw_ledger.detailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDoc_commentNull() {
                return this.IsNull(this.tableviw_ledger.accDoc_commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDoc_commentNull() {
                this[this.tableviw_ledger.accDoc_commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDocEvent_indebtedNull() {
                return this.IsNull(this.tableviw_ledger.accDocEvent_indebtedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDocEvent_indebtedNull() {
                this[this.tableviw_ledger.accDocEvent_indebtedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDocEvent_creditorNull() {
                return this.IsNull(this.tableviw_ledger.accDocEvent_creditorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDocEvent_creditorNull() {
                this[this.tableviw_ledger.accDocEvent_creditorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDocEvent_retailNull() {
                return this.IsNull(this.tableviw_ledger.accDocEvent_retailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDocEvent_retailNull() {
                this[this.tableviw_ledger.accDocEvent_retailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDocEvent_detectIDNull() {
                return this.IsNull(this.tableviw_ledger.accDocEvent_detectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDocEvent_detectIDNull() {
                this[this.tableviw_ledger.accDocEvent_detectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdetail_nameNull() {
                return this.IsNull(this.tableviw_ledger.detail_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdetail_nameNull() {
                this[this.tableviw_ledger.detail_nameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viw_balanceRow : global::System.Data.DataRow {
            
            private viw_balanceDataTable tableviw_balance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_balanceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviw_balance = ((viw_balanceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string spentMasterName {
                get {
                    return ((string)(this[this.tableviw_balance.spentMasterNameColumn]));
                }
                set {
                    this[this.tableviw_balance.spentMasterNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long indTotal {
                get {
                    try {
                        return ((long)(this[this.tableviw_balance.indTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'indTotal\' in table \'viw_balance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_balance.indTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long creTotal {
                get {
                    try {
                        return ((long)(this[this.tableviw_balance.creTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'creTotal\' in table \'viw_balance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_balance.creTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentMasterID {
                get {
                    return ((int)(this[this.tableviw_balance.spentMasterIDColumn]));
                }
                set {
                    this[this.tableviw_balance.spentMasterIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string detail_name {
                get {
                    try {
                        return ((string)(this[this.tableviw_balance.detail_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'detail_name\' in table \'viw_balance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_balance.detail_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int detailID {
                get {
                    try {
                        return ((int)(this[this.tableviw_balance.detailIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'detailID\' in table \'viw_balance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_balance.detailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsindTotalNull() {
                return this.IsNull(this.tableviw_balance.indTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetindTotalNull() {
                this[this.tableviw_balance.indTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscreTotalNull() {
                return this.IsNull(this.tableviw_balance.creTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcreTotalNull() {
                this[this.tableviw_balance.creTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdetail_nameNull() {
                return this.IsNull(this.tableviw_balance.detail_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdetail_nameNull() {
                this[this.tableviw_balance.detail_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdetailIDNull() {
                return this.IsNull(this.tableviw_balance.detailIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdetailIDNull() {
                this[this.tableviw_balance.detailIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class detailsTableRow : global::System.Data.DataRow {
            
            private detailsTableDataTable tabledetailsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal detailsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledetailsTable = ((detailsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int detailID {
                get {
                    return ((int)(this[this.tabledetailsTable.detailIDColumn]));
                }
                set {
                    this[this.tabledetailsTable.detailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentMasterID {
                get {
                    return ((int)(this[this.tabledetailsTable.spentMasterIDColumn]));
                }
                set {
                    this[this.tabledetailsTable.spentMasterIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string detail_name {
                get {
                    return ((string)(this[this.tabledetailsTable.detail_nameColumn]));
                }
                set {
                    this[this.tabledetailsTable.detail_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int projectID {
                get {
                    try {
                        return ((int)(this[this.tabledetailsTable.projectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'projectID\' in table \'detailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledetailsTable.projectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int personID {
                get {
                    try {
                        return ((int)(this[this.tabledetailsTable.personIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'personID\' in table \'detailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledetailsTable.personIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accountID {
                get {
                    try {
                        return ((int)(this[this.tabledetailsTable.accountIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accountID\' in table \'detailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledetailsTable.accountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountsTableRow AccountsTableRow {
                get {
                    return ((AccountsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_detailsTable_AccountsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_detailsTable_AccountsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personsTableRow personsTableRow {
                get {
                    return ((personsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_detailsTable_personsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_detailsTable_personsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsTableRow projectsTableRow {
                get {
                    return ((projectsTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_detailsTable_projectsTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_detailsTable_projectsTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentMasterRow spentMasterRow {
                get {
                    return ((spentMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_detailsTable_spentMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_detailsTable_spentMaster"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprojectIDNull() {
                return this.IsNull(this.tabledetailsTable.projectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprojectIDNull() {
                this[this.tabledetailsTable.projectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspersonIDNull() {
                return this.IsNull(this.tabledetailsTable.personIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpersonIDNull() {
                this[this.tabledetailsTable.personIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccountIDNull() {
                return this.IsNull(this.tabledetailsTable.accountIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccountIDNull() {
                this[this.tabledetailsTable.accountIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accDocEventsTableRow[] GetaccDocEventsTableRows() {
                if ((this.Table.ChildRelations["FK_accDocEventsTable_detailsTable"] == null)) {
                    return new accDocEventsTableRow[0];
                }
                else {
                    return ((accDocEventsTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_accDocEventsTable_detailsTable"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viw_detailsRow : global::System.Data.DataRow {
            
            private viw_detailsDataTable tableviw_details;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_detailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviw_details = ((viw_detailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentMasterID {
                get {
                    return ((int)(this[this.tableviw_details.spentMasterIDColumn]));
                }
                set {
                    this[this.tableviw_details.spentMasterIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int detailID {
                get {
                    return ((int)(this[this.tableviw_details.detailIDColumn]));
                }
                set {
                    this[this.tableviw_details.detailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fullDetailName {
                get {
                    try {
                        return ((string)(this[this.tableviw_details.fullDetailNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fullDetailName\' in table \'viw_details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_details.fullDetailNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfullDetailNameNull() {
                return this.IsNull(this.tableviw_details.fullDetailNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfullDetailNameNull() {
                this[this.tableviw_details.fullDetailNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class spentGroupsTableRow : global::System.Data.DataRow {
            
            private spentGroupsTableDataTable tablespentGroupsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spentGroupsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablespentGroupsTable = ((spentGroupsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentGroup_id {
                get {
                    return ((int)(this[this.tablespentGroupsTable.spentGroup_idColumn]));
                }
                set {
                    this[this.tablespentGroupsTable.spentGroup_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string spentGroup_name {
                get {
                    return ((string)(this[this.tablespentGroupsTable.spentGroup_nameColumn]));
                }
                set {
                    this[this.tablespentGroupsTable.spentGroup_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentMasterRow[] GetspentMasterRows() {
                if ((this.Table.ChildRelations["FK_spentMaster_spentGroupsTable"] == null)) {
                    return new spentMasterRow[0];
                }
                else {
                    return ((spentMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_spentMaster_spentGroupsTable"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TaraznamehRow : global::System.Data.DataRow {
            
            private TaraznamehDataTable tableTaraznameh;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaraznamehRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTaraznameh = ((TaraznamehDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tar_id {
                get {
                    return ((int)(this[this.tableTaraznameh.tar_idColumn]));
                }
                set {
                    this[this.tableTaraznameh.tar_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tar_indColTitle {
                get {
                    try {
                        return ((string)(this[this.tableTaraznameh.tar_indColTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tar_indColTitle\' in table \'Taraznameh\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaraznameh.tar_indColTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long tar_indColPrice {
                get {
                    try {
                        return ((long)(this[this.tableTaraznameh.tar_indColPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tar_indColPrice\' in table \'Taraznameh\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaraznameh.tar_indColPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool tar_indColIsItTitr {
                get {
                    try {
                        return ((bool)(this[this.tableTaraznameh.tar_indColIsItTitrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tar_indColIsItTitr\' in table \'Taraznameh\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaraznameh.tar_indColIsItTitrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tar_creColTitle {
                get {
                    try {
                        return ((string)(this[this.tableTaraznameh.tar_creColTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tar_creColTitle\' in table \'Taraznameh\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaraznameh.tar_creColTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long tar_creColPrice {
                get {
                    try {
                        return ((long)(this[this.tableTaraznameh.tar_creColPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tar_creColPrice\' in table \'Taraznameh\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaraznameh.tar_creColPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool tar_creColIsItTitr {
                get {
                    try {
                        return ((bool)(this[this.tableTaraznameh.tar_creColIsItTitrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tar_creColIsItTitr\' in table \'Taraznameh\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaraznameh.tar_creColIsItTitrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istar_indColTitleNull() {
                return this.IsNull(this.tableTaraznameh.tar_indColTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settar_indColTitleNull() {
                this[this.tableTaraznameh.tar_indColTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istar_indColPriceNull() {
                return this.IsNull(this.tableTaraznameh.tar_indColPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settar_indColPriceNull() {
                this[this.tableTaraznameh.tar_indColPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istar_indColIsItTitrNull() {
                return this.IsNull(this.tableTaraznameh.tar_indColIsItTitrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settar_indColIsItTitrNull() {
                this[this.tableTaraznameh.tar_indColIsItTitrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istar_creColTitleNull() {
                return this.IsNull(this.tableTaraznameh.tar_creColTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settar_creColTitleNull() {
                this[this.tableTaraznameh.tar_creColTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istar_creColPriceNull() {
                return this.IsNull(this.tableTaraznameh.tar_creColPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settar_creColPriceNull() {
                this[this.tableTaraznameh.tar_creColPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istar_creColIsItTitrNull() {
                return this.IsNull(this.tableTaraznameh.tar_creColIsItTitrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settar_creColIsItTitrNull() {
                this[this.tableTaraznameh.tar_creColIsItTitrColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class freeFormsTableRow : global::System.Data.DataRow {
            
            private freeFormsTableDataTable tablefreeFormsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal freeFormsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablefreeFormsTable = ((freeFormsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long freeForm_id {
                get {
                    return ((long)(this[this.tablefreeFormsTable.freeForm_idColumn]));
                }
                set {
                    this[this.tablefreeFormsTable.freeForm_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string freeForm_date {
                get {
                    return ((string)(this[this.tablefreeFormsTable.freeForm_dateColumn]));
                }
                set {
                    this[this.tablefreeFormsTable.freeForm_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int personID {
                get {
                    return ((int)(this[this.tablefreeFormsTable.personIDColumn]));
                }
                set {
                    this[this.tablefreeFormsTable.personIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string freeForm_office {
                get {
                    try {
                        return ((string)(this[this.tablefreeFormsTable.freeForm_officeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'freeForm_office\' in table \'freeFormsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefreeFormsTable.freeForm_officeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool freeForm_personalReason {
                get {
                    return ((bool)(this[this.tablefreeFormsTable.freeForm_personalReasonColumn]));
                }
                set {
                    this[this.tablefreeFormsTable.freeForm_personalReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string freeForm_timeOut {
                get {
                    return ((string)(this[this.tablefreeFormsTable.freeForm_timeOutColumn]));
                }
                set {
                    this[this.tablefreeFormsTable.freeForm_timeOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string freeForm_outTime {
                get {
                    return ((string)(this[this.tablefreeFormsTable.freeForm_outTimeColumn]));
                }
                set {
                    this[this.tablefreeFormsTable.freeForm_outTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string freeForm_returnTime {
                get {
                    try {
                        return ((string)(this[this.tablefreeFormsTable.freeForm_returnTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'freeForm_returnTime\' in table \'freeFormsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefreeFormsTable.freeForm_returnTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfreeForm_officeNull() {
                return this.IsNull(this.tablefreeFormsTable.freeForm_officeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfreeForm_officeNull() {
                this[this.tablefreeFormsTable.freeForm_officeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfreeForm_returnTimeNull() {
                return this.IsNull(this.tablefreeFormsTable.freeForm_returnTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfreeForm_returnTimeNull() {
                this[this.tablefreeFormsTable.freeForm_returnTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viw_freeFormsRow : global::System.Data.DataRow {
            
            private viw_freeFormsDataTable tableviw_freeForms;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_freeFormsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviw_freeForms = ((viw_freeFormsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string personFamilyAndName {
                get {
                    return ((string)(this[this.tableviw_freeForms.personFamilyAndNameColumn]));
                }
                set {
                    this[this.tableviw_freeForms.personFamilyAndNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long freeForm_id {
                get {
                    return ((long)(this[this.tableviw_freeForms.freeForm_idColumn]));
                }
                set {
                    this[this.tableviw_freeForms.freeForm_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string freeForm_date {
                get {
                    return ((string)(this[this.tableviw_freeForms.freeForm_dateColumn]));
                }
                set {
                    this[this.tableviw_freeForms.freeForm_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string freeForm_office {
                get {
                    try {
                        return ((string)(this[this.tableviw_freeForms.freeForm_officeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'freeForm_office\' in table \'viw_freeForms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_freeForms.freeForm_officeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool freeForm_personalReason {
                get {
                    return ((bool)(this[this.tableviw_freeForms.freeForm_personalReasonColumn]));
                }
                set {
                    this[this.tableviw_freeForms.freeForm_personalReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string freeForm_timeOut {
                get {
                    return ((string)(this[this.tableviw_freeForms.freeForm_timeOutColumn]));
                }
                set {
                    this[this.tableviw_freeForms.freeForm_timeOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string freeForm_outTime {
                get {
                    return ((string)(this[this.tableviw_freeForms.freeForm_outTimeColumn]));
                }
                set {
                    this[this.tableviw_freeForms.freeForm_outTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string freeForm_returnTime {
                get {
                    try {
                        return ((string)(this[this.tableviw_freeForms.freeForm_returnTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'freeForm_returnTime\' in table \'viw_freeForms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_freeForms.freeForm_returnTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfreeForm_officeNull() {
                return this.IsNull(this.tableviw_freeForms.freeForm_officeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfreeForm_officeNull() {
                this[this.tableviw_freeForms.freeForm_officeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfreeForm_returnTimeNull() {
                return this.IsNull(this.tableviw_freeForms.freeForm_returnTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfreeForm_returnTimeNull() {
                this[this.tableviw_freeForms.freeForm_returnTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viw_ledgerRemainsRow : global::System.Data.DataRow {
            
            private viw_ledgerRemainsDataTable tableviw_ledgerRemains;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_ledgerRemainsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviw_ledgerRemains = ((viw_ledgerRemainsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spentMasterID {
                get {
                    return ((int)(this[this.tableviw_ledgerRemains.spentMasterIDColumn]));
                }
                set {
                    this[this.tableviw_ledgerRemains.spentMasterIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string spentMasterName {
                get {
                    return ((string)(this[this.tableviw_ledgerRemains.spentMasterNameColumn]));
                }
                set {
                    this[this.tableviw_ledgerRemains.spentMasterNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long indTotal {
                get {
                    try {
                        return ((long)(this[this.tableviw_ledgerRemains.indTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'indTotal\' in table \'viw_ledgerRemains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_ledgerRemains.indTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long creTotal {
                get {
                    try {
                        return ((long)(this[this.tableviw_ledgerRemains.creTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'creTotal\' in table \'viw_ledgerRemains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_ledgerRemains.creTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int detailID {
                get {
                    return ((int)(this[this.tableviw_ledgerRemains.detailIDColumn]));
                }
                set {
                    this[this.tableviw_ledgerRemains.detailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string detail_name {
                get {
                    try {
                        return ((string)(this[this.tableviw_ledgerRemains.detail_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'detail_name\' in table \'viw_ledgerRemains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_ledgerRemains.detail_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reportTitle {
                get {
                    try {
                        return ((string)(this[this.tableviw_ledgerRemains.reportTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'reportTitle\' in table \'viw_ledgerRemains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_ledgerRemains.reportTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string para1 {
                get {
                    try {
                        return ((string)(this[this.tableviw_ledgerRemains.para1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'para1\' in table \'viw_ledgerRemains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_ledgerRemains.para1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string para2 {
                get {
                    try {
                        return ((string)(this[this.tableviw_ledgerRemains.para2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'para2\' in table \'viw_ledgerRemains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_ledgerRemains.para2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string para3 {
                get {
                    try {
                        return ((string)(this[this.tableviw_ledgerRemains.para3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'para3\' in table \'viw_ledgerRemains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_ledgerRemains.para3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accDoc_date {
                get {
                    return ((string)(this[this.tableviw_ledgerRemains.accDoc_dateColumn]));
                }
                set {
                    this[this.tableviw_ledgerRemains.accDoc_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsindTotalNull() {
                return this.IsNull(this.tableviw_ledgerRemains.indTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetindTotalNull() {
                this[this.tableviw_ledgerRemains.indTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscreTotalNull() {
                return this.IsNull(this.tableviw_ledgerRemains.creTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcreTotalNull() {
                this[this.tableviw_ledgerRemains.creTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdetail_nameNull() {
                return this.IsNull(this.tableviw_ledgerRemains.detail_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdetail_nameNull() {
                this[this.tableviw_ledgerRemains.detail_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreportTitleNull() {
                return this.IsNull(this.tableviw_ledgerRemains.reportTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreportTitleNull() {
                this[this.tableviw_ledgerRemains.reportTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispara1Null() {
                return this.IsNull(this.tableviw_ledgerRemains.para1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpara1Null() {
                this[this.tableviw_ledgerRemains.para1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispara2Null() {
                return this.IsNull(this.tableviw_ledgerRemains.para2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpara2Null() {
                this[this.tableviw_ledgerRemains.para2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispara3Null() {
                return this.IsNull(this.tableviw_ledgerRemains.para3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpara3Null() {
                this[this.tableviw_ledgerRemains.para3Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class viw_detailsCodesRow : global::System.Data.DataRow {
            
            private viw_detailsCodesDataTable tableviw_detailsCodes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal viw_detailsCodesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableviw_detailsCodes = ((viw_detailsCodesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableviw_detailsCodes.idColumn]));
                }
                set {
                    this[this.tableviw_detailsCodes.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    return ((string)(this[this.tableviw_detailsCodes.titleColumn]));
                }
                set {
                    this[this.tableviw_detailsCodes.titleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string kind {
                get {
                    try {
                        return ((string)(this[this.tableviw_detailsCodes.kindColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kind\' in table \'viw_detailsCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviw_detailsCodes.kindColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskindNull() {
                return this.IsNull(this.tableviw_detailsCodes.kindColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkindNull() {
                this[this.tableviw_detailsCodes.kindColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class usersTableRow : global::System.Data.DataRow {
            
            private usersTableDataTable tableusersTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal usersTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableusersTable = ((usersTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int user_id {
                get {
                    return ((int)(this[this.tableusersTable.user_idColumn]));
                }
                set {
                    this[this.tableusersTable.user_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_name {
                get {
                    return ((string)(this[this.tableusersTable.user_nameColumn]));
                }
                set {
                    this[this.tableusersTable.user_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int user_picIndex {
                get {
                    return ((int)(this[this.tableusersTable.user_picIndexColumn]));
                }
                set {
                    this[this.tableusersTable.user_picIndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_picPath {
                get {
                    try {
                        return ((string)(this[this.tableusersTable.user_picPathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_picPath\' in table \'usersTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableusersTable.user_picPathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_limitString {
                get {
                    return ((string)(this[this.tableusersTable.user_limitStringColumn]));
                }
                set {
                    this[this.tableusersTable.user_limitStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int user_limitType {
                get {
                    return ((int)(this[this.tableusersTable.user_limitTypeColumn]));
                }
                set {
                    this[this.tableusersTable.user_limitTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_password {
                get {
                    try {
                        return ((string)(this[this.tableusersTable.user_passwordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_password\' in table \'usersTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableusersTable.user_passwordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_picPathNull() {
                return this.IsNull(this.tableusersTable.user_picPathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_picPathNull() {
                this[this.tableusersTable.user_picPathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_passwordNull() {
                return this.IsNull(this.tableusersTable.user_passwordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_passwordNull() {
                this[this.tableusersTable.user_passwordColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AccountsTableRowChangeEvent : global::System.EventArgs {
            
            private AccountsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountsTableRowChangeEvent(AccountsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BanksTableRowChangeEvent : global::System.EventArgs {
            
            private BanksTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanksTableRowChangeEvent(BanksTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BanksTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class chequesTableRowChangeEvent : global::System.EventArgs {
            
            private chequesTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesTableRowChangeEvent(chequesTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class personsTableRowChangeEvent : global::System.EventArgs {
            
            private personsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personsTableRowChangeEvent(personsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class projectsPersonsRowChangeEvent : global::System.EventArgs {
            
            private projectsPersonsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsPersonsRowChangeEvent(projectsPersonsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsPersonsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class projectsTableRowChangeEvent : global::System.EventArgs {
            
            private projectsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsTableRowChangeEvent(projectsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class spentDefRowChangeEvent : global::System.EventArgs {
            
            private spentDefRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentDefRowChangeEvent(spentDefRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentDefRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class spentMasterRowChangeEvent : global::System.EventArgs {
            
            private spentMasterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentMasterRowChangeEvent(spentMasterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class detractDefRowChangeEvent : global::System.EventArgs {
            
            private detractDefRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractDefRowChangeEvent(detractDefRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractDefRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class pensionDefRowChangeEvent : global::System.EventArgs {
            
            private pensionDefRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionDefRowChangeEvent(pensionDefRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionDefRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class pensionsTableRowChangeEvent : global::System.EventArgs {
            
            private pensionsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsTableRowChangeEvent(pensionsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class docsTableRowChangeEvent : global::System.EventArgs {
            
            private docsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public docsTableRowChangeEvent(docsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public docsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View1RowChangeEvent : global::System.EventArgs {
            
            private View1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View1RowChangeEvent(View1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class pensionsViewRowChangeEvent : global::System.EventArgs {
            
            private pensionsViewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsViewRowChangeEvent(pensionsViewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pensionsViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class INReceiptViewRowChangeEvent : global::System.EventArgs {
            
            private INReceiptViewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INReceiptViewRowChangeEvent(INReceiptViewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INReceiptViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class chequesViewRowChangeEvent : global::System.EventArgs {
            
            private chequesViewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesViewRowChangeEvent(chequesViewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public chequesViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class detractsViewRowChangeEvent : global::System.EventArgs {
            
            private detractsViewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractsViewRowChangeEvent(detractsViewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detractsViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class receiptOUTRowChangeEvent : global::System.EventArgs {
            
            private receiptOUTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public receiptOUTRowChangeEvent(receiptOUTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public receiptOUTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class defsViewRowChangeEvent : global::System.EventArgs {
            
            private defsViewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public defsViewRowChangeEvent(defsViewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public defsViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class accountTypesTableRowChangeEvent : global::System.EventArgs {
            
            private accountTypesTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accountTypesTableRowChangeEvent(accountTypesTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accountTypesTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AccountingDocsRowChangeEvent : global::System.EventArgs {
            
            private AccountingDocsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingDocsRowChangeEvent(AccountingDocsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingDocsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class accDocEventsTableRowChangeEvent : global::System.EventArgs {
            
            private accDocEventsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accDocEventsTableRowChangeEvent(accDocEventsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public accDocEventsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class invoiceItemsTableRowChangeEvent : global::System.EventArgs {
            
            private invoiceItemsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoiceItemsTableRowChangeEvent(invoiceItemsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoiceItemsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class invoicesTableRowChangeEvent : global::System.EventArgs {
            
            private invoicesTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoicesTableRowChangeEvent(invoicesTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public invoicesTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viw_invoiceItemsRowChangeEvent : global::System.EventArgs {
            
            private viw_invoiceItemsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_invoiceItemsRowChangeEvent(viw_invoiceItemsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_invoiceItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viw_accDocRowChangeEvent : global::System.EventArgs {
            
            private viw_accDocRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_accDocRowChangeEvent(viw_accDocRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_accDocRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viw_ledgerRowChangeEvent : global::System.EventArgs {
            
            private viw_ledgerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerRowChangeEvent(viw_ledgerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viw_balanceRowChangeEvent : global::System.EventArgs {
            
            private viw_balanceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_balanceRowChangeEvent(viw_balanceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_balanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class detailsTableRowChangeEvent : global::System.EventArgs {
            
            private detailsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detailsTableRowChangeEvent(detailsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public detailsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viw_detailsRowChangeEvent : global::System.EventArgs {
            
            private viw_detailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsRowChangeEvent(viw_detailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class spentGroupsTableRowChangeEvent : global::System.EventArgs {
            
            private spentGroupsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentGroupsTableRowChangeEvent(spentGroupsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spentGroupsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TaraznamehRowChangeEvent : global::System.EventArgs {
            
            private TaraznamehRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaraznamehRowChangeEvent(TaraznamehRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaraznamehRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class freeFormsTableRowChangeEvent : global::System.EventArgs {
            
            private freeFormsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public freeFormsTableRowChangeEvent(freeFormsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public freeFormsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viw_freeFormsRowChangeEvent : global::System.EventArgs {
            
            private viw_freeFormsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_freeFormsRowChangeEvent(viw_freeFormsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_freeFormsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viw_ledgerRemainsRowChangeEvent : global::System.EventArgs {
            
            private viw_ledgerRemainsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerRemainsRowChangeEvent(viw_ledgerRemainsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_ledgerRemainsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class viw_detailsCodesRowChangeEvent : global::System.EventArgs {
            
            private viw_detailsCodesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsCodesRowChangeEvent(viw_detailsCodesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public viw_detailsCodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class usersTableRowChangeEvent : global::System.EventArgs {
            
            private usersTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usersTableRowChangeEvent(usersTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public usersTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace cactus_PS_.PSDatabase5DataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AccountsTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AccountsTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AccountsTable";
            tableMapping.ColumnMappings.Add("accountID", "accountID");
            tableMapping.ColumnMappings.Add("bankID", "bankID");
            tableMapping.ColumnMappings.Add("temp", "temp");
            tableMapping.ColumnMappings.Add("account_chapterName", "account_chapterName");
            tableMapping.ColumnMappings.Add("account_chapterNo", "account_chapterNo");
            tableMapping.ColumnMappings.Add("account_number", "account_number");
            tableMapping.ColumnMappings.Add("account_amount", "account_amount");
            tableMapping.ColumnMappings.Add("account_remain", "account_remain");
            tableMapping.ColumnMappings.Add("accountType_id", "accountType_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [AccountsTable] WHERE (([accountID] = @Original_accountID) AND ([bankID] = @Original_bankID) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ((@IsNull_account_chapterName = 1 AND [account_chapterName] IS NULL) OR ([account_chapterName] = @Original_account_chapterName)) AND ((@IsNull_account_chapterNo = 1 AND [account_chapterNo] IS NULL) OR ([account_chapterNo] = @Original_account_chapterNo)) AND ([account_amount] = @Original_account_amount) AND ([account_number] = @Original_account_number) AND ([account_remain] = @Original_account_remain) AND ([accountType_id] = @Original_accountType_id))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_account_chapterName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_chapterName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_account_chapterNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_chapterNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_amount", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_amount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_remain", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_remain", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountType_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [AccountsTable] ([bankID], [temp], [account_chapterName], [account_chapterNo], [account_amount], [account_number], [account_remain], [accountType_id]) VALUES (@bankID, @temp, @account_chapterName, @account_chapterNo, @account_amount, @account_number, @account_remain, @accountType_id);
SELECT accountID, bankID, temp, account_chapterName, account_chapterNo, account_amount, account_number, account_remain, accountType_id FROM AccountsTable WHERE (accountID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_chapterName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_chapterNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_amount", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_remain", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_remain", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountType_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [AccountsTable] SET [bankID] = @bankID, [temp] = @temp, [account_chapterName] = @account_chapterName, [account_chapterNo] = @account_chapterNo, [account_amount] = @account_amount, [account_number] = @account_number, [account_remain] = @account_remain, [accountType_id] = @accountType_id WHERE (([accountID] = @Original_accountID) AND ([bankID] = @Original_bankID) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ((@IsNull_account_chapterName = 1 AND [account_chapterName] IS NULL) OR ([account_chapterName] = @Original_account_chapterName)) AND ((@IsNull_account_chapterNo = 1 AND [account_chapterNo] IS NULL) OR ([account_chapterNo] = @Original_account_chapterNo)) AND ([account_amount] = @Original_account_amount) AND ([account_number] = @Original_account_number) AND ([account_remain] = @Original_account_remain) AND ([accountType_id] = @Original_accountType_id));
SELECT accountID, bankID, temp, account_chapterName, account_chapterNo, account_amount, account_number, account_remain, accountType_id FROM AccountsTable WHERE (accountID = @accountID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_chapterName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_chapterNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_amount", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_remain", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_remain", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountType_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_account_chapterName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_chapterName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_account_chapterNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_chapterNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_amount", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_amount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_remain", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_remain", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountType_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT accountID, bankID, temp, account_chapterName, account_chapterNo, account_a" +
                "mount, account_number, account_remain, accountType_id FROM AccountsTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.AccountsTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.AccountsTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.AccountsTableDataTable dataTable = new PSDatabase5DataSet.AccountsTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.AccountsTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "AccountsTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_accountID, int Original_bankID, string Original_temp, string Original_account_chapterName, string Original_account_chapterNo, long Original_account_amount, string Original_account_number, long Original_account_remain, int Original_accountType_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_accountID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_bankID));
            if ((Original_temp == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_temp));
            }
            if ((Original_account_chapterName == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_account_chapterName));
            }
            if ((Original_account_chapterNo == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_account_chapterNo));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_account_amount));
            if ((Original_account_number == null)) {
                throw new global::System.ArgumentNullException("Original_account_number");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_account_number));
            }
            this.Adapter.DeleteCommand.Parameters[10].Value = ((long)(Original_account_remain));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_accountType_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int bankID, string temp, string account_chapterName, string account_chapterNo, long account_amount, string account_number, long account_remain, int accountType_id) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(bankID));
            if ((temp == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(temp));
            }
            if ((account_chapterName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(account_chapterName));
            }
            if ((account_chapterNo == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(account_chapterNo));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((long)(account_amount));
            if ((account_number == null)) {
                throw new global::System.ArgumentNullException("account_number");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(account_number));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((long)(account_remain));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(accountType_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int bankID, 
                    string temp, 
                    string account_chapterName, 
                    string account_chapterNo, 
                    long account_amount, 
                    string account_number, 
                    long account_remain, 
                    int accountType_id, 
                    int Original_accountID, 
                    int Original_bankID, 
                    string Original_temp, 
                    string Original_account_chapterName, 
                    string Original_account_chapterNo, 
                    long Original_account_amount, 
                    string Original_account_number, 
                    long Original_account_remain, 
                    int Original_accountType_id, 
                    int accountID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(bankID));
            if ((temp == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(temp));
            }
            if ((account_chapterName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(account_chapterName));
            }
            if ((account_chapterNo == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(account_chapterNo));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(account_amount));
            if ((account_number == null)) {
                throw new global::System.ArgumentNullException("account_number");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(account_number));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(account_remain));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(accountType_id));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_accountID));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_bankID));
            if ((Original_temp == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_temp));
            }
            if ((Original_account_chapterName == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_account_chapterName));
            }
            if ((Original_account_chapterNo == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_account_chapterNo));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(Original_account_amount));
            if ((Original_account_number == null)) {
                throw new global::System.ArgumentNullException("Original_account_number");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_account_number));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(Original_account_remain));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_accountType_id));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(accountID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int bankID, 
                    string temp, 
                    string account_chapterName, 
                    string account_chapterNo, 
                    long account_amount, 
                    string account_number, 
                    long account_remain, 
                    int accountType_id, 
                    int Original_accountID, 
                    int Original_bankID, 
                    string Original_temp, 
                    string Original_account_chapterName, 
                    string Original_account_chapterNo, 
                    long Original_account_amount, 
                    string Original_account_number, 
                    long Original_account_remain, 
                    int Original_accountType_id) {
            return this.Update(bankID, temp, account_chapterName, account_chapterNo, account_amount, account_number, account_remain, accountType_id, Original_accountID, Original_bankID, Original_temp, Original_account_chapterName, Original_account_chapterNo, Original_account_amount, Original_account_number, Original_account_remain, Original_accountType_id, Original_accountID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BanksTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BanksTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BanksTable";
            tableMapping.ColumnMappings.Add("bankID", "bankID");
            tableMapping.ColumnMappings.Add("bankName", "bankName");
            tableMapping.ColumnMappings.Add("temp", "temp");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [BanksTable] WHERE (([bankID] = @Original_bankID) AND ([bankName] = @" +
                "Original_bankName) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Orig" +
                "inal_temp)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bankName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [BanksTable] ([bankName], [temp]) VALUES (@bankName, @temp);\r\nSELECT " +
                "bankID, bankName, temp FROM BanksTable WHERE (bankID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bankName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [BanksTable] SET [bankName] = @bankName, [temp] = @temp WHERE (([bankID] = @Original_bankID) AND ([bankName] = @Original_bankName) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)));
SELECT bankID, bankName, temp FROM BanksTable WHERE (bankID = @bankID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bankName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bankName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bankID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT bankID, bankName, temp FROM BanksTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.BanksTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.BanksTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.BanksTableDataTable dataTable = new PSDatabase5DataSet.BanksTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.BanksTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "BanksTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_bankID, string Original_bankName, string Original_temp) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_bankID));
            if ((Original_bankName == null)) {
                throw new global::System.ArgumentNullException("Original_bankName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_bankName));
            }
            if ((Original_temp == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_temp));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string bankName, string temp) {
            if ((bankName == null)) {
                throw new global::System.ArgumentNullException("bankName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(bankName));
            }
            if ((temp == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(temp));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string bankName, string temp, int Original_bankID, string Original_bankName, string Original_temp, int bankID) {
            if ((bankName == null)) {
                throw new global::System.ArgumentNullException("bankName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(bankName));
            }
            if ((temp == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(temp));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_bankID));
            if ((Original_bankName == null)) {
                throw new global::System.ArgumentNullException("Original_bankName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_bankName));
            }
            if ((Original_temp == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_temp));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(bankID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string bankName, string temp, int Original_bankID, string Original_bankName, string Original_temp) {
            return this.Update(bankName, temp, Original_bankID, Original_bankName, Original_temp, Original_bankID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class chequesTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public chequesTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "chequesTable";
            tableMapping.ColumnMappings.Add("chequeID", "chequeID");
            tableMapping.ColumnMappings.Add("personID", "personID");
            tableMapping.ColumnMappings.Add("chequeNumber", "chequeNumber");
            tableMapping.ColumnMappings.Add("issuanceDate", "issuanceDate");
            tableMapping.ColumnMappings.Add("usanceDate", "usanceDate");
            tableMapping.ColumnMappings.Add("accountID", "accountID");
            tableMapping.ColumnMappings.Add("isTo", "isTo");
            tableMapping.ColumnMappings.Add("chequeComent", "chequeComent");
            tableMapping.ColumnMappings.Add("chequePrice", "chequePrice");
            tableMapping.ColumnMappings.Add("chequeState", "chequeState");
            tableMapping.ColumnMappings.Add("temp", "temp");
            tableMapping.ColumnMappings.Add("chequeIsMine", "chequeIsMine");
            tableMapping.ColumnMappings.Add("bankID", "bankID");
            tableMapping.ColumnMappings.Add("accDoc_id", "accDoc_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [chequesTable] WHERE (([chequeID] = @Original_chequeID) AND ([personID] = @Original_personID) AND ([chequeNumber] = @Original_chequeNumber) AND ([issuanceDate] = @Original_issuanceDate) AND ([usanceDate] = @Original_usanceDate) AND ((@IsNull_accountID = 1 AND [accountID] IS NULL) OR ([accountID] = @Original_accountID)) AND ([isTo] = @Original_isTo) AND ((@IsNull_chequeComent = 1 AND [chequeComent] IS NULL) OR ([chequeComent] = @Original_chequeComent)) AND ((@IsNull_chequePrice = 1 AND [chequePrice] IS NULL) OR ([chequePrice] = @Original_chequePrice)) AND ([chequeState] = @Original_chequeState) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ([chequeIsMine] = @Original_chequeIsMine) AND ((@IsNull_bankID = 1 AND [bankID] IS NULL) OR ([bankID] = @Original_bankID)) AND ([accDoc_id] = @Original_accDoc_id))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chequeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chequeNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_issuanceDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "issuanceDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_usanceDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "usanceDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isTo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isTo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_chequeComent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeComent", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chequeComent", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeComent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_chequePrice", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequePrice", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chequePrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequePrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chequeState", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeState", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chequeIsMine", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeIsMine", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [chequesTable] ([personID], [chequeNumber], [issuanceDate], [usanceDate], [accountID], [isTo], [chequeComent], [chequePrice], [chequeState], [temp], [chequeIsMine], [bankID], [accDoc_id]) VALUES (@personID, @chequeNumber, @issuanceDate, @usanceDate, @accountID, @isTo, @chequeComent, @chequePrice, @chequeState, @temp, @chequeIsMine, @bankID, @accDoc_id);
SELECT chequeID, personID, chequeNumber, issuanceDate, usanceDate, accountID, isTo, chequeComent, chequePrice, chequeState, temp, chequeIsMine, bankID, accDoc_id FROM chequesTable WHERE (chequeID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chequeNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@issuanceDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "issuanceDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@usanceDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "usanceDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isTo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isTo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chequeComent", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeComent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chequePrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequePrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chequeState", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeState", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chequeIsMine", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeIsMine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [chequesTable] SET [personID] = @personID, [chequeNumber] = @chequeNumber, [issuanceDate] = @issuanceDate, [usanceDate] = @usanceDate, [accountID] = @accountID, [isTo] = @isTo, [chequeComent] = @chequeComent, [chequePrice] = @chequePrice, [chequeState] = @chequeState, [temp] = @temp, [chequeIsMine] = @chequeIsMine, [bankID] = @bankID, [accDoc_id] = @accDoc_id WHERE (([chequeID] = @Original_chequeID) AND ([personID] = @Original_personID) AND ([chequeNumber] = @Original_chequeNumber) AND ([issuanceDate] = @Original_issuanceDate) AND ([usanceDate] = @Original_usanceDate) AND ((@IsNull_accountID = 1 AND [accountID] IS NULL) OR ([accountID] = @Original_accountID)) AND ([isTo] = @Original_isTo) AND ((@IsNull_chequeComent = 1 AND [chequeComent] IS NULL) OR ([chequeComent] = @Original_chequeComent)) AND ((@IsNull_chequePrice = 1 AND [chequePrice] IS NULL) OR ([chequePrice] = @Original_chequePrice)) AND ([chequeState] = @Original_chequeState) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ([chequeIsMine] = @Original_chequeIsMine) AND ((@IsNull_bankID = 1 AND [bankID] IS NULL) OR ([bankID] = @Original_bankID)) AND ([accDoc_id] = @Original_accDoc_id));
SELECT chequeID, personID, chequeNumber, issuanceDate, usanceDate, accountID, isTo, chequeComent, chequePrice, chequeState, temp, chequeIsMine, bankID, accDoc_id FROM chequesTable WHERE (chequeID = @chequeID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chequeNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@issuanceDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "issuanceDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@usanceDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "usanceDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isTo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isTo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chequeComent", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeComent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chequePrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequePrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chequeState", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeState", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chequeIsMine", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeIsMine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chequeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chequeNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_issuanceDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "issuanceDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_usanceDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "usanceDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isTo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isTo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_chequeComent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeComent", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chequeComent", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeComent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_chequePrice", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequePrice", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chequePrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequePrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chequeState", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeState", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chequeIsMine", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chequeIsMine", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chequeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "chequeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT chequeID, personID, chequeNumber, issuanceDate, usanceDate, accountID, isT" +
                "o, chequeComent, chequePrice, chequeState, temp, chequeIsMine, bankID, accDoc_id" +
                " FROM chequesTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.chequesTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.chequesTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.chequesTableDataTable dataTable = new PSDatabase5DataSet.chequesTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.chequesTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "chequesTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_chequeID, int Original_personID, string Original_chequeNumber, string Original_issuanceDate, string Original_usanceDate, global::System.Nullable<int> Original_accountID, string Original_isTo, string Original_chequeComent, global::System.Nullable<long> Original_chequePrice, string Original_chequeState, string Original_temp, bool Original_chequeIsMine, global::System.Nullable<int> Original_bankID, long Original_accDoc_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_chequeID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_personID));
            if ((Original_chequeNumber == null)) {
                throw new global::System.ArgumentNullException("Original_chequeNumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_chequeNumber));
            }
            if ((Original_issuanceDate == null)) {
                throw new global::System.ArgumentNullException("Original_issuanceDate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_issuanceDate));
            }
            if ((Original_usanceDate == null)) {
                throw new global::System.ArgumentNullException("Original_usanceDate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_usanceDate));
            }
            if ((Original_accountID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_accountID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_isTo == null)) {
                throw new global::System.ArgumentNullException("Original_isTo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_isTo));
            }
            if ((Original_chequeComent == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_chequeComent));
            }
            if ((Original_chequePrice.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((long)(Original_chequePrice.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_chequeState == null)) {
                throw new global::System.ArgumentNullException("Original_chequeState");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_chequeState));
            }
            if ((Original_temp == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_temp));
            }
            this.Adapter.DeleteCommand.Parameters[15].Value = ((bool)(Original_chequeIsMine));
            if ((Original_bankID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((int)(Original_bankID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[18].Value = ((long)(Original_accDoc_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int personID, string chequeNumber, string issuanceDate, string usanceDate, global::System.Nullable<int> accountID, string isTo, string chequeComent, global::System.Nullable<long> chequePrice, string chequeState, string temp, bool chequeIsMine, global::System.Nullable<int> bankID, long accDoc_id) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(personID));
            if ((chequeNumber == null)) {
                throw new global::System.ArgumentNullException("chequeNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(chequeNumber));
            }
            if ((issuanceDate == null)) {
                throw new global::System.ArgumentNullException("issuanceDate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(issuanceDate));
            }
            if ((usanceDate == null)) {
                throw new global::System.ArgumentNullException("usanceDate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(usanceDate));
            }
            if ((accountID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(accountID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((isTo == null)) {
                throw new global::System.ArgumentNullException("isTo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(isTo));
            }
            if ((chequeComent == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(chequeComent));
            }
            if ((chequePrice.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((long)(chequePrice.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((chequeState == null)) {
                throw new global::System.ArgumentNullException("chequeState");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(chequeState));
            }
            if ((temp == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(temp));
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(chequeIsMine));
            if ((bankID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(bankID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((long)(accDoc_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int personID, 
                    string chequeNumber, 
                    string issuanceDate, 
                    string usanceDate, 
                    global::System.Nullable<int> accountID, 
                    string isTo, 
                    string chequeComent, 
                    global::System.Nullable<long> chequePrice, 
                    string chequeState, 
                    string temp, 
                    bool chequeIsMine, 
                    global::System.Nullable<int> bankID, 
                    long accDoc_id, 
                    int Original_chequeID, 
                    int Original_personID, 
                    string Original_chequeNumber, 
                    string Original_issuanceDate, 
                    string Original_usanceDate, 
                    global::System.Nullable<int> Original_accountID, 
                    string Original_isTo, 
                    string Original_chequeComent, 
                    global::System.Nullable<long> Original_chequePrice, 
                    string Original_chequeState, 
                    string Original_temp, 
                    bool Original_chequeIsMine, 
                    global::System.Nullable<int> Original_bankID, 
                    long Original_accDoc_id, 
                    int chequeID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(personID));
            if ((chequeNumber == null)) {
                throw new global::System.ArgumentNullException("chequeNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(chequeNumber));
            }
            if ((issuanceDate == null)) {
                throw new global::System.ArgumentNullException("issuanceDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(issuanceDate));
            }
            if ((usanceDate == null)) {
                throw new global::System.ArgumentNullException("usanceDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(usanceDate));
            }
            if ((accountID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(accountID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((isTo == null)) {
                throw new global::System.ArgumentNullException("isTo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(isTo));
            }
            if ((chequeComent == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(chequeComent));
            }
            if ((chequePrice.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(chequePrice.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((chequeState == null)) {
                throw new global::System.ArgumentNullException("chequeState");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(chequeState));
            }
            if ((temp == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(temp));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(chequeIsMine));
            if ((bankID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(bankID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(accDoc_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_chequeID));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_personID));
            if ((Original_chequeNumber == null)) {
                throw new global::System.ArgumentNullException("Original_chequeNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_chequeNumber));
            }
            if ((Original_issuanceDate == null)) {
                throw new global::System.ArgumentNullException("Original_issuanceDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_issuanceDate));
            }
            if ((Original_usanceDate == null)) {
                throw new global::System.ArgumentNullException("Original_usanceDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_usanceDate));
            }
            if ((Original_accountID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_accountID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_isTo == null)) {
                throw new global::System.ArgumentNullException("Original_isTo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_isTo));
            }
            if ((Original_chequeComent == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_chequeComent));
            }
            if ((Original_chequePrice.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((long)(Original_chequePrice.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_chequeState == null)) {
                throw new global::System.ArgumentNullException("Original_chequeState");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_chequeState));
            }
            if ((Original_temp == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_temp));
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((bool)(Original_chequeIsMine));
            if ((Original_bankID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(Original_bankID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[31].Value = ((long)(Original_accDoc_id));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(chequeID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int personID, 
                    string chequeNumber, 
                    string issuanceDate, 
                    string usanceDate, 
                    global::System.Nullable<int> accountID, 
                    string isTo, 
                    string chequeComent, 
                    global::System.Nullable<long> chequePrice, 
                    string chequeState, 
                    string temp, 
                    bool chequeIsMine, 
                    global::System.Nullable<int> bankID, 
                    long accDoc_id, 
                    int Original_chequeID, 
                    int Original_personID, 
                    string Original_chequeNumber, 
                    string Original_issuanceDate, 
                    string Original_usanceDate, 
                    global::System.Nullable<int> Original_accountID, 
                    string Original_isTo, 
                    string Original_chequeComent, 
                    global::System.Nullable<long> Original_chequePrice, 
                    string Original_chequeState, 
                    string Original_temp, 
                    bool Original_chequeIsMine, 
                    global::System.Nullable<int> Original_bankID, 
                    long Original_accDoc_id) {
            return this.Update(personID, chequeNumber, issuanceDate, usanceDate, accountID, isTo, chequeComent, chequePrice, chequeState, temp, chequeIsMine, bankID, accDoc_id, Original_chequeID, Original_personID, Original_chequeNumber, Original_issuanceDate, Original_usanceDate, Original_accountID, Original_isTo, Original_chequeComent, Original_chequePrice, Original_chequeState, Original_temp, Original_chequeIsMine, Original_bankID, Original_accDoc_id, Original_chequeID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class personsTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public personsTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "personsTable";
            tableMapping.ColumnMappings.Add("personID", "personID");
            tableMapping.ColumnMappings.Add("personFamilyAndName", "personFamilyAndName");
            tableMapping.ColumnMappings.Add("personelNumber", "personelNumber");
            tableMapping.ColumnMappings.Add("nationalNumber", "nationalNumber");
            tableMapping.ColumnMappings.Add("job", "job");
            tableMapping.ColumnMappings.Add("fatherName", "fatherName");
            tableMapping.ColumnMappings.Add("personNO", "personNO");
            tableMapping.ColumnMappings.Add("personBorn", "personBorn");
            tableMapping.ColumnMappings.Add("personPhone1", "personPhone1");
            tableMapping.ColumnMappings.Add("personPhone2", "personPhone2");
            tableMapping.ColumnMappings.Add("personAddress1", "personAddress1");
            tableMapping.ColumnMappings.Add("personAddress2", "personAddress2");
            tableMapping.ColumnMappings.Add("beforeType", "beforeType");
            tableMapping.ColumnMappings.Add("beforeRemainMoney", "beforeRemainMoney");
            tableMapping.ColumnMappings.Add("indebtedPrice", "indebtedPrice");
            tableMapping.ColumnMappings.Add("creditorPrice", "creditorPrice");
            tableMapping.ColumnMappings.Add("temp", "temp");
            tableMapping.ColumnMappings.Add("vehicleKind", "vehicleKind");
            tableMapping.ColumnMappings.Add("personPic", "personPic");
            tableMapping.ColumnMappings.Add("personForInfoPP", "personForInfoPP");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [personsTable] WHERE (([personID] = @Original_personID) AND ([personF" +
                "amilyAndName] = @Original_personFamilyAndName) AND ((@IsNull_personelNumber = 1 " +
                "AND [personelNumber] IS NULL) OR ([personelNumber] = @Original_personelNumber)) " +
                "AND ((@IsNull_nationalNumber = 1 AND [nationalNumber] IS NULL) OR ([nationalNumb" +
                "er] = @Original_nationalNumber)) AND ((@IsNull_job = 1 AND [job] IS NULL) OR ([j" +
                "ob] = @Original_job)) AND ((@IsNull_fatherName = 1 AND [fatherName] IS NULL) OR " +
                "([fatherName] = @Original_fatherName)) AND ((@IsNull_personNO = 1 AND [personNO]" +
                " IS NULL) OR ([personNO] = @Original_personNO)) AND ((@IsNull_personBorn = 1 AND" +
                " [personBorn] IS NULL) OR ([personBorn] = @Original_personBorn)) AND ((@IsNull_p" +
                "ersonPhone1 = 1 AND [personPhone1] IS NULL) OR ([personPhone1] = @Original_perso" +
                "nPhone1)) AND ((@IsNull_personPhone2 = 1 AND [personPhone2] IS NULL) OR ([person" +
                "Phone2] = @Original_personPhone2)) AND ((@IsNull_personAddress1 = 1 AND [personA" +
                "ddress1] IS NULL) OR ([personAddress1] = @Original_personAddress1)) AND ((@IsNul" +
                "l_personAddress2 = 1 AND [personAddress2] IS NULL) OR ([personAddress2] = @Origi" +
                "nal_personAddress2)) AND ((@IsNull_beforeType = 1 AND [beforeType] IS NULL) OR (" +
                "[beforeType] = @Original_beforeType)) AND ((@IsNull_beforeRemainMoney = 1 AND [b" +
                "eforeRemainMoney] IS NULL) OR ([beforeRemainMoney] = @Original_beforeRemainMoney" +
                ")) AND ((@IsNull_indebtedPrice = 1 AND [indebtedPrice] IS NULL) OR ([indebtedPri" +
                "ce] = @Original_indebtedPrice)) AND ((@IsNull_creditorPrice = 1 AND [creditorPri" +
                "ce] IS NULL) OR ([creditorPrice] = @Original_creditorPrice)) AND ((@IsNull_temp " +
                "= 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ((@IsNull_vehicleKind " +
                "= 1 AND [vehicleKind] IS NULL) OR ([vehicleKind] = @Original_vehicleKind)) AND (" +
                "[personForInfoPP] = @Original_personForInfoPP))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personFamilyAndName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personFamilyAndName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personelNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personelNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personelNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personelNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_nationalNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nationalNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_nationalNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nationalNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_job", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "job", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_job", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "job", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_fatherName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fatherName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_fatherName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fatherName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personNO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personNO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personNO", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personNO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personBorn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personBorn", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personBorn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personBorn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personPhone1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPhone1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personPhone1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPhone1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personPhone2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPhone2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personPhone2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPhone2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personAddress1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personAddress1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personAddress1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personAddress1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personAddress2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personAddress2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personAddress2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personAddress2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_beforeType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "beforeType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_beforeType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "beforeType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_beforeRemainMoney", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "beforeRemainMoney", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_beforeRemainMoney", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "beforeRemainMoney", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_indebtedPrice", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "indebtedPrice", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_indebtedPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "indebtedPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_creditorPrice", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "creditorPrice", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_creditorPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "creditorPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_vehicleKind", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "vehicleKind", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_vehicleKind", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "vehicleKind", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personForInfoPP", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personForInfoPP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [personsTable] ([personFamilyAndName], [personelNumber], [nationalNumber], [job], [fatherName], [personNO], [personBorn], [personPhone1], [personPhone2], [personAddress1], [personAddress2], [beforeType], [beforeRemainMoney], [indebtedPrice], [creditorPrice], [temp], [vehicleKind], [personPic], [personForInfoPP]) VALUES (@personFamilyAndName, @personelNumber, @nationalNumber, @job, @fatherName, @personNO, @personBorn, @personPhone1, @personPhone2, @personAddress1, @personAddress2, @beforeType, @beforeRemainMoney, @indebtedPrice, @creditorPrice, @temp, @vehicleKind, @personPic, @personForInfoPP);
SELECT personID, personFamilyAndName, personelNumber, nationalNumber, job, fatherName, personNO, personBorn, personPhone1, personPhone2, personAddress1, personAddress2, beforeType, beforeRemainMoney, indebtedPrice, creditorPrice, temp, vehicleKind, personPic, personForInfoPP FROM personsTable WHERE (personID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personFamilyAndName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personFamilyAndName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personelNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personelNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@nationalNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nationalNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@job", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "job", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@fatherName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fatherName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personNO", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personNO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personBorn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personBorn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personPhone1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPhone1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personPhone2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPhone2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personAddress1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personAddress1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personAddress2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personAddress2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@beforeType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "beforeType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@beforeRemainMoney", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "beforeRemainMoney", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@indebtedPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "indebtedPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@creditorPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "creditorPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@vehicleKind", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "vehicleKind", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personPic", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPic", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personForInfoPP", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personForInfoPP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [personsTable] SET [personFamilyAndName] = @personFamilyAndName, [personel" +
                "Number] = @personelNumber, [nationalNumber] = @nationalNumber, [job] = @job, [fa" +
                "therName] = @fatherName, [personNO] = @personNO, [personBorn] = @personBorn, [pe" +
                "rsonPhone1] = @personPhone1, [personPhone2] = @personPhone2, [personAddress1] = " +
                "@personAddress1, [personAddress2] = @personAddress2, [beforeType] = @beforeType," +
                " [beforeRemainMoney] = @beforeRemainMoney, [indebtedPrice] = @indebtedPrice, [cr" +
                "editorPrice] = @creditorPrice, [temp] = @temp, [vehicleKind] = @vehicleKind, [pe" +
                "rsonPic] = @personPic, [personForInfoPP] = @personForInfoPP WHERE (([personID] =" +
                " @Original_personID) AND ([personFamilyAndName] = @Original_personFamilyAndName)" +
                " AND ((@IsNull_personelNumber = 1 AND [personelNumber] IS NULL) OR ([personelNum" +
                "ber] = @Original_personelNumber)) AND ((@IsNull_nationalNumber = 1 AND [national" +
                "Number] IS NULL) OR ([nationalNumber] = @Original_nationalNumber)) AND ((@IsNull" +
                "_job = 1 AND [job] IS NULL) OR ([job] = @Original_job)) AND ((@IsNull_fatherName" +
                " = 1 AND [fatherName] IS NULL) OR ([fatherName] = @Original_fatherName)) AND ((@" +
                "IsNull_personNO = 1 AND [personNO] IS NULL) OR ([personNO] = @Original_personNO)" +
                ") AND ((@IsNull_personBorn = 1 AND [personBorn] IS NULL) OR ([personBorn] = @Ori" +
                "ginal_personBorn)) AND ((@IsNull_personPhone1 = 1 AND [personPhone1] IS NULL) OR" +
                " ([personPhone1] = @Original_personPhone1)) AND ((@IsNull_personPhone2 = 1 AND [" +
                "personPhone2] IS NULL) OR ([personPhone2] = @Original_personPhone2)) AND ((@IsNu" +
                "ll_personAddress1 = 1 AND [personAddress1] IS NULL) OR ([personAddress1] = @Orig" +
                "inal_personAddress1)) AND ((@IsNull_personAddress2 = 1 AND [personAddress2] IS N" +
                "ULL) OR ([personAddress2] = @Original_personAddress2)) AND ((@IsNull_beforeType " +
                "= 1 AND [beforeType] IS NULL) OR ([beforeType] = @Original_beforeType)) AND ((@I" +
                "sNull_beforeRemainMoney = 1 AND [beforeRemainMoney] IS NULL) OR ([beforeRemainMo" +
                "ney] = @Original_beforeRemainMoney)) AND ((@IsNull_indebtedPrice = 1 AND [indebt" +
                "edPrice] IS NULL) OR ([indebtedPrice] = @Original_indebtedPrice)) AND ((@IsNull_" +
                "creditorPrice = 1 AND [creditorPrice] IS NULL) OR ([creditorPrice] = @Original_c" +
                "reditorPrice)) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original" +
                "_temp)) AND ((@IsNull_vehicleKind = 1 AND [vehicleKind] IS NULL) OR ([vehicleKin" +
                "d] = @Original_vehicleKind)) AND ([personForInfoPP] = @Original_personForInfoPP)" +
                ");\r\nSELECT personID, personFamilyAndName, personelNumber, nationalNumber, job, f" +
                "atherName, personNO, personBorn, personPhone1, personPhone2, personAddress1, per" +
                "sonAddress2, beforeType, beforeRemainMoney, indebtedPrice, creditorPrice, temp, " +
                "vehicleKind, personPic, personForInfoPP FROM personsTable WHERE (personID = @per" +
                "sonID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personFamilyAndName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personFamilyAndName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personelNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personelNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@nationalNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nationalNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@job", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "job", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@fatherName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fatherName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personNO", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personNO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personBorn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personBorn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personPhone1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPhone1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personPhone2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPhone2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personAddress1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personAddress1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personAddress2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personAddress2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@beforeType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "beforeType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@beforeRemainMoney", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "beforeRemainMoney", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@indebtedPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "indebtedPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@creditorPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "creditorPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@vehicleKind", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "vehicleKind", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personPic", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPic", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personForInfoPP", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personForInfoPP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personFamilyAndName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personFamilyAndName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personelNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personelNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personelNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personelNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_nationalNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nationalNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_nationalNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nationalNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_job", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "job", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_job", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "job", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_fatherName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fatherName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_fatherName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fatherName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personNO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personNO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personNO", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personNO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personBorn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personBorn", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personBorn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personBorn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personPhone1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPhone1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personPhone1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPhone1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personPhone2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPhone2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personPhone2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personPhone2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personAddress1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personAddress1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personAddress1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personAddress1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personAddress2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personAddress2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personAddress2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personAddress2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_beforeType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "beforeType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_beforeType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "beforeType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_beforeRemainMoney", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "beforeRemainMoney", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_beforeRemainMoney", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "beforeRemainMoney", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_indebtedPrice", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "indebtedPrice", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_indebtedPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "indebtedPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_creditorPrice", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "creditorPrice", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_creditorPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "creditorPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_vehicleKind", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "vehicleKind", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_vehicleKind", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "vehicleKind", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personForInfoPP", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personForInfoPP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT personID, personFamilyAndName, personelNumber, nationalNumber, job, fatherName, personNO, personBorn, personPhone1, personPhone2, personAddress1, personAddress2, beforeType, beforeRemainMoney, indebtedPrice, creditorPrice, temp, vehicleKind, personPic, personForInfoPP FROM personsTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.personsTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.personsTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.personsTableDataTable dataTable = new PSDatabase5DataSet.personsTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.personsTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "personsTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_personID, 
                    string Original_personFamilyAndName, 
                    string Original_personelNumber, 
                    string Original_nationalNumber, 
                    string Original_job, 
                    string Original_fatherName, 
                    string Original_personNO, 
                    string Original_personBorn, 
                    string Original_personPhone1, 
                    string Original_personPhone2, 
                    string Original_personAddress1, 
                    string Original_personAddress2, 
                    string Original_beforeType, 
                    global::System.Nullable<long> Original_beforeRemainMoney, 
                    global::System.Nullable<long> Original_indebtedPrice, 
                    global::System.Nullable<long> Original_creditorPrice, 
                    string Original_temp, 
                    string Original_vehicleKind, 
                    bool Original_personForInfoPP) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_personID));
            if ((Original_personFamilyAndName == null)) {
                throw new global::System.ArgumentNullException("Original_personFamilyAndName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_personFamilyAndName));
            }
            if ((Original_personelNumber == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_personelNumber));
            }
            if ((Original_nationalNumber == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_nationalNumber));
            }
            if ((Original_job == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_job));
            }
            if ((Original_fatherName == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_fatherName));
            }
            if ((Original_personNO == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_personNO));
            }
            if ((Original_personBorn == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_personBorn));
            }
            if ((Original_personPhone1 == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_personPhone1));
            }
            if ((Original_personPhone2 == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_personPhone2));
            }
            if ((Original_personAddress1 == null)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_personAddress1));
            }
            if ((Original_personAddress2 == null)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_personAddress2));
            }
            if ((Original_beforeType == null)) {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_beforeType));
            }
            if ((Original_beforeRemainMoney.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[25].Value = ((long)(Original_beforeRemainMoney.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_indebtedPrice.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[27].Value = ((long)(Original_indebtedPrice.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_creditorPrice.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[29].Value = ((long)(Original_creditorPrice.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_temp == null)) {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[31].Value = ((string)(Original_temp));
            }
            if ((Original_vehicleKind == null)) {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[33].Value = ((string)(Original_vehicleKind));
            }
            this.Adapter.DeleteCommand.Parameters[34].Value = ((bool)(Original_personForInfoPP));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string personFamilyAndName, 
                    string personelNumber, 
                    string nationalNumber, 
                    string job, 
                    string fatherName, 
                    string personNO, 
                    string personBorn, 
                    string personPhone1, 
                    string personPhone2, 
                    string personAddress1, 
                    string personAddress2, 
                    string beforeType, 
                    global::System.Nullable<long> beforeRemainMoney, 
                    global::System.Nullable<long> indebtedPrice, 
                    global::System.Nullable<long> creditorPrice, 
                    string temp, 
                    string vehicleKind, 
                    byte[] personPic, 
                    bool personForInfoPP) {
            if ((personFamilyAndName == null)) {
                throw new global::System.ArgumentNullException("personFamilyAndName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(personFamilyAndName));
            }
            if ((personelNumber == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(personelNumber));
            }
            if ((nationalNumber == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(nationalNumber));
            }
            if ((job == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(job));
            }
            if ((fatherName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(fatherName));
            }
            if ((personNO == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(personNO));
            }
            if ((personBorn == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(personBorn));
            }
            if ((personPhone1 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(personPhone1));
            }
            if ((personPhone2 == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(personPhone2));
            }
            if ((personAddress1 == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(personAddress1));
            }
            if ((personAddress2 == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(personAddress2));
            }
            if ((beforeType == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(beforeType));
            }
            if ((beforeRemainMoney.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((long)(beforeRemainMoney.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((indebtedPrice.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((long)(indebtedPrice.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((creditorPrice.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((long)(creditorPrice.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((temp == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(temp));
            }
            if ((vehicleKind == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(vehicleKind));
            }
            if ((personPic == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((byte[])(personPic));
            }
            this.Adapter.InsertCommand.Parameters[18].Value = ((bool)(personForInfoPP));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string personFamilyAndName, 
                    string personelNumber, 
                    string nationalNumber, 
                    string job, 
                    string fatherName, 
                    string personNO, 
                    string personBorn, 
                    string personPhone1, 
                    string personPhone2, 
                    string personAddress1, 
                    string personAddress2, 
                    string beforeType, 
                    global::System.Nullable<long> beforeRemainMoney, 
                    global::System.Nullable<long> indebtedPrice, 
                    global::System.Nullable<long> creditorPrice, 
                    string temp, 
                    string vehicleKind, 
                    byte[] personPic, 
                    bool personForInfoPP, 
                    int Original_personID, 
                    string Original_personFamilyAndName, 
                    string Original_personelNumber, 
                    string Original_nationalNumber, 
                    string Original_job, 
                    string Original_fatherName, 
                    string Original_personNO, 
                    string Original_personBorn, 
                    string Original_personPhone1, 
                    string Original_personPhone2, 
                    string Original_personAddress1, 
                    string Original_personAddress2, 
                    string Original_beforeType, 
                    global::System.Nullable<long> Original_beforeRemainMoney, 
                    global::System.Nullable<long> Original_indebtedPrice, 
                    global::System.Nullable<long> Original_creditorPrice, 
                    string Original_temp, 
                    string Original_vehicleKind, 
                    bool Original_personForInfoPP, 
                    int personID) {
            if ((personFamilyAndName == null)) {
                throw new global::System.ArgumentNullException("personFamilyAndName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(personFamilyAndName));
            }
            if ((personelNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(personelNumber));
            }
            if ((nationalNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(nationalNumber));
            }
            if ((job == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(job));
            }
            if ((fatherName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(fatherName));
            }
            if ((personNO == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(personNO));
            }
            if ((personBorn == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(personBorn));
            }
            if ((personPhone1 == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(personPhone1));
            }
            if ((personPhone2 == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(personPhone2));
            }
            if ((personAddress1 == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(personAddress1));
            }
            if ((personAddress2 == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(personAddress2));
            }
            if ((beforeType == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(beforeType));
            }
            if ((beforeRemainMoney.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(beforeRemainMoney.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((indebtedPrice.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(indebtedPrice.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((creditorPrice.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(creditorPrice.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((temp == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(temp));
            }
            if ((vehicleKind == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(vehicleKind));
            }
            if ((personPic == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((byte[])(personPic));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((bool)(personForInfoPP));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_personID));
            if ((Original_personFamilyAndName == null)) {
                throw new global::System.ArgumentNullException("Original_personFamilyAndName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_personFamilyAndName));
            }
            if ((Original_personelNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_personelNumber));
            }
            if ((Original_nationalNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_nationalNumber));
            }
            if ((Original_job == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_job));
            }
            if ((Original_fatherName == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_fatherName));
            }
            if ((Original_personNO == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_personNO));
            }
            if ((Original_personBorn == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_personBorn));
            }
            if ((Original_personPhone1 == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_personPhone1));
            }
            if ((Original_personPhone2 == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_personPhone2));
            }
            if ((Original_personAddress1 == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_personAddress1));
            }
            if ((Original_personAddress2 == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_personAddress2));
            }
            if ((Original_beforeType == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_beforeType));
            }
            if ((Original_beforeRemainMoney.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((long)(Original_beforeRemainMoney.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_indebtedPrice.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((long)(Original_indebtedPrice.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_creditorPrice.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((long)(Original_creditorPrice.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_temp == null)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((string)(Original_temp));
            }
            if ((Original_vehicleKind == null)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((string)(Original_vehicleKind));
            }
            this.Adapter.UpdateCommand.Parameters[53].Value = ((bool)(Original_personForInfoPP));
            this.Adapter.UpdateCommand.Parameters[54].Value = ((int)(personID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string personFamilyAndName, 
                    string personelNumber, 
                    string nationalNumber, 
                    string job, 
                    string fatherName, 
                    string personNO, 
                    string personBorn, 
                    string personPhone1, 
                    string personPhone2, 
                    string personAddress1, 
                    string personAddress2, 
                    string beforeType, 
                    global::System.Nullable<long> beforeRemainMoney, 
                    global::System.Nullable<long> indebtedPrice, 
                    global::System.Nullable<long> creditorPrice, 
                    string temp, 
                    string vehicleKind, 
                    byte[] personPic, 
                    bool personForInfoPP, 
                    int Original_personID, 
                    string Original_personFamilyAndName, 
                    string Original_personelNumber, 
                    string Original_nationalNumber, 
                    string Original_job, 
                    string Original_fatherName, 
                    string Original_personNO, 
                    string Original_personBorn, 
                    string Original_personPhone1, 
                    string Original_personPhone2, 
                    string Original_personAddress1, 
                    string Original_personAddress2, 
                    string Original_beforeType, 
                    global::System.Nullable<long> Original_beforeRemainMoney, 
                    global::System.Nullable<long> Original_indebtedPrice, 
                    global::System.Nullable<long> Original_creditorPrice, 
                    string Original_temp, 
                    string Original_vehicleKind, 
                    bool Original_personForInfoPP) {
            return this.Update(personFamilyAndName, personelNumber, nationalNumber, job, fatherName, personNO, personBorn, personPhone1, personPhone2, personAddress1, personAddress2, beforeType, beforeRemainMoney, indebtedPrice, creditorPrice, temp, vehicleKind, personPic, personForInfoPP, Original_personID, Original_personFamilyAndName, Original_personelNumber, Original_nationalNumber, Original_job, Original_fatherName, Original_personNO, Original_personBorn, Original_personPhone1, Original_personPhone2, Original_personAddress1, Original_personAddress2, Original_beforeType, Original_beforeRemainMoney, Original_indebtedPrice, Original_creditorPrice, Original_temp, Original_vehicleKind, Original_personForInfoPP, Original_personID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class projectsPersonsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public projectsPersonsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "projectsPersons";
            tableMapping.ColumnMappings.Add("projectID", "projectID");
            tableMapping.ColumnMappings.Add("personID", "personID");
            tableMapping.ColumnMappings.Add("temp", "temp");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[projectsPersons] WHERE (([projectID] = @Original_projectID) AN" +
                "D ([personID] = @Original_personID) AND ((@IsNull_temp = 1 AND [temp] IS NULL) O" +
                "R ([temp] = @Original_temp)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[projectsPersons] ([projectID], [personID], [temp]) VALUES (@pr" +
                "ojectID, @personID, @temp);\r\nSELECT projectID, personID, temp FROM projectsPerso" +
                "ns WHERE (personID = @personID) AND (projectID = @projectID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[projectsPersons] SET [projectID] = @projectID, [personID] = @personID, [temp] = @temp WHERE (([projectID] = @Original_projectID) AND ([personID] = @Original_personID) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)));
SELECT projectID, personID, temp FROM projectsPersons WHERE (personID = @personID) AND (projectID = @projectID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT projectID, personID, temp FROM dbo.projectsPersons";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.projectsPersonsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.projectsPersonsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.projectsPersonsDataTable dataTable = new PSDatabase5DataSet.projectsPersonsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.projectsPersonsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "projectsPersons");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_projectID, int Original_personID, string Original_temp) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_projectID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_personID));
            if ((Original_temp == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_temp));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int projectID, int personID, string temp) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(projectID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(personID));
            if ((temp == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(temp));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int projectID, int personID, string temp, int Original_projectID, int Original_personID, string Original_temp) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(projectID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(personID));
            if ((temp == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(temp));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_projectID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_personID));
            if ((Original_temp == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_temp));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string temp, int Original_projectID, int Original_personID, string Original_temp) {
            return this.Update(Original_projectID, Original_personID, temp, Original_projectID, Original_personID, Original_temp);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class projectsTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public projectsTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "projectsTable";
            tableMapping.ColumnMappings.Add("projectID", "projectID");
            tableMapping.ColumnMappings.Add("projectTitle", "projectTitle");
            tableMapping.ColumnMappings.Add("projectComment", "projectComment");
            tableMapping.ColumnMappings.Add("temp", "temp");
            tableMapping.ColumnMappings.Add("projectMaster", "projectMaster");
            tableMapping.ColumnMappings.Add("projectWorkRoomNumber", "projectWorkRoomNumber");
            tableMapping.ColumnMappings.Add("projectType", "projectType");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [projectsTable] WHERE (([projectID] = @Original_projectID) AND ([projectTitle] = @Original_projectTitle) AND ((@IsNull_projectComment = 1 AND [projectComment] IS NULL) OR ([projectComment] = @Original_projectComment)) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ((@IsNull_projectMaster = 1 AND [projectMaster] IS NULL) OR ([projectMaster] = @Original_projectMaster)) AND ((@IsNull_projectType = 1 AND [projectType] IS NULL) OR ([projectType] = @Original_projectType)) AND ((@IsNull_projectWorkRoomNumber = 1 AND [projectWorkRoomNumber] IS NULL) OR ([projectWorkRoomNumber] = @Original_projectWorkRoomNumber)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_projectComment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectComment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectComment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectComment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_projectMaster", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectMaster", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectMaster", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectMaster", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_projectType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_projectWorkRoomNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectWorkRoomNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectWorkRoomNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectWorkRoomNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [projectsTable] ([projectTitle], [projectComment], [temp], [projectMaster], [projectType], [projectWorkRoomNumber]) VALUES (@projectTitle, @projectComment, @temp, @projectMaster, @projectType, @projectWorkRoomNumber);
SELECT projectID, projectTitle, projectComment, temp, projectMaster, projectType, projectWorkRoomNumber FROM projectsTable WHERE (projectID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectComment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectComment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectMaster", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectMaster", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectWorkRoomNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectWorkRoomNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [projectsTable] SET [projectTitle] = @projectTitle, [projectComment] = @projectComment, [temp] = @temp, [projectMaster] = @projectMaster, [projectType] = @projectType, [projectWorkRoomNumber] = @projectWorkRoomNumber WHERE (([projectID] = @Original_projectID) AND ([projectTitle] = @Original_projectTitle) AND ((@IsNull_projectComment = 1 AND [projectComment] IS NULL) OR ([projectComment] = @Original_projectComment)) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ((@IsNull_projectMaster = 1 AND [projectMaster] IS NULL) OR ([projectMaster] = @Original_projectMaster)) AND ((@IsNull_projectType = 1 AND [projectType] IS NULL) OR ([projectType] = @Original_projectType)) AND ((@IsNull_projectWorkRoomNumber = 1 AND [projectWorkRoomNumber] IS NULL) OR ([projectWorkRoomNumber] = @Original_projectWorkRoomNumber)));
SELECT projectID, projectTitle, projectComment, temp, projectMaster, projectType, projectWorkRoomNumber FROM projectsTable WHERE (projectID = @projectID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectComment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectComment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectMaster", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectMaster", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectWorkRoomNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectWorkRoomNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_projectComment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectComment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectComment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectComment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_projectMaster", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectMaster", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectMaster", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectMaster", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_projectType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_projectWorkRoomNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectWorkRoomNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectWorkRoomNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectWorkRoomNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT projectID, projectTitle, projectComment, temp, projectMaster, projectType," +
                " projectWorkRoomNumber FROM projectsTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.projectsTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.projectsTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.projectsTableDataTable dataTable = new PSDatabase5DataSet.projectsTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.projectsTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "projectsTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_projectID, string Original_projectTitle, string Original_projectComment, string Original_temp, string Original_projectMaster, string Original_projectType, string Original_projectWorkRoomNumber) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_projectID));
            if ((Original_projectTitle == null)) {
                throw new global::System.ArgumentNullException("Original_projectTitle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_projectTitle));
            }
            if ((Original_projectComment == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_projectComment));
            }
            if ((Original_temp == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_temp));
            }
            if ((Original_projectMaster == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_projectMaster));
            }
            if ((Original_projectType == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_projectType));
            }
            if ((Original_projectWorkRoomNumber == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_projectWorkRoomNumber));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string projectTitle, string projectComment, string temp, string projectMaster, string projectType, string projectWorkRoomNumber) {
            if ((projectTitle == null)) {
                throw new global::System.ArgumentNullException("projectTitle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(projectTitle));
            }
            if ((projectComment == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(projectComment));
            }
            if ((temp == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(temp));
            }
            if ((projectMaster == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(projectMaster));
            }
            if ((projectType == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(projectType));
            }
            if ((projectWorkRoomNumber == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(projectWorkRoomNumber));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string projectTitle, string projectComment, string temp, string projectMaster, string projectType, string projectWorkRoomNumber, int Original_projectID, string Original_projectTitle, string Original_projectComment, string Original_temp, string Original_projectMaster, string Original_projectType, string Original_projectWorkRoomNumber, int projectID) {
            if ((projectTitle == null)) {
                throw new global::System.ArgumentNullException("projectTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(projectTitle));
            }
            if ((projectComment == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(projectComment));
            }
            if ((temp == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(temp));
            }
            if ((projectMaster == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(projectMaster));
            }
            if ((projectType == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(projectType));
            }
            if ((projectWorkRoomNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(projectWorkRoomNumber));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_projectID));
            if ((Original_projectTitle == null)) {
                throw new global::System.ArgumentNullException("Original_projectTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_projectTitle));
            }
            if ((Original_projectComment == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_projectComment));
            }
            if ((Original_temp == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_temp));
            }
            if ((Original_projectMaster == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_projectMaster));
            }
            if ((Original_projectType == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_projectType));
            }
            if ((Original_projectWorkRoomNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_projectWorkRoomNumber));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(projectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string projectTitle, string projectComment, string temp, string projectMaster, string projectType, string projectWorkRoomNumber, int Original_projectID, string Original_projectTitle, string Original_projectComment, string Original_temp, string Original_projectMaster, string Original_projectType, string Original_projectWorkRoomNumber) {
            return this.Update(projectTitle, projectComment, temp, projectMaster, projectType, projectWorkRoomNumber, Original_projectID, Original_projectTitle, Original_projectComment, Original_temp, Original_projectMaster, Original_projectType, Original_projectWorkRoomNumber, Original_projectID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class spentDefTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public spentDefTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "spentDef";
            tableMapping.ColumnMappings.Add("spentDefID", "spentDefID");
            tableMapping.ColumnMappings.Add("spentMasterID", "spentMasterID");
            tableMapping.ColumnMappings.Add("spentDefName", "spentDefName");
            tableMapping.ColumnMappings.Add("temp", "temp");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[spentDef] WHERE (([spentDefID] = @Original_spentDefID) AND ([s" +
                "pentMasterID] = @Original_spentMasterID) AND ([spentDefName] = @Original_spentDe" +
                "fName) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)))" +
                "";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentDefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentDefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMasterID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentDefName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentDefName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[spentDef] ([spentMasterID], [spentDefName], [temp]) VALUES (@s" +
                "pentMasterID, @spentDefName, @temp);\r\nSELECT spentDefID, spentMasterID, spentDef" +
                "Name, temp FROM spentDef WHERE (spentDefID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentMasterID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentDefName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentDefName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[spentDef] SET [spentMasterID] = @spentMasterID, [spentDefName] = @spentDefName, [temp] = @temp WHERE (([spentDefID] = @Original_spentDefID) AND ([spentMasterID] = @Original_spentMasterID) AND ([spentDefName] = @Original_spentDefName) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)));
SELECT spentDefID, spentMasterID, spentDefName, temp FROM spentDef WHERE (spentDefID = @spentDefID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentMasterID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentDefName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentDefName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentDefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentDefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMasterID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentDefName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentDefName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentDefID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "spentDefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT spentDefID, spentMasterID, spentDefName, temp FROM dbo.spentDef";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.spentDefDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.spentDefDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.spentDefDataTable dataTable = new PSDatabase5DataSet.spentDefDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.spentDefDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "spentDef");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_spentDefID, int Original_spentMasterID, string Original_spentDefName, string Original_temp) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_spentDefID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_spentMasterID));
            if ((Original_spentDefName == null)) {
                throw new global::System.ArgumentNullException("Original_spentDefName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_spentDefName));
            }
            if ((Original_temp == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_temp));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int spentMasterID, string spentDefName, string temp) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(spentMasterID));
            if ((spentDefName == null)) {
                throw new global::System.ArgumentNullException("spentDefName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(spentDefName));
            }
            if ((temp == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(temp));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int spentMasterID, string spentDefName, string temp, int Original_spentDefID, int Original_spentMasterID, string Original_spentDefName, string Original_temp, int spentDefID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(spentMasterID));
            if ((spentDefName == null)) {
                throw new global::System.ArgumentNullException("spentDefName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(spentDefName));
            }
            if ((temp == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(temp));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_spentDefID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_spentMasterID));
            if ((Original_spentDefName == null)) {
                throw new global::System.ArgumentNullException("Original_spentDefName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_spentDefName));
            }
            if ((Original_temp == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_temp));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(spentDefID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int spentMasterID, string spentDefName, string temp, int Original_spentDefID, int Original_spentMasterID, string Original_spentDefName, string Original_temp) {
            return this.Update(spentMasterID, spentDefName, temp, Original_spentDefID, Original_spentMasterID, Original_spentDefName, Original_temp, Original_spentDefID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class spentMasterTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public spentMasterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "spentMaster";
            tableMapping.ColumnMappings.Add("spentMasterID", "spentMasterID");
            tableMapping.ColumnMappings.Add("spentMasterName", "spentMasterName");
            tableMapping.ColumnMappings.Add("spentMaster_detailType", "spentMaster_detailType");
            tableMapping.ColumnMappings.Add("spentMaster_required", "spentMaster_required");
            tableMapping.ColumnMappings.Add("spentMaster_kind", "spentMaster_kind");
            tableMapping.ColumnMappings.Add("spentGroup_id", "spentGroup_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [spentMaster] WHERE (([spentMasterID] = @Original_spentMasterID) AND ([spentMasterName] = @Original_spentMasterName) AND ([spentMaster_detailType] = @Original_spentMaster_detailType) AND ([spentMaster_required] = @Original_spentMaster_required) AND ([spentMaster_kind] = @Original_spentMaster_kind) AND ([spentGroup_id] = @Original_spentGroup_id))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMasterID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMasterName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMaster_detailType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMaster_detailType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMaster_required", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMaster_required", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMaster_kind", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMaster_kind", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentGroup_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentGroup_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [spentMaster] ([spentMasterName], [spentMaster_detailType], [spentMaster_required], [spentMaster_kind], [spentGroup_id]) VALUES (@spentMasterName, @spentMaster_detailType, @spentMaster_required, @spentMaster_kind, @spentGroup_id);
SELECT spentMasterID, spentMasterName, spentMaster_detailType, spentMaster_required, spentMaster_kind, spentGroup_id FROM spentMaster WHERE (spentMasterID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentMasterName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentMaster_detailType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMaster_detailType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentMaster_required", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMaster_required", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentMaster_kind", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMaster_kind", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentGroup_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentGroup_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [spentMaster] SET [spentMasterName] = @spentMasterName, [spentMaster_detailType] = @spentMaster_detailType, [spentMaster_required] = @spentMaster_required, [spentMaster_kind] = @spentMaster_kind, [spentGroup_id] = @spentGroup_id WHERE (([spentMasterID] = @Original_spentMasterID) AND ([spentMasterName] = @Original_spentMasterName) AND ([spentMaster_detailType] = @Original_spentMaster_detailType) AND ([spentMaster_required] = @Original_spentMaster_required) AND ([spentMaster_kind] = @Original_spentMaster_kind) AND ([spentGroup_id] = @Original_spentGroup_id));
SELECT spentMasterID, spentMasterName, spentMaster_detailType, spentMaster_required, spentMaster_kind, spentGroup_id FROM spentMaster WHERE (spentMasterID = @spentMasterID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentMasterName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentMaster_detailType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMaster_detailType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentMaster_required", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMaster_required", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentMaster_kind", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMaster_kind", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentGroup_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentGroup_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMasterID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMasterName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMaster_detailType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMaster_detailType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMaster_required", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMaster_required", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMaster_kind", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMaster_kind", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentGroup_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentGroup_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentMasterID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT spentMasterID, spentMasterName, spentMaster_detailType, spentMaster_requir" +
                "ed, spentMaster_kind, spentGroup_id FROM spentMaster";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.spentMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.spentMasterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.spentMasterDataTable dataTable = new PSDatabase5DataSet.spentMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.spentMasterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "spentMaster");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_spentMasterID, string Original_spentMasterName, int Original_spentMaster_detailType, bool Original_spentMaster_required, int Original_spentMaster_kind, int Original_spentGroup_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_spentMasterID));
            if ((Original_spentMasterName == null)) {
                throw new global::System.ArgumentNullException("Original_spentMasterName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_spentMasterName));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_spentMaster_detailType));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_spentMaster_required));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_spentMaster_kind));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_spentGroup_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string spentMasterName, int spentMaster_detailType, bool spentMaster_required, int spentMaster_kind, int spentGroup_id) {
            if ((spentMasterName == null)) {
                throw new global::System.ArgumentNullException("spentMasterName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(spentMasterName));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(spentMaster_detailType));
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(spentMaster_required));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(spentMaster_kind));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(spentGroup_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string spentMasterName, int spentMaster_detailType, bool spentMaster_required, int spentMaster_kind, int spentGroup_id, int Original_spentMasterID, string Original_spentMasterName, int Original_spentMaster_detailType, bool Original_spentMaster_required, int Original_spentMaster_kind, int Original_spentGroup_id, int spentMasterID) {
            if ((spentMasterName == null)) {
                throw new global::System.ArgumentNullException("spentMasterName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(spentMasterName));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(spentMaster_detailType));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(spentMaster_required));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(spentMaster_kind));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(spentGroup_id));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_spentMasterID));
            if ((Original_spentMasterName == null)) {
                throw new global::System.ArgumentNullException("Original_spentMasterName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_spentMasterName));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_spentMaster_detailType));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Original_spentMaster_required));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_spentMaster_kind));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_spentGroup_id));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(spentMasterID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string spentMasterName, int spentMaster_detailType, bool spentMaster_required, int spentMaster_kind, int spentGroup_id, int Original_spentMasterID, string Original_spentMasterName, int Original_spentMaster_detailType, bool Original_spentMaster_required, int Original_spentMaster_kind, int Original_spentGroup_id) {
            return this.Update(spentMasterName, spentMaster_detailType, spentMaster_required, spentMaster_kind, spentGroup_id, Original_spentMasterID, Original_spentMasterName, Original_spentMaster_detailType, Original_spentMaster_required, Original_spentMaster_kind, Original_spentGroup_id, Original_spentMasterID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class detractDefTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public detractDefTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "detractDef";
            tableMapping.ColumnMappings.Add("detractDefID", "detractDefID");
            tableMapping.ColumnMappings.Add("pensionID", "pensionID");
            tableMapping.ColumnMappings.Add("defName", "defName");
            tableMapping.ColumnMappings.Add("temp", "temp");
            tableMapping.ColumnMappings.Add("defValue", "defValue");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [detractDef] WHERE (([detractDefID] = @Original_detractDefID) AND ([pensionID] = @Original_pensionID) AND ([defName] = @Original_defName) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ([defValue] = @Original_defValue))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_detractDefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractDefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_defName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "defName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_defValue", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "defValue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [detractDef] ([pensionID], [defName], [temp], [defValue]) VALUES (@pe" +
                "nsionID, @defName, @temp, @defValue);\r\nSELECT detractDefID, pensionID, defName, " +
                "temp, defValue FROM detractDef WHERE (detractDefID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@defName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "defName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@defValue", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "defValue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [detractDef] SET [pensionID] = @pensionID, [defName] = @defName, [temp] = @temp, [defValue] = @defValue WHERE (([detractDefID] = @Original_detractDefID) AND ([pensionID] = @Original_pensionID) AND ([defName] = @Original_defName) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ([defValue] = @Original_defValue));
SELECT detractDefID, pensionID, defName, temp, defValue FROM detractDef WHERE (detractDefID = @detractDefID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@defName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "defName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@defValue", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "defValue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_detractDefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractDefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_defName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "defName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_defValue", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "defValue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@detractDefID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "detractDefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT detractDefID, pensionID, defName, temp, defValue FROM detractDef";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.detractDefDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.detractDefDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.detractDefDataTable dataTable = new PSDatabase5DataSet.detractDefDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.detractDefDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "detractDef");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_detractDefID, int Original_pensionID, string Original_defName, string Original_temp, long Original_defValue) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_detractDefID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_pensionID));
            if ((Original_defName == null)) {
                throw new global::System.ArgumentNullException("Original_defName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_defName));
            }
            if ((Original_temp == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_temp));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_defValue));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int pensionID, string defName, string temp, long defValue) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(pensionID));
            if ((defName == null)) {
                throw new global::System.ArgumentNullException("defName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(defName));
            }
            if ((temp == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(temp));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(defValue));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pensionID, string defName, string temp, long defValue, int Original_detractDefID, int Original_pensionID, string Original_defName, string Original_temp, long Original_defValue, int detractDefID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(pensionID));
            if ((defName == null)) {
                throw new global::System.ArgumentNullException("defName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(defName));
            }
            if ((temp == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(temp));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(defValue));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_detractDefID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_pensionID));
            if ((Original_defName == null)) {
                throw new global::System.ArgumentNullException("Original_defName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_defName));
            }
            if ((Original_temp == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_temp));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_defValue));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(detractDefID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pensionID, string defName, string temp, long defValue, int Original_detractDefID, int Original_pensionID, string Original_defName, string Original_temp, long Original_defValue) {
            return this.Update(pensionID, defName, temp, defValue, Original_detractDefID, Original_pensionID, Original_defName, Original_temp, Original_defValue, Original_detractDefID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class pensionDefTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public pensionDefTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "pensionDef";
            tableMapping.ColumnMappings.Add("pensionDefID", "pensionDefID");
            tableMapping.ColumnMappings.Add("pensionID", "pensionID");
            tableMapping.ColumnMappings.Add("temp", "temp");
            tableMapping.ColumnMappings.Add("pensionName", "pensionName");
            tableMapping.ColumnMappings.Add("pensionValue", "pensionValue");
            tableMapping.ColumnMappings.Add("detractName", "detractName");
            tableMapping.ColumnMappings.Add("detractValue", "detractValue");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [pensionDef] WHERE (([pensionDefID] = @Original_pensionDefID) AND ([pensionID] = @Original_pensionID) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ((@IsNull_detractName = 1 AND [detractName] IS NULL) OR ([detractName] = @Original_detractName)) AND ((@IsNull_detractValue = 1 AND [detractValue] IS NULL) OR ([detractValue] = @Original_detractValue)) AND ((@IsNull_pensionName = 1 AND [pensionName] IS NULL) OR ([pensionName] = @Original_pensionName)) AND ((@IsNull_pensionValue = 1 AND [pensionValue] IS NULL) OR ([pensionValue] = @Original_pensionValue)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionDefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionDefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_detractName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_detractName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_detractValue", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractValue", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_detractValue", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractValue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_pensionName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_pensionValue", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionValue", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionValue", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionValue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [pensionDef] ([pensionID], [temp], [detractName], [detractValue], [pensionName], [pensionValue]) VALUES (@pensionID, @temp, @detractName, @detractValue, @pensionName, @pensionValue);
SELECT pensionDefID, pensionID, temp, detractName, detractValue, pensionName, pensionValue FROM pensionDef WHERE (pensionDefID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@detractName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@detractValue", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractValue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pensionName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pensionValue", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionValue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [pensionDef] SET [pensionID] = @pensionID, [temp] = @temp, [detractName] = @detractName, [detractValue] = @detractValue, [pensionName] = @pensionName, [pensionValue] = @pensionValue WHERE (([pensionDefID] = @Original_pensionDefID) AND ([pensionID] = @Original_pensionID) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ((@IsNull_detractName = 1 AND [detractName] IS NULL) OR ([detractName] = @Original_detractName)) AND ((@IsNull_detractValue = 1 AND [detractValue] IS NULL) OR ([detractValue] = @Original_detractValue)) AND ((@IsNull_pensionName = 1 AND [pensionName] IS NULL) OR ([pensionName] = @Original_pensionName)) AND ((@IsNull_pensionValue = 1 AND [pensionValue] IS NULL) OR ([pensionValue] = @Original_pensionValue)));
SELECT pensionDefID, pensionID, temp, detractName, detractValue, pensionName, pensionValue FROM pensionDef WHERE (pensionDefID = @pensionDefID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@detractName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@detractValue", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractValue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pensionName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pensionValue", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionValue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionDefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionDefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_detractName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_detractName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_detractValue", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractValue", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_detractValue", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detractValue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_pensionName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_pensionValue", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionValue", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionValue", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionValue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pensionDefID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "pensionDefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT pensionDefID, pensionID, temp, detractName, detractValue, pensionName, pen" +
                "sionValue FROM pensionDef";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.pensionDefDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.pensionDefDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.pensionDefDataTable dataTable = new PSDatabase5DataSet.pensionDefDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.pensionDefDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "pensionDef");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_pensionDefID, int Original_pensionID, string Original_temp, string Original_detractName, global::System.Nullable<long> Original_detractValue, string Original_pensionName, global::System.Nullable<long> Original_pensionValue) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_pensionDefID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_pensionID));
            if ((Original_temp == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_temp));
            }
            if ((Original_detractName == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_detractName));
            }
            if ((Original_detractValue.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_detractValue.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_pensionName == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_pensionName));
            }
            if ((Original_pensionValue.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((long)(Original_pensionValue.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int pensionID, string temp, string detractName, global::System.Nullable<long> detractValue, string pensionName, global::System.Nullable<long> pensionValue) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(pensionID));
            if ((temp == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(temp));
            }
            if ((detractName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(detractName));
            }
            if ((detractValue.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(detractValue.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((pensionName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(pensionName));
            }
            if ((pensionValue.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((long)(pensionValue.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pensionID, string temp, string detractName, global::System.Nullable<long> detractValue, string pensionName, global::System.Nullable<long> pensionValue, int Original_pensionDefID, int Original_pensionID, string Original_temp, string Original_detractName, global::System.Nullable<long> Original_detractValue, string Original_pensionName, global::System.Nullable<long> Original_pensionValue, int pensionDefID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(pensionID));
            if ((temp == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(temp));
            }
            if ((detractName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(detractName));
            }
            if ((detractValue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(detractValue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((pensionName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(pensionName));
            }
            if ((pensionValue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(pensionValue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_pensionDefID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_pensionID));
            if ((Original_temp == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_temp));
            }
            if ((Original_detractName == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_detractName));
            }
            if ((Original_detractValue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_detractValue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_pensionName == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_pensionName));
            }
            if ((Original_pensionValue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_pensionValue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(pensionDefID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pensionID, string temp, string detractName, global::System.Nullable<long> detractValue, string pensionName, global::System.Nullable<long> pensionValue, int Original_pensionDefID, int Original_pensionID, string Original_temp, string Original_detractName, global::System.Nullable<long> Original_detractValue, string Original_pensionName, global::System.Nullable<long> Original_pensionValue) {
            return this.Update(pensionID, temp, detractName, detractValue, pensionName, pensionValue, Original_pensionDefID, Original_pensionID, Original_temp, Original_detractName, Original_detractValue, Original_pensionName, Original_pensionValue, Original_pensionDefID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class pensionsTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public pensionsTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "pensionsTable";
            tableMapping.ColumnMappings.Add("pensionID", "pensionID");
            tableMapping.ColumnMappings.Add("personID", "personID");
            tableMapping.ColumnMappings.Add("projectID", "projectID");
            tableMapping.ColumnMappings.Add("basePension", "basePension");
            tableMapping.ColumnMappings.Add("overtimePension", "overtimePension");
            tableMapping.ColumnMappings.Add("taxDetraction", "taxDetraction");
            tableMapping.ColumnMappings.Add("insuranceDetraction", "insuranceDetraction");
            tableMapping.ColumnMappings.Add("workedDays", "workedDays");
            tableMapping.ColumnMappings.Add("overtimeHours", "overtimeHours");
            tableMapping.ColumnMappings.Add("temp", "temp");
            tableMapping.ColumnMappings.Add("dDate", "dDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [pensionsTable] WHERE (([pensionID] = @Original_pensionID) AND ([personID] = @Original_personID) AND ([projectID] = @Original_projectID) AND ([basePension] = @Original_basePension) AND ([overtimePension] = @Original_overtimePension) AND ([taxDetraction] = @Original_taxDetraction) AND ([insuranceDetraction] = @Original_insuranceDetraction) AND ([workedDays] = @Original_workedDays) AND ([overtimeHours] = @Original_overtimeHours) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ([dDate] = @Original_dDate))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_basePension", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "basePension", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_overtimePension", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "overtimePension", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_taxDetraction", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "taxDetraction", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_insuranceDetraction", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "insuranceDetraction", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_workedDays", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "workedDays", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_overtimeHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "overtimeHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [pensionsTable] ([personID], [projectID], [basePension], [overtimePension], [taxDetraction], [insuranceDetraction], [workedDays], [overtimeHours], [temp], [dDate]) VALUES (@personID, @projectID, @basePension, @overtimePension, @taxDetraction, @insuranceDetraction, @workedDays, @overtimeHours, @temp, @dDate);
SELECT pensionID, personID, projectID, basePension, overtimePension, taxDetraction, insuranceDetraction, workedDays, overtimeHours, temp, dDate FROM pensionsTable WHERE (pensionID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@basePension", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "basePension", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@overtimePension", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "overtimePension", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@taxDetraction", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "taxDetraction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@insuranceDetraction", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "insuranceDetraction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@workedDays", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "workedDays", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@overtimeHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "overtimeHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [pensionsTable] SET [personID] = @personID, [projectID] = @projectID, [basePension] = @basePension, [overtimePension] = @overtimePension, [taxDetraction] = @taxDetraction, [insuranceDetraction] = @insuranceDetraction, [workedDays] = @workedDays, [overtimeHours] = @overtimeHours, [temp] = @temp, [dDate] = @dDate WHERE (([pensionID] = @Original_pensionID) AND ([personID] = @Original_personID) AND ([projectID] = @Original_projectID) AND ([basePension] = @Original_basePension) AND ([overtimePension] = @Original_overtimePension) AND ([taxDetraction] = @Original_taxDetraction) AND ([insuranceDetraction] = @Original_insuranceDetraction) AND ([workedDays] = @Original_workedDays) AND ([overtimeHours] = @Original_overtimeHours) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ([dDate] = @Original_dDate));
SELECT pensionID, personID, projectID, basePension, overtimePension, taxDetraction, insuranceDetraction, workedDays, overtimeHours, temp, dDate FROM pensionsTable WHERE (pensionID = @pensionID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@basePension", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "basePension", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@overtimePension", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "overtimePension", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@taxDetraction", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "taxDetraction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@insuranceDetraction", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "insuranceDetraction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@workedDays", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "workedDays", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@overtimeHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "overtimeHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_basePension", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "basePension", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_overtimePension", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "overtimePension", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_taxDetraction", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "taxDetraction", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_insuranceDetraction", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "insuranceDetraction", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_workedDays", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "workedDays", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_overtimeHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "overtimeHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pensionID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT pensionID, personID, projectID, basePension, overtimePension, taxDetractio" +
                "n, insuranceDetraction, workedDays, overtimeHours, temp, dDate FROM pensionsTabl" +
                "e";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.pensionsTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.pensionsTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.pensionsTableDataTable dataTable = new PSDatabase5DataSet.pensionsTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.pensionsTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "pensionsTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_pensionID, int Original_personID, int Original_projectID, long Original_basePension, long Original_overtimePension, long Original_taxDetraction, long Original_insuranceDetraction, int Original_workedDays, int Original_overtimeHours, string Original_temp, string Original_dDate) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_pensionID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_personID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_projectID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_basePension));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_overtimePension));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_taxDetraction));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_insuranceDetraction));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_workedDays));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_overtimeHours));
            if ((Original_temp == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_temp));
            }
            if ((Original_dDate == null)) {
                throw new global::System.ArgumentNullException("Original_dDate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_dDate));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int personID, int projectID, long basePension, long overtimePension, long taxDetraction, long insuranceDetraction, int workedDays, int overtimeHours, string temp, string dDate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(personID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(projectID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(basePension));
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(overtimePension));
            this.Adapter.InsertCommand.Parameters[4].Value = ((long)(taxDetraction));
            this.Adapter.InsertCommand.Parameters[5].Value = ((long)(insuranceDetraction));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(workedDays));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(overtimeHours));
            if ((temp == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(temp));
            }
            if ((dDate == null)) {
                throw new global::System.ArgumentNullException("dDate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(dDate));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int personID, 
                    int projectID, 
                    long basePension, 
                    long overtimePension, 
                    long taxDetraction, 
                    long insuranceDetraction, 
                    int workedDays, 
                    int overtimeHours, 
                    string temp, 
                    string dDate, 
                    int Original_pensionID, 
                    int Original_personID, 
                    int Original_projectID, 
                    long Original_basePension, 
                    long Original_overtimePension, 
                    long Original_taxDetraction, 
                    long Original_insuranceDetraction, 
                    int Original_workedDays, 
                    int Original_overtimeHours, 
                    string Original_temp, 
                    string Original_dDate, 
                    int pensionID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(personID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(projectID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(basePension));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(overtimePension));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(taxDetraction));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(insuranceDetraction));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(workedDays));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(overtimeHours));
            if ((temp == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(temp));
            }
            if ((dDate == null)) {
                throw new global::System.ArgumentNullException("dDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(dDate));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_pensionID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_personID));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_projectID));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_basePension));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(Original_overtimePension));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(Original_taxDetraction));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(Original_insuranceDetraction));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_workedDays));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_overtimeHours));
            if ((Original_temp == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_temp));
            }
            if ((Original_dDate == null)) {
                throw new global::System.ArgumentNullException("Original_dDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_dDate));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(pensionID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int personID, 
                    int projectID, 
                    long basePension, 
                    long overtimePension, 
                    long taxDetraction, 
                    long insuranceDetraction, 
                    int workedDays, 
                    int overtimeHours, 
                    string temp, 
                    string dDate, 
                    int Original_pensionID, 
                    int Original_personID, 
                    int Original_projectID, 
                    long Original_basePension, 
                    long Original_overtimePension, 
                    long Original_taxDetraction, 
                    long Original_insuranceDetraction, 
                    int Original_workedDays, 
                    int Original_overtimeHours, 
                    string Original_temp, 
                    string Original_dDate) {
            return this.Update(personID, projectID, basePension, overtimePension, taxDetraction, insuranceDetraction, workedDays, overtimeHours, temp, dDate, Original_pensionID, Original_personID, Original_projectID, Original_basePension, Original_overtimePension, Original_taxDetraction, Original_insuranceDetraction, Original_workedDays, Original_overtimeHours, Original_temp, Original_dDate, Original_pensionID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class docsTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public docsTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "docsTable";
            tableMapping.ColumnMappings.Add("docID", "docID");
            tableMapping.ColumnMappings.Add("price", "price");
            tableMapping.ColumnMappings.Add("docType", "docType");
            tableMapping.ColumnMappings.Add("docComment", "docComment");
            tableMapping.ColumnMappings.Add("temp", "temp");
            tableMapping.ColumnMappings.Add("projectID", "projectID");
            tableMapping.ColumnMappings.Add("personID", "personID");
            tableMapping.ColumnMappings.Add("dDate", "dDate");
            tableMapping.ColumnMappings.Add("bankID", "bankID");
            tableMapping.ColumnMappings.Add("accountID", "accountID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [docsTable] WHERE (([docID] = @Original_docID) AND ([price] = @Original_price) AND ([docType] = @Original_docType) AND ((@IsNull_docComment = 1 AND [docComment] IS NULL) OR ([docComment] = @Original_docComment)) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ([personID] = @Original_personID) AND ([projectID] = @Original_projectID) AND ([dDate] = @Original_dDate) AND ((@IsNull_accountID = 1 AND [accountID] IS NULL) OR ([accountID] = @Original_accountID)) AND ((@IsNull_bankID = 1 AND [bankID] IS NULL) OR ([bankID] = @Original_bankID)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_docID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "price", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_docType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_docComment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docComment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_docComment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docComment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [docsTable] ([docID], [price], [docType], [docComment], [temp], [personID], [projectID], [dDate], [accountID], [bankID]) VALUES (@docID, @price, @docType, @docComment, @temp, @personID, @projectID, @dDate, @accountID, @bankID);
SELECT docID, price, docType, docComment, temp, personID, projectID, dDate, accountID, bankID FROM docsTable WHERE (docID = @docID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@docID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "price", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@docType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@docComment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docComment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [docsTable] SET [docID] = @docID, [price] = @price, [docType] = @docType, [docComment] = @docComment, [temp] = @temp, [personID] = @personID, [projectID] = @projectID, [dDate] = @dDate, [accountID] = @accountID, [bankID] = @bankID WHERE (([docID] = @Original_docID) AND ([price] = @Original_price) AND ([docType] = @Original_docType) AND ((@IsNull_docComment = 1 AND [docComment] IS NULL) OR ([docComment] = @Original_docComment)) AND ((@IsNull_temp = 1 AND [temp] IS NULL) OR ([temp] = @Original_temp)) AND ([personID] = @Original_personID) AND ([projectID] = @Original_projectID) AND ([dDate] = @Original_dDate) AND ((@IsNull_accountID = 1 AND [accountID] IS NULL) OR ([accountID] = @Original_accountID)) AND ((@IsNull_bankID = 1 AND [bankID] IS NULL) OR ([bankID] = @Original_bankID)));
SELECT docID, price, docType, docComment, temp, personID, projectID, dDate, accountID, bankID FROM docsTable WHERE (docID = @docID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@docID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "price", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@docType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@docComment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docComment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_docID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "price", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_docType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_docComment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docComment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_docComment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docComment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_temp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temp", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bankID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bankID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT docID, price, docType, docComment, temp, personID, projectID, dDate, accou" +
                "ntID, bankID FROM docsTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.docsTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.docsTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.docsTableDataTable dataTable = new PSDatabase5DataSet.docsTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.docsTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "docsTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_docID, long Original_price, string Original_docType, string Original_docComment, string Original_temp, int Original_personID, int Original_projectID, string Original_dDate, global::System.Nullable<int> Original_accountID, global::System.Nullable<int> Original_bankID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_docID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_price));
            if ((Original_docType == null)) {
                throw new global::System.ArgumentNullException("Original_docType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_docType));
            }
            if ((Original_docComment == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_docComment));
            }
            if ((Original_temp == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_temp));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_personID));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_projectID));
            if ((Original_dDate == null)) {
                throw new global::System.ArgumentNullException("Original_dDate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_dDate));
            }
            if ((Original_accountID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_accountID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_bankID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((int)(Original_bankID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long docID, long price, string docType, string docComment, string temp, int personID, int projectID, string dDate, global::System.Nullable<int> accountID, global::System.Nullable<int> bankID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(docID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(price));
            if ((docType == null)) {
                throw new global::System.ArgumentNullException("docType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(docType));
            }
            if ((docComment == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(docComment));
            }
            if ((temp == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(temp));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(personID));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(projectID));
            if ((dDate == null)) {
                throw new global::System.ArgumentNullException("dDate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(dDate));
            }
            if ((accountID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(accountID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((bankID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(bankID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long docID, 
                    long price, 
                    string docType, 
                    string docComment, 
                    string temp, 
                    int personID, 
                    int projectID, 
                    string dDate, 
                    global::System.Nullable<int> accountID, 
                    global::System.Nullable<int> bankID, 
                    long Original_docID, 
                    long Original_price, 
                    string Original_docType, 
                    string Original_docComment, 
                    string Original_temp, 
                    int Original_personID, 
                    int Original_projectID, 
                    string Original_dDate, 
                    global::System.Nullable<int> Original_accountID, 
                    global::System.Nullable<int> Original_bankID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(docID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(price));
            if ((docType == null)) {
                throw new global::System.ArgumentNullException("docType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(docType));
            }
            if ((docComment == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(docComment));
            }
            if ((temp == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(temp));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(personID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(projectID));
            if ((dDate == null)) {
                throw new global::System.ArgumentNullException("dDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(dDate));
            }
            if ((accountID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(accountID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((bankID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(bankID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_docID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_price));
            if ((Original_docType == null)) {
                throw new global::System.ArgumentNullException("Original_docType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_docType));
            }
            if ((Original_docComment == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_docComment));
            }
            if ((Original_temp == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_temp));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_personID));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_projectID));
            if ((Original_dDate == null)) {
                throw new global::System.ArgumentNullException("Original_dDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_dDate));
            }
            if ((Original_accountID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_accountID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_bankID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_bankID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long price, 
                    string docType, 
                    string docComment, 
                    string temp, 
                    int personID, 
                    int projectID, 
                    string dDate, 
                    global::System.Nullable<int> accountID, 
                    global::System.Nullable<int> bankID, 
                    long Original_docID, 
                    long Original_price, 
                    string Original_docType, 
                    string Original_docComment, 
                    string Original_temp, 
                    int Original_personID, 
                    int Original_projectID, 
                    string Original_dDate, 
                    global::System.Nullable<int> Original_accountID, 
                    global::System.Nullable<int> Original_bankID) {
            return this.Update(Original_docID, price, docType, docComment, temp, personID, projectID, dDate, accountID, bankID, Original_docID, Original_price, Original_docType, Original_docComment, Original_temp, Original_personID, Original_projectID, Original_dDate, Original_accountID, Original_bankID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View1TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View1";
            tableMapping.ColumnMappings.Add("chequeNumber", "chequeNumber");
            tableMapping.ColumnMappings.Add("issuanceDate", "issuanceDate");
            tableMapping.ColumnMappings.Add("usanceDate", "usanceDate");
            tableMapping.ColumnMappings.Add("projectTitle", "projectTitle");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT chequeNumber, issuanceDate, usanceDate, projectTitle FROM dbo.View1";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.View1DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.View1DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.View1DataTable dataTable = new PSDatabase5DataSet.View1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class pensionsViewTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public pensionsViewTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "pensionsView";
            tableMapping.ColumnMappings.Add("personelNumber", "personelNumber");
            tableMapping.ColumnMappings.Add("personFamilyAndName", "personFamilyAndName");
            tableMapping.ColumnMappings.Add("nationalNumber", "nationalNumber");
            tableMapping.ColumnMappings.Add("fatherName", "fatherName");
            tableMapping.ColumnMappings.Add("job", "job");
            tableMapping.ColumnMappings.Add("projectTitle", "projectTitle");
            tableMapping.ColumnMappings.Add("basePension", "basePension");
            tableMapping.ColumnMappings.Add("overtimePension", "overtimePension");
            tableMapping.ColumnMappings.Add("taxDetraction", "taxDetraction");
            tableMapping.ColumnMappings.Add("insuranceDetraction", "insuranceDetraction");
            tableMapping.ColumnMappings.Add("workedDays", "workedDays");
            tableMapping.ColumnMappings.Add("overtimeHours", "overtimeHours");
            tableMapping.ColumnMappings.Add("personNO", "personNO");
            tableMapping.ColumnMappings.Add("personBorn", "personBorn");
            tableMapping.ColumnMappings.Add("dDate", "dDate");
            tableMapping.ColumnMappings.Add("pensionID", "pensionID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT personelNumber, personFamilyAndName, nationalNumber, fatherName, job, proj" +
                "ectTitle, basePension, overtimePension, taxDetraction, insuranceDetraction, work" +
                "edDays, overtimeHours, personNO, personBorn, dDate, pensionID FROM pensionsView";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.pensionsViewDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.pensionsViewDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.pensionsViewDataTable dataTable = new PSDatabase5DataSet.pensionsViewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class INReceiptViewTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public INReceiptViewTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "INReceiptView";
            tableMapping.ColumnMappings.Add("personFamilyAndName", "personFamilyAndName");
            tableMapping.ColumnMappings.Add("dDate", "dDate");
            tableMapping.ColumnMappings.Add("price", "price");
            tableMapping.ColumnMappings.Add("docComment", "docComment");
            tableMapping.ColumnMappings.Add("docID", "docID");
            tableMapping.ColumnMappings.Add("fatherName", "fatherName");
            tableMapping.ColumnMappings.Add("personNO", "personNO");
            tableMapping.ColumnMappings.Add("personBorn", "personBorn");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT personFamilyAndName, dDate, price, docComment, docID, fatherName, personBo" +
                "rn, personNO FROM INReceiptView";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.INReceiptViewDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.INReceiptViewDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.INReceiptViewDataTable dataTable = new PSDatabase5DataSet.INReceiptViewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class chequesViewTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public chequesViewTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "chequesView";
            tableMapping.ColumnMappings.Add("chequeNumber", "chequeNumber");
            tableMapping.ColumnMappings.Add("bankName", "bankName");
            tableMapping.ColumnMappings.Add("chequePrice", "chequePrice");
            tableMapping.ColumnMappings.Add("usanceDate", "usanceDate");
            tableMapping.ColumnMappings.Add("accDoc_id", "accDoc_id");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT chequeNumber, bankName, chequePrice, usanceDate, accDoc_id FROM chequesVie" +
                "w";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.chequesViewDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.chequesViewDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.chequesViewDataTable dataTable = new PSDatabase5DataSet.chequesViewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class detractsViewTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public detractsViewTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "detractsView";
            tableMapping.ColumnMappings.Add("defName", "defName");
            tableMapping.ColumnMappings.Add("defValue", "defValue");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT defName, defValue FROM dbo.detractsView";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.detractsViewDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.detractsViewDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.detractsViewDataTable dataTable = new PSDatabase5DataSet.detractsViewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class receiptOUTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public receiptOUTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "receiptOUT";
            tableMapping.ColumnMappings.Add("personFamilyAndName", "personFamilyAndName");
            tableMapping.ColumnMappings.Add("fatherName", "fatherName");
            tableMapping.ColumnMappings.Add("personBorn", "personBorn");
            tableMapping.ColumnMappings.Add("personNO", "personNO");
            tableMapping.ColumnMappings.Add("price", "price");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT personFamilyAndName, fatherName, personBorn, personNO, price FROM dbo.rece" +
                "iptOUT";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.receiptOUTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.receiptOUTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.receiptOUTDataTable dataTable = new PSDatabase5DataSet.receiptOUTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class defsViewTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public defsViewTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "defsView";
            tableMapping.ColumnMappings.Add("pensionName", "pensionName");
            tableMapping.ColumnMappings.Add("pensionValue", "pensionValue");
            tableMapping.ColumnMappings.Add("detractName", "detractName");
            tableMapping.ColumnMappings.Add("detractValue", "detractValue");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT pensionName, pensionValue, detractName, detractValue FROM dbo.defsView";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.defsViewDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.defsViewDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.defsViewDataTable dataTable = new PSDatabase5DataSet.defsViewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class accountTypesTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public accountTypesTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "accountTypesTable";
            tableMapping.ColumnMappings.Add("accountType_id", "accountType_id");
            tableMapping.ColumnMappings.Add("accountType_Title", "accountType_Title");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[accountTypesTable] WHERE (([accountType_id] = @Original_accoun" +
                "tType_id) AND ([accountType_Title] = @Original_accountType_Title))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountType_id", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountType_Title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_Title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[accountTypesTable] ([accountType_id], [accountType_Title]) VAL" +
                "UES (@accountType_id, @accountType_Title);\r\nSELECT accountType_id, accountType_T" +
                "itle FROM accountTypesTable WHERE (accountType_id = @accountType_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountType_id", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountType_Title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_Title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[accountTypesTable] SET [accountType_id] = @accountType_id, [accountType_Title] = @accountType_Title WHERE (([accountType_id] = @Original_accountType_id) AND ([accountType_Title] = @Original_accountType_Title));
SELECT accountType_id, accountType_Title FROM accountTypesTable WHERE (accountType_id = @accountType_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountType_id", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountType_Title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_Title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountType_id", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountType_Title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_Title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT accountType_id, accountType_Title FROM dbo.accountTypesTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.accountTypesTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.accountTypesTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.accountTypesTableDataTable dataTable = new PSDatabase5DataSet.accountTypesTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.accountTypesTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "accountTypesTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_accountType_id, string Original_accountType_Title) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_accountType_id));
            if ((Original_accountType_Title == null)) {
                throw new global::System.ArgumentNullException("Original_accountType_Title");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_accountType_Title));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal accountType_id, string accountType_Title) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(accountType_id));
            if ((accountType_Title == null)) {
                throw new global::System.ArgumentNullException("accountType_Title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(accountType_Title));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal accountType_id, string accountType_Title, decimal Original_accountType_id, string Original_accountType_Title) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(accountType_id));
            if ((accountType_Title == null)) {
                throw new global::System.ArgumentNullException("accountType_Title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(accountType_Title));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Original_accountType_id));
            if ((Original_accountType_Title == null)) {
                throw new global::System.ArgumentNullException("Original_accountType_Title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_accountType_Title));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string accountType_Title, decimal Original_accountType_id, string Original_accountType_Title) {
            return this.Update(Original_accountType_id, accountType_Title, Original_accountType_id, Original_accountType_Title);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AccountingDocsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AccountingDocsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AccountingDocs";
            tableMapping.ColumnMappings.Add("accDoc_id", "accDoc_id");
            tableMapping.ColumnMappings.Add("pensionID", "pensionID");
            tableMapping.ColumnMappings.Add("accDoc_comment", "accDoc_comment");
            tableMapping.ColumnMappings.Add("accDoc_date", "accDoc_date");
            tableMapping.ColumnMappings.Add("tempo", "tempo");
            tableMapping.ColumnMappings.Add("docID", "docID");
            tableMapping.ColumnMappings.Add("invoice_id", "invoice_id");
            tableMapping.ColumnMappings.Add("accDoc_price", "accDoc_price");
            tableMapping.ColumnMappings.Add("accountID", "accountID");
            tableMapping.ColumnMappings.Add("accDoc_isItTemporary", "accDoc_isItTemporary");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [AccountingDocs] WHERE (([accDoc_id] = @Original_accDoc_id) AND ((@IsNull_pensionID = 1 AND [pensionID] IS NULL) OR ([pensionID] = @Original_pensionID)) AND ((@IsNull_accDoc_comment = 1 AND [accDoc_comment] IS NULL) OR ([accDoc_comment] = @Original_accDoc_comment)) AND ([accDoc_date] = @Original_accDoc_date) AND ((@IsNull_tempo = 1 AND [tempo] IS NULL) OR ([tempo] = @Original_tempo)) AND ((@IsNull_docID = 1 AND [docID] IS NULL) OR ([docID] = @Original_docID)) AND ((@IsNull_invoice_id = 1 AND [invoice_id] IS NULL) OR ([invoice_id] = @Original_invoice_id)) AND ((@IsNull_accDoc_price = 1 AND [accDoc_price] IS NULL) OR ([accDoc_price] = @Original_accDoc_price)) AND ((@IsNull_accountID = 1 AND [accountID] IS NULL) OR ([accountID] = @Original_accountID)) AND ((@IsNull_accDoc_isItTemporary = 1 AND [accDoc_isItTemporary] IS NULL) OR ([accDoc_isItTemporary] = @Original_accDoc_isItTemporary)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDoc_comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tempo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tempo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_docID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_docID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_invoice_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoice_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDoc_price", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_price", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_price", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDoc_isItTemporary", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_isItTemporary", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_isItTemporary", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_isItTemporary", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [AccountingDocs] ([accDoc_id], [pensionID], [accDoc_comment], [accDoc_date], [tempo], [docID], [invoice_id], [accDoc_price], [accountID], [accDoc_isItTemporary]) VALUES (@accDoc_id, @pensionID, @accDoc_comment, @accDoc_date, @tempo, @docID, @invoice_id, @accDoc_price, @accountID, @accDoc_isItTemporary);
SELECT accDoc_id, pensionID, accDoc_comment, accDoc_date, tempo, docID, invoice_id, accDoc_price, accountID, accDoc_isItTemporary FROM AccountingDocs WHERE (accDoc_id = @accDoc_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@docID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoice_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_price", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_isItTemporary", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_isItTemporary", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [AccountingDocs] SET [accDoc_id] = @accDoc_id, [pensionID] = @pensionID, [accDoc_comment] = @accDoc_comment, [accDoc_date] = @accDoc_date, [tempo] = @tempo, [docID] = @docID, [invoice_id] = @invoice_id, [accDoc_price] = @accDoc_price, [accountID] = @accountID, [accDoc_isItTemporary] = @accDoc_isItTemporary WHERE (([accDoc_id] = @Original_accDoc_id) AND ((@IsNull_pensionID = 1 AND [pensionID] IS NULL) OR ([pensionID] = @Original_pensionID)) AND ((@IsNull_accDoc_comment = 1 AND [accDoc_comment] IS NULL) OR ([accDoc_comment] = @Original_accDoc_comment)) AND ([accDoc_date] = @Original_accDoc_date) AND ((@IsNull_tempo = 1 AND [tempo] IS NULL) OR ([tempo] = @Original_tempo)) AND ((@IsNull_docID = 1 AND [docID] IS NULL) OR ([docID] = @Original_docID)) AND ((@IsNull_invoice_id = 1 AND [invoice_id] IS NULL) OR ([invoice_id] = @Original_invoice_id)) AND ((@IsNull_accDoc_price = 1 AND [accDoc_price] IS NULL) OR ([accDoc_price] = @Original_accDoc_price)) AND ((@IsNull_accountID = 1 AND [accountID] IS NULL) OR ([accountID] = @Original_accountID)) AND ((@IsNull_accDoc_isItTemporary = 1 AND [accDoc_isItTemporary] IS NULL) OR ([accDoc_isItTemporary] = @Original_accDoc_isItTemporary)));
SELECT accDoc_id, pensionID, accDoc_comment, accDoc_date, tempo, docID, invoice_id, accDoc_price, accountID, accDoc_isItTemporary FROM AccountingDocs WHERE (accDoc_id = @accDoc_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tempo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@docID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoice_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_price", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_isItTemporary", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_isItTemporary", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pensionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pensionID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDoc_comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tempo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tempo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tempo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_docID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_docID", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "docID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_invoice_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoice_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDoc_price", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_price", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_price", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDoc_isItTemporary", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_isItTemporary", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_isItTemporary", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_isItTemporary", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT accDoc_id, pensionID, accDoc_comment, accDoc_date, tempo, docID, invoice_i" +
                "d, accDoc_price, accountID, accDoc_isItTemporary FROM AccountingDocs";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.AccountingDocsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.AccountingDocsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.AccountingDocsDataTable dataTable = new PSDatabase5DataSet.AccountingDocsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.AccountingDocsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "AccountingDocs");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_accDoc_id, global::System.Nullable<int> Original_pensionID, string Original_accDoc_comment, string Original_accDoc_date, string Original_tempo, global::System.Nullable<long> Original_docID, global::System.Nullable<long> Original_invoice_id, global::System.Nullable<long> Original_accDoc_price, global::System.Nullable<int> Original_accountID, global::System.Nullable<bool> Original_accDoc_isItTemporary) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_accDoc_id));
            if ((Original_pensionID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_pensionID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_accDoc_comment == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_accDoc_comment));
            }
            if ((Original_accDoc_date == null)) {
                throw new global::System.ArgumentNullException("Original_accDoc_date");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_accDoc_date));
            }
            if ((Original_tempo == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_tempo));
            }
            if ((Original_docID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((long)(Original_docID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_invoice_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((long)(Original_invoice_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_accDoc_price.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((long)(Original_accDoc_price.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_accountID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((int)(Original_accountID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_accDoc_isItTemporary.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((bool)(Original_accDoc_isItTemporary.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long accDoc_id, global::System.Nullable<int> pensionID, string accDoc_comment, string accDoc_date, string tempo, global::System.Nullable<long> docID, global::System.Nullable<long> invoice_id, global::System.Nullable<long> accDoc_price, global::System.Nullable<int> accountID, global::System.Nullable<bool> accDoc_isItTemporary) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(accDoc_id));
            if ((pensionID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(pensionID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((accDoc_comment == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(accDoc_comment));
            }
            if ((accDoc_date == null)) {
                throw new global::System.ArgumentNullException("accDoc_date");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(accDoc_date));
            }
            if ((tempo == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(tempo));
            }
            if ((docID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((long)(docID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((invoice_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(invoice_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((accDoc_price.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((long)(accDoc_price.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((accountID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(accountID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((accDoc_isItTemporary.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(accDoc_isItTemporary.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long accDoc_id, 
                    global::System.Nullable<int> pensionID, 
                    string accDoc_comment, 
                    string accDoc_date, 
                    string tempo, 
                    global::System.Nullable<long> docID, 
                    global::System.Nullable<long> invoice_id, 
                    global::System.Nullable<long> accDoc_price, 
                    global::System.Nullable<int> accountID, 
                    global::System.Nullable<bool> accDoc_isItTemporary, 
                    long Original_accDoc_id, 
                    global::System.Nullable<int> Original_pensionID, 
                    string Original_accDoc_comment, 
                    string Original_accDoc_date, 
                    string Original_tempo, 
                    global::System.Nullable<long> Original_docID, 
                    global::System.Nullable<long> Original_invoice_id, 
                    global::System.Nullable<long> Original_accDoc_price, 
                    global::System.Nullable<int> Original_accountID, 
                    global::System.Nullable<bool> Original_accDoc_isItTemporary) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(accDoc_id));
            if ((pensionID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(pensionID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((accDoc_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(accDoc_comment));
            }
            if ((accDoc_date == null)) {
                throw new global::System.ArgumentNullException("accDoc_date");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(accDoc_date));
            }
            if ((tempo == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(tempo));
            }
            if ((docID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(docID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((invoice_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(invoice_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((accDoc_price.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(accDoc_price.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((accountID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(accountID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((accDoc_isItTemporary.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(accDoc_isItTemporary.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_accDoc_id));
            if ((Original_pensionID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_pensionID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_accDoc_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_accDoc_comment));
            }
            if ((Original_accDoc_date == null)) {
                throw new global::System.ArgumentNullException("Original_accDoc_date");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_accDoc_date));
            }
            if ((Original_tempo == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_tempo));
            }
            if ((Original_docID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((long)(Original_docID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_invoice_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((long)(Original_invoice_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_accDoc_price.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(Original_accDoc_price.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_accountID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(Original_accountID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_accDoc_isItTemporary.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((bool)(Original_accDoc_isItTemporary.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> pensionID, 
                    string accDoc_comment, 
                    string accDoc_date, 
                    string tempo, 
                    global::System.Nullable<long> docID, 
                    global::System.Nullable<long> invoice_id, 
                    global::System.Nullable<long> accDoc_price, 
                    global::System.Nullable<int> accountID, 
                    global::System.Nullable<bool> accDoc_isItTemporary, 
                    long Original_accDoc_id, 
                    global::System.Nullable<int> Original_pensionID, 
                    string Original_accDoc_comment, 
                    string Original_accDoc_date, 
                    string Original_tempo, 
                    global::System.Nullable<long> Original_docID, 
                    global::System.Nullable<long> Original_invoice_id, 
                    global::System.Nullable<long> Original_accDoc_price, 
                    global::System.Nullable<int> Original_accountID, 
                    global::System.Nullable<bool> Original_accDoc_isItTemporary) {
            return this.Update(Original_accDoc_id, pensionID, accDoc_comment, accDoc_date, tempo, docID, invoice_id, accDoc_price, accountID, accDoc_isItTemporary, Original_accDoc_id, Original_pensionID, Original_accDoc_comment, Original_accDoc_date, Original_tempo, Original_docID, Original_invoice_id, Original_accDoc_price, Original_accountID, Original_accDoc_isItTemporary);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class accDocEventsTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public accDocEventsTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "accDocEventsTable";
            tableMapping.ColumnMappings.Add("accDocEvent_id", "accDocEvent_id");
            tableMapping.ColumnMappings.Add("accDoc_id", "accDoc_id");
            tableMapping.ColumnMappings.Add("accDocEvent_retail", "accDocEvent_retail");
            tableMapping.ColumnMappings.Add("accDocEvent_indebted", "accDocEvent_indebted");
            tableMapping.ColumnMappings.Add("accDocEvent_creditor", "accDocEvent_creditor");
            tableMapping.ColumnMappings.Add("accDocEvent_row", "accDocEvent_row");
            tableMapping.ColumnMappings.Add("accDocEvent_itIsBank", "accDocEvent_itIsBank");
            tableMapping.ColumnMappings.Add("accDocEvent_itIsIndebted", "accDocEvent_itIsIndebted");
            tableMapping.ColumnMappings.Add("accDocEvent_detectID", "accDocEvent_detectID");
            tableMapping.ColumnMappings.Add("detailID", "detailID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [accDocEventsTable] WHERE (([accDocEvent_id] = @Original_accDocEvent_id) AND ([accDoc_id] = @Original_accDoc_id) AND ((@IsNull_accDocEvent_retail = 1 AND [accDocEvent_retail] IS NULL) OR ([accDocEvent_retail] = @Original_accDocEvent_retail)) AND ((@IsNull_accDocEvent_indebted = 1 AND [accDocEvent_indebted] IS NULL) OR ([accDocEvent_indebted] = @Original_accDocEvent_indebted)) AND ((@IsNull_accDocEvent_creditor = 1 AND [accDocEvent_creditor] IS NULL) OR ([accDocEvent_creditor] = @Original_accDocEvent_creditor)) AND ([accDocEvent_row] = @Original_accDocEvent_row) AND ([accDocEvent_itIsBank] = @Original_accDocEvent_itIsBank) AND ([accDocEvent_itIsIndebted] = @Original_accDocEvent_itIsIndebted) AND ((@IsNull_accDocEvent_detectID = 1 AND [accDocEvent_detectID] IS NULL) OR ([accDocEvent_detectID] = @Original_accDocEvent_detectID)) AND ((@IsNull_detailID = 1 AND [detailID] IS NULL) OR ([detailID] = @Original_detailID)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDocEvent_retail", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_retail", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_retail", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_retail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDocEvent_indebted", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_indebted", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_indebted", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_indebted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDocEvent_creditor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_creditor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_creditor", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_creditor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_row", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_row", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_itIsBank", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_itIsBank", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_itIsIndebted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_itIsIndebted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDocEvent_detectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_detectID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_detectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_detectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_detailID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detailID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_detailID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detailID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [accDocEventsTable] ([accDoc_id], [accDocEvent_retail], [accDocEvent_indebted], [accDocEvent_creditor], [accDocEvent_row], [accDocEvent_itIsBank], [accDocEvent_itIsIndebted], [accDocEvent_detectID], [detailID]) VALUES (@accDoc_id, @accDocEvent_retail, @accDocEvent_indebted, @accDocEvent_creditor, @accDocEvent_row, @accDocEvent_itIsBank, @accDocEvent_itIsIndebted, @accDocEvent_detectID, @detailID);
SELECT accDocEvent_id, accDoc_id, accDocEvent_retail, accDocEvent_indebted, accDocEvent_creditor, accDocEvent_row, accDocEvent_itIsBank, accDocEvent_itIsIndebted, accDocEvent_detectID, detailID FROM accDocEventsTable WHERE (accDocEvent_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_retail", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_retail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_indebted", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_indebted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_creditor", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_creditor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_row", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_row", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_itIsBank", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_itIsBank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_itIsIndebted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_itIsIndebted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_detectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_detectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@detailID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detailID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [accDocEventsTable] SET [accDoc_id] = @accDoc_id, [accDocEvent_retail] = @" +
                "accDocEvent_retail, [accDocEvent_indebted] = @accDocEvent_indebted, [accDocEvent" +
                "_creditor] = @accDocEvent_creditor, [accDocEvent_row] = @accDocEvent_row, [accDo" +
                "cEvent_itIsBank] = @accDocEvent_itIsBank, [accDocEvent_itIsIndebted] = @accDocEv" +
                "ent_itIsIndebted, [accDocEvent_detectID] = @accDocEvent_detectID, [detailID] = @" +
                "detailID WHERE (([accDocEvent_id] = @Original_accDocEvent_id) AND ([accDoc_id] =" +
                " @Original_accDoc_id) AND ((@IsNull_accDocEvent_retail = 1 AND [accDocEvent_reta" +
                "il] IS NULL) OR ([accDocEvent_retail] = @Original_accDocEvent_retail)) AND ((@Is" +
                "Null_accDocEvent_indebted = 1 AND [accDocEvent_indebted] IS NULL) OR ([accDocEve" +
                "nt_indebted] = @Original_accDocEvent_indebted)) AND ((@IsNull_accDocEvent_credit" +
                "or = 1 AND [accDocEvent_creditor] IS NULL) OR ([accDocEvent_creditor] = @Origina" +
                "l_accDocEvent_creditor)) AND ([accDocEvent_row] = @Original_accDocEvent_row) AND" +
                " ([accDocEvent_itIsBank] = @Original_accDocEvent_itIsBank) AND ([accDocEvent_itI" +
                "sIndebted] = @Original_accDocEvent_itIsIndebted) AND ((@IsNull_accDocEvent_detec" +
                "tID = 1 AND [accDocEvent_detectID] IS NULL) OR ([accDocEvent_detectID] = @Origin" +
                "al_accDocEvent_detectID)) AND ((@IsNull_detailID = 1 AND [detailID] IS NULL) OR " +
                "([detailID] = @Original_detailID)));\r\nSELECT accDocEvent_id, accDoc_id, accDocEv" +
                "ent_retail, accDocEvent_indebted, accDocEvent_creditor, accDocEvent_row, accDocE" +
                "vent_itIsBank, accDocEvent_itIsIndebted, accDocEvent_detectID, detailID FROM acc" +
                "DocEventsTable WHERE (accDocEvent_id = @accDocEvent_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_retail", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_retail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_indebted", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_indebted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_creditor", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_creditor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_row", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_row", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_itIsBank", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_itIsBank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_itIsIndebted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_itIsIndebted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_detectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_detectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@detailID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detailID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDocEvent_retail", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_retail", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_retail", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_retail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDocEvent_indebted", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_indebted", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_indebted", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_indebted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDocEvent_creditor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_creditor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_creditor", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_creditor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_row", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_row", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_itIsBank", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_itIsBank", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_itIsIndebted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_itIsIndebted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDocEvent_detectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_detectID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDocEvent_detectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_detectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_detailID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detailID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_detailID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detailID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDocEvent_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "accDocEvent_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT accDocEvent_id, accDoc_id, accDocEvent_retail, accDocEvent_indebted, accDo" +
                "cEvent_creditor, accDocEvent_row, accDocEvent_itIsBank, accDocEvent_itIsIndebted" +
                ", accDocEvent_detectID, detailID FROM accDocEventsTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.accDocEventsTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.accDocEventsTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.accDocEventsTableDataTable dataTable = new PSDatabase5DataSet.accDocEventsTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.accDocEventsTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "accDocEventsTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_accDocEvent_id, long Original_accDoc_id, global::System.Nullable<long> Original_accDocEvent_retail, global::System.Nullable<long> Original_accDocEvent_indebted, global::System.Nullable<long> Original_accDocEvent_creditor, int Original_accDocEvent_row, bool Original_accDocEvent_itIsBank, bool Original_accDocEvent_itIsIndebted, global::System.Nullable<int> Original_accDocEvent_detectID, global::System.Nullable<int> Original_detailID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_accDocEvent_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_accDoc_id));
            if ((Original_accDocEvent_retail.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_accDocEvent_retail.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_accDocEvent_indebted.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_accDocEvent_indebted.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_accDocEvent_creditor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_accDocEvent_creditor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_accDocEvent_row));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((bool)(Original_accDocEvent_itIsBank));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((bool)(Original_accDocEvent_itIsIndebted));
            if ((Original_accDocEvent_detectID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_accDocEvent_detectID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_detailID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_detailID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long accDoc_id, global::System.Nullable<long> accDocEvent_retail, global::System.Nullable<long> accDocEvent_indebted, global::System.Nullable<long> accDocEvent_creditor, int accDocEvent_row, bool accDocEvent_itIsBank, bool accDocEvent_itIsIndebted, global::System.Nullable<int> accDocEvent_detectID, global::System.Nullable<int> detailID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(accDoc_id));
            if ((accDocEvent_retail.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(accDocEvent_retail.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((accDocEvent_indebted.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(accDocEvent_indebted.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((accDocEvent_creditor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(accDocEvent_creditor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(accDocEvent_row));
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(accDocEvent_itIsBank));
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(accDocEvent_itIsIndebted));
            if ((accDocEvent_detectID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(accDocEvent_detectID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((detailID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(detailID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long accDoc_id, 
                    global::System.Nullable<long> accDocEvent_retail, 
                    global::System.Nullable<long> accDocEvent_indebted, 
                    global::System.Nullable<long> accDocEvent_creditor, 
                    int accDocEvent_row, 
                    bool accDocEvent_itIsBank, 
                    bool accDocEvent_itIsIndebted, 
                    global::System.Nullable<int> accDocEvent_detectID, 
                    global::System.Nullable<int> detailID, 
                    int Original_accDocEvent_id, 
                    long Original_accDoc_id, 
                    global::System.Nullable<long> Original_accDocEvent_retail, 
                    global::System.Nullable<long> Original_accDocEvent_indebted, 
                    global::System.Nullable<long> Original_accDocEvent_creditor, 
                    int Original_accDocEvent_row, 
                    bool Original_accDocEvent_itIsBank, 
                    bool Original_accDocEvent_itIsIndebted, 
                    global::System.Nullable<int> Original_accDocEvent_detectID, 
                    global::System.Nullable<int> Original_detailID, 
                    int accDocEvent_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(accDoc_id));
            if ((accDocEvent_retail.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(accDocEvent_retail.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((accDocEvent_indebted.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(accDocEvent_indebted.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((accDocEvent_creditor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(accDocEvent_creditor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(accDocEvent_row));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(accDocEvent_itIsBank));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(accDocEvent_itIsIndebted));
            if ((accDocEvent_detectID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(accDocEvent_detectID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((detailID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(detailID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_accDocEvent_id));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_accDoc_id));
            if ((Original_accDocEvent_retail.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(Original_accDocEvent_retail.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_accDocEvent_indebted.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(Original_accDocEvent_indebted.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_accDocEvent_creditor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(Original_accDocEvent_creditor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_accDocEvent_row));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((bool)(Original_accDocEvent_itIsBank));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((bool)(Original_accDocEvent_itIsIndebted));
            if ((Original_accDocEvent_detectID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_accDocEvent_detectID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_detailID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_detailID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(accDocEvent_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long accDoc_id, 
                    global::System.Nullable<long> accDocEvent_retail, 
                    global::System.Nullable<long> accDocEvent_indebted, 
                    global::System.Nullable<long> accDocEvent_creditor, 
                    int accDocEvent_row, 
                    bool accDocEvent_itIsBank, 
                    bool accDocEvent_itIsIndebted, 
                    global::System.Nullable<int> accDocEvent_detectID, 
                    global::System.Nullable<int> detailID, 
                    int Original_accDocEvent_id, 
                    long Original_accDoc_id, 
                    global::System.Nullable<long> Original_accDocEvent_retail, 
                    global::System.Nullable<long> Original_accDocEvent_indebted, 
                    global::System.Nullable<long> Original_accDocEvent_creditor, 
                    int Original_accDocEvent_row, 
                    bool Original_accDocEvent_itIsBank, 
                    bool Original_accDocEvent_itIsIndebted, 
                    global::System.Nullable<int> Original_accDocEvent_detectID, 
                    global::System.Nullable<int> Original_detailID) {
            return this.Update(accDoc_id, accDocEvent_retail, accDocEvent_indebted, accDocEvent_creditor, accDocEvent_row, accDocEvent_itIsBank, accDocEvent_itIsIndebted, accDocEvent_detectID, detailID, Original_accDocEvent_id, Original_accDoc_id, Original_accDocEvent_retail, Original_accDocEvent_indebted, Original_accDocEvent_creditor, Original_accDocEvent_row, Original_accDocEvent_itIsBank, Original_accDocEvent_itIsIndebted, Original_accDocEvent_detectID, Original_detailID, Original_accDocEvent_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class invoiceItemsTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public invoiceItemsTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "invoiceItemsTable";
            tableMapping.ColumnMappings.Add("invoiceItem_id", "invoiceItem_id");
            tableMapping.ColumnMappings.Add("invoice_id", "invoice_id");
            tableMapping.ColumnMappings.Add("invoiceItem_row", "invoiceItem_row");
            tableMapping.ColumnMappings.Add("invoiceItem_amount", "invoiceItem_amount");
            tableMapping.ColumnMappings.Add("invoiceItem_phi", "invoiceItem_phi");
            tableMapping.ColumnMappings.Add("invoiceItem_total", "invoiceItem_total");
            tableMapping.ColumnMappings.Add("spentDefID", "spentDefID");
            tableMapping.ColumnMappings.Add("invoiceItem_comment", "invoiceItem_comment");
            tableMapping.ColumnMappings.Add("projectID", "projectID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [invoiceItemsTable] WHERE (([invoiceItem_id] = @Original_invoiceItem_id) AND ([invoice_id] = @Original_invoice_id) AND ([invoiceItem_row] = @Original_invoiceItem_row) AND ([invoiceItem_amount] = @Original_invoiceItem_amount) AND ([invoiceItem_phi] = @Original_invoiceItem_phi) AND ([invoiceItem_total] = @Original_invoiceItem_total) AND ([invoiceItem_comment] = @Original_invoiceItem_comment) AND ([spentDefID] = @Original_spentDefID) AND ([projectID] = @Original_projectID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoiceItem_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoice_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoiceItem_row", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_row", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoiceItem_amount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_amount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoiceItem_phi", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_phi", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoiceItem_total", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_total", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoiceItem_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentDefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentDefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [invoiceItemsTable] ([invoice_id], [invoiceItem_row], [invoiceItem_amount], [invoiceItem_phi], [invoiceItem_total], [invoiceItem_comment], [spentDefID], [projectID]) VALUES (@invoice_id, @invoiceItem_row, @invoiceItem_amount, @invoiceItem_phi, @invoiceItem_total, @invoiceItem_comment, @spentDefID, @projectID);
SELECT invoiceItem_id, invoice_id, invoiceItem_row, invoiceItem_amount, invoiceItem_phi, invoiceItem_total, invoiceItem_comment, spentDefID, projectID FROM invoiceItemsTable WHERE (invoiceItem_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoice_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoiceItem_row", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_row", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoiceItem_amount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoiceItem_phi", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_phi", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoiceItem_total", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_total", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoiceItem_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentDefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentDefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [invoiceItemsTable] SET [invoice_id] = @invoice_id, [invoiceItem_row] = @invoiceItem_row, [invoiceItem_amount] = @invoiceItem_amount, [invoiceItem_phi] = @invoiceItem_phi, [invoiceItem_total] = @invoiceItem_total, [invoiceItem_comment] = @invoiceItem_comment, [spentDefID] = @spentDefID, [projectID] = @projectID WHERE (([invoiceItem_id] = @Original_invoiceItem_id) AND ([invoice_id] = @Original_invoice_id) AND ([invoiceItem_row] = @Original_invoiceItem_row) AND ([invoiceItem_amount] = @Original_invoiceItem_amount) AND ([invoiceItem_phi] = @Original_invoiceItem_phi) AND ([invoiceItem_total] = @Original_invoiceItem_total) AND ([invoiceItem_comment] = @Original_invoiceItem_comment) AND ([spentDefID] = @Original_spentDefID) AND ([projectID] = @Original_projectID));
SELECT invoiceItem_id, invoice_id, invoiceItem_row, invoiceItem_amount, invoiceItem_phi, invoiceItem_total, invoiceItem_comment, spentDefID, projectID FROM invoiceItemsTable WHERE (invoiceItem_id = @invoiceItem_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoice_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoiceItem_row", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_row", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoiceItem_amount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoiceItem_phi", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_phi", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoiceItem_total", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_total", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoiceItem_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentDefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentDefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoiceItem_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoice_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoiceItem_row", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_row", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoiceItem_amount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_amount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoiceItem_phi", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_phi", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoiceItem_total", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_total", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoiceItem_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentDefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentDefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoiceItem_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "invoiceItem_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT invoiceItem_id, invoice_id, invoiceItem_row, invoiceItem_amount, invoiceIt" +
                "em_phi, invoiceItem_total, invoiceItem_comment, spentDefID, projectID FROM invoi" +
                "ceItemsTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.invoiceItemsTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.invoiceItemsTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.invoiceItemsTableDataTable dataTable = new PSDatabase5DataSet.invoiceItemsTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.invoiceItemsTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "invoiceItemsTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_invoiceItem_id, long Original_invoice_id, int Original_invoiceItem_row, int Original_invoiceItem_amount, long Original_invoiceItem_phi, long Original_invoiceItem_total, string Original_invoiceItem_comment, int Original_spentDefID, int Original_projectID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_invoiceItem_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_invoice_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_invoiceItem_row));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_invoiceItem_amount));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_invoiceItem_phi));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_invoiceItem_total));
            if ((Original_invoiceItem_comment == null)) {
                throw new global::System.ArgumentNullException("Original_invoiceItem_comment");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_invoiceItem_comment));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_spentDefID));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_projectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long invoice_id, int invoiceItem_row, int invoiceItem_amount, long invoiceItem_phi, long invoiceItem_total, string invoiceItem_comment, int spentDefID, int projectID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(invoice_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(invoiceItem_row));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(invoiceItem_amount));
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(invoiceItem_phi));
            this.Adapter.InsertCommand.Parameters[4].Value = ((long)(invoiceItem_total));
            if ((invoiceItem_comment == null)) {
                throw new global::System.ArgumentNullException("invoiceItem_comment");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(invoiceItem_comment));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(spentDefID));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(projectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long invoice_id, 
                    int invoiceItem_row, 
                    int invoiceItem_amount, 
                    long invoiceItem_phi, 
                    long invoiceItem_total, 
                    string invoiceItem_comment, 
                    int spentDefID, 
                    int projectID, 
                    int Original_invoiceItem_id, 
                    long Original_invoice_id, 
                    int Original_invoiceItem_row, 
                    int Original_invoiceItem_amount, 
                    long Original_invoiceItem_phi, 
                    long Original_invoiceItem_total, 
                    string Original_invoiceItem_comment, 
                    int Original_spentDefID, 
                    int Original_projectID, 
                    int invoiceItem_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(invoice_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(invoiceItem_row));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(invoiceItem_amount));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(invoiceItem_phi));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(invoiceItem_total));
            if ((invoiceItem_comment == null)) {
                throw new global::System.ArgumentNullException("invoiceItem_comment");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(invoiceItem_comment));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(spentDefID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(projectID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_invoiceItem_id));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_invoice_id));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_invoiceItem_row));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_invoiceItem_amount));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(Original_invoiceItem_phi));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_invoiceItem_total));
            if ((Original_invoiceItem_comment == null)) {
                throw new global::System.ArgumentNullException("Original_invoiceItem_comment");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_invoiceItem_comment));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_spentDefID));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_projectID));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(invoiceItem_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long invoice_id, 
                    int invoiceItem_row, 
                    int invoiceItem_amount, 
                    long invoiceItem_phi, 
                    long invoiceItem_total, 
                    string invoiceItem_comment, 
                    int spentDefID, 
                    int projectID, 
                    int Original_invoiceItem_id, 
                    long Original_invoice_id, 
                    int Original_invoiceItem_row, 
                    int Original_invoiceItem_amount, 
                    long Original_invoiceItem_phi, 
                    long Original_invoiceItem_total, 
                    string Original_invoiceItem_comment, 
                    int Original_spentDefID, 
                    int Original_projectID) {
            return this.Update(invoice_id, invoiceItem_row, invoiceItem_amount, invoiceItem_phi, invoiceItem_total, invoiceItem_comment, spentDefID, projectID, Original_invoiceItem_id, Original_invoice_id, Original_invoiceItem_row, Original_invoiceItem_amount, Original_invoiceItem_phi, Original_invoiceItem_total, Original_invoiceItem_comment, Original_spentDefID, Original_projectID, Original_invoiceItem_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class invoicesTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public invoicesTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "invoicesTable";
            tableMapping.ColumnMappings.Add("invoice_id", "invoice_id");
            tableMapping.ColumnMappings.Add("invoice_date", "invoice_date");
            tableMapping.ColumnMappings.Add("invoice_total", "invoice_total");
            tableMapping.ColumnMappings.Add("invoice_comment", "invoice_comment");
            tableMapping.ColumnMappings.Add("personID", "personID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [invoicesTable] WHERE (([invoice_id] = @Original_invoice_id) AND ([invoice_date] = @Original_invoice_date) AND ([invoice_total] = @Original_invoice_total) AND ((@IsNull_invoice_comment = 1 AND [invoice_comment] IS NULL) OR ([invoice_comment] = @Original_invoice_comment)) AND ([personID] = @Original_personID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoice_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoice_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoice_total", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_total", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_invoice_comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoice_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [invoicesTable] ([invoice_id], [invoice_date], [invoice_total], [invoice_comment], [personID]) VALUES (@invoice_id, @invoice_date, @invoice_total, @invoice_comment, @personID);
SELECT invoice_id, invoice_date, invoice_total, invoice_comment, personID FROM invoicesTable WHERE (invoice_id = @invoice_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoice_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoice_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoice_total", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_total", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoice_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [invoicesTable] SET [invoice_id] = @invoice_id, [invoice_date] = @invoice_date, [invoice_total] = @invoice_total, [invoice_comment] = @invoice_comment, [personID] = @personID WHERE (([invoice_id] = @Original_invoice_id) AND ([invoice_date] = @Original_invoice_date) AND ([invoice_total] = @Original_invoice_total) AND ((@IsNull_invoice_comment = 1 AND [invoice_comment] IS NULL) OR ([invoice_comment] = @Original_invoice_comment)) AND ([personID] = @Original_personID));
SELECT invoice_id, invoice_date, invoice_total, invoice_comment, personID FROM invoicesTable WHERE (invoice_id = @invoice_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoice_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoice_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoice_total", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_total", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@invoice_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoice_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoice_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoice_total", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_total", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_invoice_comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_invoice_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "invoice_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT invoice_id, invoice_date, invoice_total, invoice_comment, personID FROM in" +
                "voicesTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.invoicesTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.invoicesTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.invoicesTableDataTable dataTable = new PSDatabase5DataSet.invoicesTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.invoicesTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "invoicesTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_invoice_id, string Original_invoice_date, long Original_invoice_total, string Original_invoice_comment, int Original_personID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_invoice_id));
            if ((Original_invoice_date == null)) {
                throw new global::System.ArgumentNullException("Original_invoice_date");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_invoice_date));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_invoice_total));
            if ((Original_invoice_comment == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_invoice_comment));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_personID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long invoice_id, string invoice_date, long invoice_total, string invoice_comment, int personID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(invoice_id));
            if ((invoice_date == null)) {
                throw new global::System.ArgumentNullException("invoice_date");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(invoice_date));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(invoice_total));
            if ((invoice_comment == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(invoice_comment));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(personID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long invoice_id, string invoice_date, long invoice_total, string invoice_comment, int personID, long Original_invoice_id, string Original_invoice_date, long Original_invoice_total, string Original_invoice_comment, int Original_personID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(invoice_id));
            if ((invoice_date == null)) {
                throw new global::System.ArgumentNullException("invoice_date");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(invoice_date));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(invoice_total));
            if ((invoice_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(invoice_comment));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(personID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_invoice_id));
            if ((Original_invoice_date == null)) {
                throw new global::System.ArgumentNullException("Original_invoice_date");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_invoice_date));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(Original_invoice_total));
            if ((Original_invoice_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_invoice_comment));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_personID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string invoice_date, long invoice_total, string invoice_comment, int personID, long Original_invoice_id, string Original_invoice_date, long Original_invoice_total, string Original_invoice_comment, int Original_personID) {
            return this.Update(Original_invoice_id, invoice_date, invoice_total, invoice_comment, personID, Original_invoice_id, Original_invoice_date, Original_invoice_total, Original_invoice_comment, Original_personID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class viw_invoiceItemsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public viw_invoiceItemsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "viw_invoiceItems";
            tableMapping.ColumnMappings.Add("invoiceItem_row", "invoiceItem_row");
            tableMapping.ColumnMappings.Add("spentDefName", "spentDefName");
            tableMapping.ColumnMappings.Add("invoiceItem_amount", "invoiceItem_amount");
            tableMapping.ColumnMappings.Add("invoiceItem_phi", "invoiceItem_phi");
            tableMapping.ColumnMappings.Add("invoiceItem_total", "invoiceItem_total");
            tableMapping.ColumnMappings.Add("invoiceItem_comment", "invoiceItem_comment");
            tableMapping.ColumnMappings.Add("projectTitle", "projectTitle");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT invoiceItem_row, spentDefName, invoiceItem_amount, invoiceItem_phi, invoic" +
                "eItem_total, invoiceItem_comment, projectTitle FROM viw_invoiceItems";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.viw_invoiceItemsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.viw_invoiceItemsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.viw_invoiceItemsDataTable dataTable = new PSDatabase5DataSet.viw_invoiceItemsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class viw_accDocTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public viw_accDocTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "viw_accDoc";
            tableMapping.ColumnMappings.Add("accDoc_id", "accDoc_id");
            tableMapping.ColumnMappings.Add("accDoc_date", "accDoc_date");
            tableMapping.ColumnMappings.Add("accDoc_comment", "accDoc_comment");
            tableMapping.ColumnMappings.Add("accDocEvent_indebted", "accDocEvent_indebted");
            tableMapping.ColumnMappings.Add("accDocEvent_creditor", "accDocEvent_creditor");
            tableMapping.ColumnMappings.Add("accDocEvent_itIsBank", "accDocEvent_itIsBank");
            tableMapping.ColumnMappings.Add("accDocEvent_row", "accDocEvent_row");
            tableMapping.ColumnMappings.Add("tempo", "tempo");
            tableMapping.ColumnMappings.Add("accDocEvent_itIsIndebted", "accDocEvent_itIsIndebted");
            tableMapping.ColumnMappings.Add("detailTitle", "detailTitle");
            tableMapping.ColumnMappings.Add("accDocEvent_id", "accDocEvent_id");
            tableMapping.ColumnMappings.Add("spentMasterID", "spentMasterID");
            tableMapping.ColumnMappings.Add("detailID", "detailID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT accDoc_id, accDoc_date, accDoc_comment, accDocEvent_indebted, accDocEvent_" +
                "creditor, accDocEvent_itIsBank, accDocEvent_row, tempo, accDocEvent_itIsIndebted" +
                ", detailTitle, accDocEvent_id, detailID, spentMasterID FROM viw_accDoc";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.viw_accDocDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.viw_accDocDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.viw_accDocDataTable dataTable = new PSDatabase5DataSet.viw_accDocDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class viw_ledgerTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public viw_ledgerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "viw_ledger";
            tableMapping.ColumnMappings.Add("accDoc_id", "accDoc_id");
            tableMapping.ColumnMappings.Add("accDoc_date", "accDoc_date");
            tableMapping.ColumnMappings.Add("accDoc_comment", "accDoc_comment");
            tableMapping.ColumnMappings.Add("accDocEvent_indebted", "accDocEvent_indebted");
            tableMapping.ColumnMappings.Add("accDocEvent_creditor", "accDocEvent_creditor");
            tableMapping.ColumnMappings.Add("spentMasterID", "spentMasterID");
            tableMapping.ColumnMappings.Add("accDocEvent_retail", "accDocEvent_retail");
            tableMapping.ColumnMappings.Add("spentMasterName", "spentMasterName");
            tableMapping.ColumnMappings.Add("accDocEvent_detectID", "accDocEvent_detectID");
            tableMapping.ColumnMappings.Add("accDocEvent_id", "accDocEvent_id");
            tableMapping.ColumnMappings.Add("detail_name", "detail_name");
            tableMapping.ColumnMappings.Add("detailID", "detailID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT accDoc_id, accDoc_date, accDoc_comment, accDocEvent_indebted, accDocEvent_" +
                "creditor, spentMasterID, accDocEvent_retail, spentMasterName, accDocEvent_detect" +
                "ID, accDocEvent_id, detailID, detail_name FROM viw_ledger";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.viw_ledgerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.viw_ledgerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.viw_ledgerDataTable dataTable = new PSDatabase5DataSet.viw_ledgerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class viw_balanceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public viw_balanceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "viw_balance";
            tableMapping.ColumnMappings.Add("spentMasterName", "spentMasterName");
            tableMapping.ColumnMappings.Add("indTotal", "indTotal");
            tableMapping.ColumnMappings.Add("creTotal", "creTotal");
            tableMapping.ColumnMappings.Add("spentMasterID", "spentMasterID");
            tableMapping.ColumnMappings.Add("detail_name", "detail_name");
            tableMapping.ColumnMappings.Add("detailID", "detailID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT spentMasterName, indTotal, creTotal, spentMasterID, detail_name, detailID " +
                "FROM viw_balance";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.viw_balanceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.viw_balanceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.viw_balanceDataTable dataTable = new PSDatabase5DataSet.viw_balanceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class detailsTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public detailsTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "detailsTable";
            tableMapping.ColumnMappings.Add("detailID", "detailID");
            tableMapping.ColumnMappings.Add("spentMasterID", "spentMasterID");
            tableMapping.ColumnMappings.Add("detail_name", "detail_name");
            tableMapping.ColumnMappings.Add("projectID", "projectID");
            tableMapping.ColumnMappings.Add("personID", "personID");
            tableMapping.ColumnMappings.Add("accountID", "accountID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[detailsTable] WHERE (([detailID] = @Original_detailID) AND ([spentMasterID] = @Original_spentMasterID) AND ([detail_name] = @Original_detail_name) AND ((@IsNull_projectID = 1 AND [projectID] IS NULL) OR ([projectID] = @Original_projectID)) AND ((@IsNull_personID = 1 AND [personID] IS NULL) OR ([personID] = @Original_personID)) AND ((@IsNull_accountID = 1 AND [accountID] IS NULL) OR ([accountID] = @Original_accountID)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_detailID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detailID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMasterID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_detail_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detail_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[detailsTable] ([detailID], [spentMasterID], [detail_name], [projectID], [personID], [accountID]) VALUES (@detailID, @spentMasterID, @detail_name, @projectID, @personID, @accountID);
SELECT detailID, spentMasterID, detail_name, projectID, personID, accountID FROM detailsTable WHERE (detailID = @detailID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@detailID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detailID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentMasterID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@detail_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detail_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[detailsTable] SET [detailID] = @detailID, [spentMasterID] = @spentMasterID, [detail_name] = @detail_name, [projectID] = @projectID, [personID] = @personID, [accountID] = @accountID WHERE (([detailID] = @Original_detailID) AND ([spentMasterID] = @Original_spentMasterID) AND ([detail_name] = @Original_detail_name) AND ((@IsNull_projectID = 1 AND [projectID] IS NULL) OR ([projectID] = @Original_projectID)) AND ((@IsNull_personID = 1 AND [personID] IS NULL) OR ([personID] = @Original_personID)) AND ((@IsNull_accountID = 1 AND [accountID] IS NULL) OR ([accountID] = @Original_accountID)));
SELECT detailID, spentMasterID, detail_name, projectID, personID, accountID FROM detailsTable WHERE (detailID = @detailID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@detailID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detailID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentMasterID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@detail_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detail_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_detailID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detailID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_spentMasterID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentMasterID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_detail_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "detail_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_projectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "projectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT detailID, spentMasterID, detail_name, projectID, personID, accountID FROM " +
                "dbo.detailsTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.detailsTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.detailsTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.detailsTableDataTable dataTable = new PSDatabase5DataSet.detailsTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.detailsTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "detailsTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_detailID, int Original_spentMasterID, string Original_detail_name, global::System.Nullable<int> Original_projectID, global::System.Nullable<int> Original_personID, global::System.Nullable<int> Original_accountID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_detailID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_spentMasterID));
            if ((Original_detail_name == null)) {
                throw new global::System.ArgumentNullException("Original_detail_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_detail_name));
            }
            if ((Original_projectID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_projectID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_personID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_personID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_accountID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_accountID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int detailID, int spentMasterID, string detail_name, global::System.Nullable<int> projectID, global::System.Nullable<int> personID, global::System.Nullable<int> accountID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(detailID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(spentMasterID));
            if ((detail_name == null)) {
                throw new global::System.ArgumentNullException("detail_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(detail_name));
            }
            if ((projectID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(projectID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((personID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(personID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((accountID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(accountID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int detailID, int spentMasterID, string detail_name, global::System.Nullable<int> projectID, global::System.Nullable<int> personID, global::System.Nullable<int> accountID, int Original_detailID, int Original_spentMasterID, string Original_detail_name, global::System.Nullable<int> Original_projectID, global::System.Nullable<int> Original_personID, global::System.Nullable<int> Original_accountID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(detailID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(spentMasterID));
            if ((detail_name == null)) {
                throw new global::System.ArgumentNullException("detail_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(detail_name));
            }
            if ((projectID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(projectID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((personID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(personID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((accountID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(accountID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_detailID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_spentMasterID));
            if ((Original_detail_name == null)) {
                throw new global::System.ArgumentNullException("Original_detail_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_detail_name));
            }
            if ((Original_projectID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_projectID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_personID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_personID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_accountID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_accountID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int spentMasterID, string detail_name, global::System.Nullable<int> projectID, global::System.Nullable<int> personID, global::System.Nullable<int> accountID, int Original_detailID, int Original_spentMasterID, string Original_detail_name, global::System.Nullable<int> Original_projectID, global::System.Nullable<int> Original_personID, global::System.Nullable<int> Original_accountID) {
            return this.Update(Original_detailID, spentMasterID, detail_name, projectID, personID, accountID, Original_detailID, Original_spentMasterID, Original_detail_name, Original_projectID, Original_personID, Original_accountID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class viw_detailsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public viw_detailsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "viw_details";
            tableMapping.ColumnMappings.Add("spentMasterID", "spentMasterID");
            tableMapping.ColumnMappings.Add("detailID", "detailID");
            tableMapping.ColumnMappings.Add("fullDetailName", "fullDetailName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT spentMasterID, detailID, fullDetailName FROM dbo.viw_details";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.viw_detailsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.viw_detailsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.viw_detailsDataTable dataTable = new PSDatabase5DataSet.viw_detailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class spentGroupsTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public spentGroupsTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "spentGroupsTable";
            tableMapping.ColumnMappings.Add("spentGroup_id", "spentGroup_id");
            tableMapping.ColumnMappings.Add("spentGroup_name", "spentGroup_name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[spentGroupsTable] ([spentGroup_id], [spentGroup_name]) VALUES " +
                "(@spentGroup_id, @spentGroup_name)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentGroup_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentGroup_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@spentGroup_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "spentGroup_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT spentGroup_id, spentGroup_name FROM dbo.spentGroupsTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.spentGroupsTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.spentGroupsTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.spentGroupsTableDataTable dataTable = new PSDatabase5DataSet.spentGroupsTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.spentGroupsTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "spentGroupsTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int spentGroup_id, string spentGroup_name) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(spentGroup_id));
            if ((spentGroup_name == null)) {
                throw new global::System.ArgumentNullException("spentGroup_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(spentGroup_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TaraznamehTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TaraznamehTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Taraznameh";
            tableMapping.ColumnMappings.Add("tar_id", "tar_id");
            tableMapping.ColumnMappings.Add("tar_indColTitle", "tar_indColTitle");
            tableMapping.ColumnMappings.Add("tar_indColPrice", "tar_indColPrice");
            tableMapping.ColumnMappings.Add("tar_indColIsItTitr", "tar_indColIsItTitr");
            tableMapping.ColumnMappings.Add("tar_creColTitle", "tar_creColTitle");
            tableMapping.ColumnMappings.Add("tar_creColPrice", "tar_creColPrice");
            tableMapping.ColumnMappings.Add("tar_creColIsItTitr", "tar_creColIsItTitr");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Taraznameh] WHERE (([tar_id] = @Original_tar_id) AND ((@IsNull_tar_indColTitle = 1 AND [tar_indColTitle] IS NULL) OR ([tar_indColTitle] = @Original_tar_indColTitle)) AND ((@IsNull_tar_indColPrice = 1 AND [tar_indColPrice] IS NULL) OR ([tar_indColPrice] = @Original_tar_indColPrice)) AND ((@IsNull_tar_indColIsItTitr = 1 AND [tar_indColIsItTitr] IS NULL) OR ([tar_indColIsItTitr] = @Original_tar_indColIsItTitr)) AND ((@IsNull_tar_creColTitle = 1 AND [tar_creColTitle] IS NULL) OR ([tar_creColTitle] = @Original_tar_creColTitle)) AND ((@IsNull_tar_creColPrice = 1 AND [tar_creColPrice] IS NULL) OR ([tar_creColPrice] = @Original_tar_creColPrice)) AND ((@IsNull_tar_creColIsItTitr = 1 AND [tar_creColIsItTitr] IS NULL) OR ([tar_creColIsItTitr] = @Original_tar_creColIsItTitr)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tar_indColTitle", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColTitle", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_indColTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tar_indColPrice", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColPrice", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_indColPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tar_indColIsItTitr", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColIsItTitr", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_indColIsItTitr", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColIsItTitr", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tar_creColTitle", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColTitle", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_creColTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tar_creColPrice", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColPrice", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_creColPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tar_creColIsItTitr", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColIsItTitr", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_creColIsItTitr", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColIsItTitr", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Taraznameh] ([tar_indColTitle], [tar_indColPrice], [tar_indColIsItTitr], [tar_creColTitle], [tar_creColPrice], [tar_creColIsItTitr]) VALUES (@tar_indColTitle, @tar_indColPrice, @tar_indColIsItTitr, @tar_creColTitle, @tar_creColPrice, @tar_creColIsItTitr);
SELECT tar_id, tar_indColTitle, tar_indColPrice, tar_indColIsItTitr, tar_creColTitle, tar_creColPrice, tar_creColIsItTitr FROM Taraznameh WHERE (tar_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tar_indColTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tar_indColPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tar_indColIsItTitr", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColIsItTitr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tar_creColTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tar_creColPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tar_creColIsItTitr", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColIsItTitr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Taraznameh] SET [tar_indColTitle] = @tar_indColTitle, [tar_indColPrice] = @tar_indColPrice, [tar_indColIsItTitr] = @tar_indColIsItTitr, [tar_creColTitle] = @tar_creColTitle, [tar_creColPrice] = @tar_creColPrice, [tar_creColIsItTitr] = @tar_creColIsItTitr WHERE (([tar_id] = @Original_tar_id) AND ((@IsNull_tar_indColTitle = 1 AND [tar_indColTitle] IS NULL) OR ([tar_indColTitle] = @Original_tar_indColTitle)) AND ((@IsNull_tar_indColPrice = 1 AND [tar_indColPrice] IS NULL) OR ([tar_indColPrice] = @Original_tar_indColPrice)) AND ((@IsNull_tar_indColIsItTitr = 1 AND [tar_indColIsItTitr] IS NULL) OR ([tar_indColIsItTitr] = @Original_tar_indColIsItTitr)) AND ((@IsNull_tar_creColTitle = 1 AND [tar_creColTitle] IS NULL) OR ([tar_creColTitle] = @Original_tar_creColTitle)) AND ((@IsNull_tar_creColPrice = 1 AND [tar_creColPrice] IS NULL) OR ([tar_creColPrice] = @Original_tar_creColPrice)) AND ((@IsNull_tar_creColIsItTitr = 1 AND [tar_creColIsItTitr] IS NULL) OR ([tar_creColIsItTitr] = @Original_tar_creColIsItTitr)));
SELECT tar_id, tar_indColTitle, tar_indColPrice, tar_indColIsItTitr, tar_creColTitle, tar_creColPrice, tar_creColIsItTitr FROM Taraznameh WHERE (tar_id = @tar_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tar_indColTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tar_indColPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tar_indColIsItTitr", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColIsItTitr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tar_creColTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tar_creColPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tar_creColIsItTitr", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColIsItTitr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tar_indColTitle", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColTitle", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_indColTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tar_indColPrice", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColPrice", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_indColPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tar_indColIsItTitr", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColIsItTitr", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_indColIsItTitr", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_indColIsItTitr", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tar_creColTitle", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColTitle", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_creColTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tar_creColPrice", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColPrice", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_creColPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_tar_creColIsItTitr", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColIsItTitr", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tar_creColIsItTitr", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tar_creColIsItTitr", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tar_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "tar_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT tar_id, tar_indColTitle, tar_indColPrice, tar_indColIsItTitr, tar_creColTi" +
                "tle, tar_creColPrice, tar_creColIsItTitr FROM dbo.Taraznameh";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.TaraznamehDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.TaraznamehDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.TaraznamehDataTable dataTable = new PSDatabase5DataSet.TaraznamehDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.TaraznamehDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "Taraznameh");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_tar_id, string Original_tar_indColTitle, global::System.Nullable<long> Original_tar_indColPrice, global::System.Nullable<bool> Original_tar_indColIsItTitr, string Original_tar_creColTitle, global::System.Nullable<long> Original_tar_creColPrice, global::System.Nullable<bool> Original_tar_creColIsItTitr) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_tar_id));
            if ((Original_tar_indColTitle == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_tar_indColTitle));
            }
            if ((Original_tar_indColPrice.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_tar_indColPrice.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_tar_indColIsItTitr.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_tar_indColIsItTitr.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_tar_creColTitle == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_tar_creColTitle));
            }
            if ((Original_tar_creColPrice.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((long)(Original_tar_creColPrice.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_tar_creColIsItTitr.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_tar_creColIsItTitr.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string tar_indColTitle, global::System.Nullable<long> tar_indColPrice, global::System.Nullable<bool> tar_indColIsItTitr, string tar_creColTitle, global::System.Nullable<long> tar_creColPrice, global::System.Nullable<bool> tar_creColIsItTitr) {
            if ((tar_indColTitle == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(tar_indColTitle));
            }
            if ((tar_indColPrice.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(tar_indColPrice.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((tar_indColIsItTitr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(tar_indColIsItTitr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((tar_creColTitle == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(tar_creColTitle));
            }
            if ((tar_creColPrice.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(tar_creColPrice.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((tar_creColIsItTitr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(tar_creColIsItTitr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string tar_indColTitle, global::System.Nullable<long> tar_indColPrice, global::System.Nullable<bool> tar_indColIsItTitr, string tar_creColTitle, global::System.Nullable<long> tar_creColPrice, global::System.Nullable<bool> tar_creColIsItTitr, int Original_tar_id, string Original_tar_indColTitle, global::System.Nullable<long> Original_tar_indColPrice, global::System.Nullable<bool> Original_tar_indColIsItTitr, string Original_tar_creColTitle, global::System.Nullable<long> Original_tar_creColPrice, global::System.Nullable<bool> Original_tar_creColIsItTitr, int tar_id) {
            if ((tar_indColTitle == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(tar_indColTitle));
            }
            if ((tar_indColPrice.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(tar_indColPrice.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((tar_indColIsItTitr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(tar_indColIsItTitr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((tar_creColTitle == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(tar_creColTitle));
            }
            if ((tar_creColPrice.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(tar_creColPrice.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((tar_creColIsItTitr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(tar_creColIsItTitr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_tar_id));
            if ((Original_tar_indColTitle == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_tar_indColTitle));
            }
            if ((Original_tar_indColPrice.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_tar_indColPrice.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_tar_indColIsItTitr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(Original_tar_indColIsItTitr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_tar_creColTitle == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_tar_creColTitle));
            }
            if ((Original_tar_creColPrice.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(Original_tar_creColPrice.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_tar_creColIsItTitr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((bool)(Original_tar_creColIsItTitr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(tar_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string tar_indColTitle, global::System.Nullable<long> tar_indColPrice, global::System.Nullable<bool> tar_indColIsItTitr, string tar_creColTitle, global::System.Nullable<long> tar_creColPrice, global::System.Nullable<bool> tar_creColIsItTitr, int Original_tar_id, string Original_tar_indColTitle, global::System.Nullable<long> Original_tar_indColPrice, global::System.Nullable<bool> Original_tar_indColIsItTitr, string Original_tar_creColTitle, global::System.Nullable<long> Original_tar_creColPrice, global::System.Nullable<bool> Original_tar_creColIsItTitr) {
            return this.Update(tar_indColTitle, tar_indColPrice, tar_indColIsItTitr, tar_creColTitle, tar_creColPrice, tar_creColIsItTitr, Original_tar_id, Original_tar_indColTitle, Original_tar_indColPrice, Original_tar_indColIsItTitr, Original_tar_creColTitle, Original_tar_creColPrice, Original_tar_creColIsItTitr, Original_tar_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class freeFormsTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public freeFormsTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "freeFormsTable";
            tableMapping.ColumnMappings.Add("freeForm_id", "freeForm_id");
            tableMapping.ColumnMappings.Add("freeForm_date", "freeForm_date");
            tableMapping.ColumnMappings.Add("personID", "personID");
            tableMapping.ColumnMappings.Add("freeForm_office", "freeForm_office");
            tableMapping.ColumnMappings.Add("freeForm_personalReason", "freeForm_personalReason");
            tableMapping.ColumnMappings.Add("freeForm_timeOut", "freeForm_timeOut");
            tableMapping.ColumnMappings.Add("freeForm_outTime", "freeForm_outTime");
            tableMapping.ColumnMappings.Add("freeForm_returnTime", "freeForm_returnTime");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [freeFormsTable] WHERE (([freeForm_id] = @Original_freeForm_id) AND ([freeForm_date] = @Original_freeForm_date) AND ([personID] = @Original_personID) AND ((@IsNull_freeForm_office = 1 AND [freeForm_office] IS NULL) OR ([freeForm_office] = @Original_freeForm_office)) AND ([freeForm_personalReason] = @Original_freeForm_personalReason) AND ([freeForm_timeOut] = @Original_freeForm_timeOut) AND ([freeForm_outTime] = @Original_freeForm_outTime) AND ((@IsNull_freeForm_returnTime = 1 AND [freeForm_returnTime] IS NULL) OR ([freeForm_returnTime] = @Original_freeForm_returnTime)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_freeForm_office", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_office", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_office", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_office", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_personalReason", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_personalReason", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_timeOut", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_timeOut", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_outTime", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_outTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_freeForm_returnTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_returnTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_returnTime", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_returnTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [freeFormsTable] ([freeForm_date], [personID], [freeForm_office], [freeForm_personalReason], [freeForm_timeOut], [freeForm_outTime], [freeForm_returnTime]) VALUES (@freeForm_date, @personID, @freeForm_office, @freeForm_personalReason, @freeForm_timeOut, @freeForm_outTime, @freeForm_returnTime);
SELECT freeForm_id, freeForm_date, personID, freeForm_office, freeForm_personalReason, freeForm_timeOut, freeForm_outTime, freeForm_returnTime FROM freeFormsTable WHERE (freeForm_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeForm_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeForm_office", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_office", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeForm_personalReason", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_personalReason", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeForm_timeOut", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_timeOut", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeForm_outTime", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_outTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeForm_returnTime", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_returnTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [freeFormsTable] SET [freeForm_date] = @freeForm_date, [personID] = @personID, [freeForm_office] = @freeForm_office, [freeForm_personalReason] = @freeForm_personalReason, [freeForm_timeOut] = @freeForm_timeOut, [freeForm_outTime] = @freeForm_outTime, [freeForm_returnTime] = @freeForm_returnTime WHERE (([freeForm_id] = @Original_freeForm_id) AND ([freeForm_date] = @Original_freeForm_date) AND ([personID] = @Original_personID) AND ((@IsNull_freeForm_office = 1 AND [freeForm_office] IS NULL) OR ([freeForm_office] = @Original_freeForm_office)) AND ([freeForm_personalReason] = @Original_freeForm_personalReason) AND ([freeForm_timeOut] = @Original_freeForm_timeOut) AND ([freeForm_outTime] = @Original_freeForm_outTime) AND ((@IsNull_freeForm_returnTime = 1 AND [freeForm_returnTime] IS NULL) OR ([freeForm_returnTime] = @Original_freeForm_returnTime)));
SELECT freeForm_id, freeForm_date, personID, freeForm_office, freeForm_personalReason, freeForm_timeOut, freeForm_outTime, freeForm_returnTime FROM freeFormsTable WHERE (freeForm_id = @freeForm_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeForm_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeForm_office", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_office", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeForm_personalReason", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_personalReason", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeForm_timeOut", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_timeOut", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeForm_outTime", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_outTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeForm_returnTime", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_returnTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_personID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "personID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_freeForm_office", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_office", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_office", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_office", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_personalReason", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_personalReason", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_timeOut", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_timeOut", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_outTime", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_outTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_freeForm_returnTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_returnTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_freeForm_returnTime", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_returnTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeForm_id", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "freeForm_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT freeForm_id, freeForm_date, personID, freeForm_office, freeForm_personalRe" +
                "ason, freeForm_timeOut, freeForm_outTime, freeForm_returnTime FROM freeFormsTabl" +
                "e";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.freeFormsTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.freeFormsTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.freeFormsTableDataTable dataTable = new PSDatabase5DataSet.freeFormsTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.freeFormsTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "freeFormsTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_freeForm_id, string Original_freeForm_date, int Original_personID, string Original_freeForm_office, bool Original_freeForm_personalReason, string Original_freeForm_timeOut, string Original_freeForm_outTime, string Original_freeForm_returnTime) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_freeForm_id));
            if ((Original_freeForm_date == null)) {
                throw new global::System.ArgumentNullException("Original_freeForm_date");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_freeForm_date));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_personID));
            if ((Original_freeForm_office == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_freeForm_office));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_freeForm_personalReason));
            if ((Original_freeForm_timeOut == null)) {
                throw new global::System.ArgumentNullException("Original_freeForm_timeOut");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_freeForm_timeOut));
            }
            if ((Original_freeForm_outTime == null)) {
                throw new global::System.ArgumentNullException("Original_freeForm_outTime");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_freeForm_outTime));
            }
            if ((Original_freeForm_returnTime == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_freeForm_returnTime));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string freeForm_date, int personID, string freeForm_office, bool freeForm_personalReason, string freeForm_timeOut, string freeForm_outTime, string freeForm_returnTime) {
            if ((freeForm_date == null)) {
                throw new global::System.ArgumentNullException("freeForm_date");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(freeForm_date));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(personID));
            if ((freeForm_office == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(freeForm_office));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(freeForm_personalReason));
            if ((freeForm_timeOut == null)) {
                throw new global::System.ArgumentNullException("freeForm_timeOut");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(freeForm_timeOut));
            }
            if ((freeForm_outTime == null)) {
                throw new global::System.ArgumentNullException("freeForm_outTime");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(freeForm_outTime));
            }
            if ((freeForm_returnTime == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(freeForm_returnTime));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string freeForm_date, 
                    int personID, 
                    string freeForm_office, 
                    bool freeForm_personalReason, 
                    string freeForm_timeOut, 
                    string freeForm_outTime, 
                    string freeForm_returnTime, 
                    long Original_freeForm_id, 
                    string Original_freeForm_date, 
                    int Original_personID, 
                    string Original_freeForm_office, 
                    bool Original_freeForm_personalReason, 
                    string Original_freeForm_timeOut, 
                    string Original_freeForm_outTime, 
                    string Original_freeForm_returnTime, 
                    long freeForm_id) {
            if ((freeForm_date == null)) {
                throw new global::System.ArgumentNullException("freeForm_date");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(freeForm_date));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(personID));
            if ((freeForm_office == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(freeForm_office));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(freeForm_personalReason));
            if ((freeForm_timeOut == null)) {
                throw new global::System.ArgumentNullException("freeForm_timeOut");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(freeForm_timeOut));
            }
            if ((freeForm_outTime == null)) {
                throw new global::System.ArgumentNullException("freeForm_outTime");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(freeForm_outTime));
            }
            if ((freeForm_returnTime == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(freeForm_returnTime));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(Original_freeForm_id));
            if ((Original_freeForm_date == null)) {
                throw new global::System.ArgumentNullException("Original_freeForm_date");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_freeForm_date));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_personID));
            if ((Original_freeForm_office == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_freeForm_office));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(Original_freeForm_personalReason));
            if ((Original_freeForm_timeOut == null)) {
                throw new global::System.ArgumentNullException("Original_freeForm_timeOut");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_freeForm_timeOut));
            }
            if ((Original_freeForm_outTime == null)) {
                throw new global::System.ArgumentNullException("Original_freeForm_outTime");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_freeForm_outTime));
            }
            if ((Original_freeForm_returnTime == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_freeForm_returnTime));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(freeForm_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string freeForm_date, int personID, string freeForm_office, bool freeForm_personalReason, string freeForm_timeOut, string freeForm_outTime, string freeForm_returnTime, long Original_freeForm_id, string Original_freeForm_date, int Original_personID, string Original_freeForm_office, bool Original_freeForm_personalReason, string Original_freeForm_timeOut, string Original_freeForm_outTime, string Original_freeForm_returnTime) {
            return this.Update(freeForm_date, personID, freeForm_office, freeForm_personalReason, freeForm_timeOut, freeForm_outTime, freeForm_returnTime, Original_freeForm_id, Original_freeForm_date, Original_personID, Original_freeForm_office, Original_freeForm_personalReason, Original_freeForm_timeOut, Original_freeForm_outTime, Original_freeForm_returnTime, Original_freeForm_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class viw_freeFormsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public viw_freeFormsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "viw_freeForms";
            tableMapping.ColumnMappings.Add("personFamilyAndName", "personFamilyAndName");
            tableMapping.ColumnMappings.Add("freeForm_id", "freeForm_id");
            tableMapping.ColumnMappings.Add("freeForm_date", "freeForm_date");
            tableMapping.ColumnMappings.Add("freeForm_office", "freeForm_office");
            tableMapping.ColumnMappings.Add("freeForm_personalReason", "freeForm_personalReason");
            tableMapping.ColumnMappings.Add("freeForm_timeOut", "freeForm_timeOut");
            tableMapping.ColumnMappings.Add("freeForm_outTime", "freeForm_outTime");
            tableMapping.ColumnMappings.Add("freeForm_returnTime", "freeForm_returnTime");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT personFamilyAndName, freeForm_id, freeForm_date, freeForm_office, freeForm" +
                "_personalReason, freeForm_timeOut, freeForm_outTime, freeForm_returnTime FROM db" +
                "o.viw_freeForms";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.viw_freeFormsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.viw_freeFormsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.viw_freeFormsDataTable dataTable = new PSDatabase5DataSet.viw_freeFormsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class viw_ledgerRemainsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public viw_ledgerRemainsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "viw_ledgerRemains";
            tableMapping.ColumnMappings.Add("spentMasterID", "spentMasterID");
            tableMapping.ColumnMappings.Add("spentMasterName", "spentMasterName");
            tableMapping.ColumnMappings.Add("indTotal", "indTotal");
            tableMapping.ColumnMappings.Add("creTotal", "creTotal");
            tableMapping.ColumnMappings.Add("detailID", "detailID");
            tableMapping.ColumnMappings.Add("detail_name", "detail_name");
            tableMapping.ColumnMappings.Add("reportTitle", "reportTitle");
            tableMapping.ColumnMappings.Add("para1", "para1");
            tableMapping.ColumnMappings.Add("para2", "para2");
            tableMapping.ColumnMappings.Add("para3", "para3");
            tableMapping.ColumnMappings.Add("accDoc_date", "accDoc_date");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT spentMasterID, spentMasterName, indTotal, creTotal, detailID, detail_name," +
                " para1, para2, para3, reportTitle, accDoc_date FROM viw_ledgerRemains";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.viw_ledgerRemainsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.viw_ledgerRemainsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.viw_ledgerRemainsDataTable dataTable = new PSDatabase5DataSet.viw_ledgerRemainsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class viw_detailsCodesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public viw_detailsCodesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "viw_detailsCodes";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("title", "title");
            tableMapping.ColumnMappings.Add("kind", "kind");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, title, kind FROM viw_detailsCodes";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.viw_detailsCodesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.viw_detailsCodesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.viw_detailsCodesDataTable dataTable = new PSDatabase5DataSet.viw_detailsCodesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class usersTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public usersTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "usersTable";
            tableMapping.ColumnMappings.Add("user_id", "user_id");
            tableMapping.ColumnMappings.Add("user_name", "user_name");
            tableMapping.ColumnMappings.Add("user_picIndex", "user_picIndex");
            tableMapping.ColumnMappings.Add("user_picPath", "user_picPath");
            tableMapping.ColumnMappings.Add("user_limitString", "user_limitString");
            tableMapping.ColumnMappings.Add("user_limitType", "user_limitType");
            tableMapping.ColumnMappings.Add("user_password", "user_password");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [usersTable] ([user_name], [user_picIndex], [user_picPath], [user_lim" +
                "itString], [user_limitType], [user_password]) VALUES (@user_name, @user_picIndex" +
                ", @user_picPath, @user_limitString, @user_limitType, @user_password)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_picIndex", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_picIndex", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_picPath", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_picPath", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_limitString", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_limitString", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_limitType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_limitType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_password", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cactus_PS_.Properties.Settings.Default.PSDatabase5ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT user_id, user_name, user_picIndex, user_picPath, user_limitString, user_li" +
                "mitType, user_password FROM usersTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PSDatabase5DataSet.usersTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PSDatabase5DataSet.usersTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PSDatabase5DataSet.usersTableDataTable dataTable = new PSDatabase5DataSet.usersTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet.usersTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PSDatabase5DataSet dataSet) {
            return this.Adapter.Update(dataSet, "usersTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string user_name, int user_picIndex, string user_picPath, string user_limitString, int user_limitType, string user_password) {
            if ((user_name == null)) {
                throw new global::System.ArgumentNullException("user_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(user_name));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(user_picIndex));
            if ((user_picPath == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(user_picPath));
            }
            if ((user_limitString == null)) {
                throw new global::System.ArgumentNullException("user_limitString");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(user_limitString));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(user_limitType));
            if ((user_password == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(user_password));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private AccountsTableTableAdapter _accountsTableTableAdapter;
        
        private BanksTableTableAdapter _banksTableTableAdapter;
        
        private chequesTableTableAdapter _chequesTableTableAdapter;
        
        private personsTableTableAdapter _personsTableTableAdapter;
        
        private projectsPersonsTableAdapter _projectsPersonsTableAdapter;
        
        private projectsTableTableAdapter _projectsTableTableAdapter;
        
        private spentDefTableAdapter _spentDefTableAdapter;
        
        private spentMasterTableAdapter _spentMasterTableAdapter;
        
        private detractDefTableAdapter _detractDefTableAdapter;
        
        private pensionDefTableAdapter _pensionDefTableAdapter;
        
        private pensionsTableTableAdapter _pensionsTableTableAdapter;
        
        private docsTableTableAdapter _docsTableTableAdapter;
        
        private accountTypesTableTableAdapter _accountTypesTableTableAdapter;
        
        private AccountingDocsTableAdapter _accountingDocsTableAdapter;
        
        private accDocEventsTableTableAdapter _accDocEventsTableTableAdapter;
        
        private invoiceItemsTableTableAdapter _invoiceItemsTableTableAdapter;
        
        private invoicesTableTableAdapter _invoicesTableTableAdapter;
        
        private detailsTableTableAdapter _detailsTableTableAdapter;
        
        private spentGroupsTableTableAdapter _spentGroupsTableTableAdapter;
        
        private TaraznamehTableAdapter _taraznamehTableAdapter;
        
        private freeFormsTableTableAdapter _freeFormsTableTableAdapter;
        
        private usersTableTableAdapter _usersTableTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public AccountsTableTableAdapter AccountsTableTableAdapter {
            get {
                return this._accountsTableTableAdapter;
            }
            set {
                this._accountsTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public BanksTableTableAdapter BanksTableTableAdapter {
            get {
                return this._banksTableTableAdapter;
            }
            set {
                this._banksTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public chequesTableTableAdapter chequesTableTableAdapter {
            get {
                return this._chequesTableTableAdapter;
            }
            set {
                this._chequesTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public personsTableTableAdapter personsTableTableAdapter {
            get {
                return this._personsTableTableAdapter;
            }
            set {
                this._personsTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public projectsPersonsTableAdapter projectsPersonsTableAdapter {
            get {
                return this._projectsPersonsTableAdapter;
            }
            set {
                this._projectsPersonsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public projectsTableTableAdapter projectsTableTableAdapter {
            get {
                return this._projectsTableTableAdapter;
            }
            set {
                this._projectsTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public spentDefTableAdapter spentDefTableAdapter {
            get {
                return this._spentDefTableAdapter;
            }
            set {
                this._spentDefTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public spentMasterTableAdapter spentMasterTableAdapter {
            get {
                return this._spentMasterTableAdapter;
            }
            set {
                this._spentMasterTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public detractDefTableAdapter detractDefTableAdapter {
            get {
                return this._detractDefTableAdapter;
            }
            set {
                this._detractDefTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public pensionDefTableAdapter pensionDefTableAdapter {
            get {
                return this._pensionDefTableAdapter;
            }
            set {
                this._pensionDefTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public pensionsTableTableAdapter pensionsTableTableAdapter {
            get {
                return this._pensionsTableTableAdapter;
            }
            set {
                this._pensionsTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public docsTableTableAdapter docsTableTableAdapter {
            get {
                return this._docsTableTableAdapter;
            }
            set {
                this._docsTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public accountTypesTableTableAdapter accountTypesTableTableAdapter {
            get {
                return this._accountTypesTableTableAdapter;
            }
            set {
                this._accountTypesTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public AccountingDocsTableAdapter AccountingDocsTableAdapter {
            get {
                return this._accountingDocsTableAdapter;
            }
            set {
                this._accountingDocsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public accDocEventsTableTableAdapter accDocEventsTableTableAdapter {
            get {
                return this._accDocEventsTableTableAdapter;
            }
            set {
                this._accDocEventsTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public invoiceItemsTableTableAdapter invoiceItemsTableTableAdapter {
            get {
                return this._invoiceItemsTableTableAdapter;
            }
            set {
                this._invoiceItemsTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public invoicesTableTableAdapter invoicesTableTableAdapter {
            get {
                return this._invoicesTableTableAdapter;
            }
            set {
                this._invoicesTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public detailsTableTableAdapter detailsTableTableAdapter {
            get {
                return this._detailsTableTableAdapter;
            }
            set {
                this._detailsTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public spentGroupsTableTableAdapter spentGroupsTableTableAdapter {
            get {
                return this._spentGroupsTableTableAdapter;
            }
            set {
                this._spentGroupsTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TaraznamehTableAdapter TaraznamehTableAdapter {
            get {
                return this._taraznamehTableAdapter;
            }
            set {
                this._taraznamehTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public freeFormsTableTableAdapter freeFormsTableTableAdapter {
            get {
                return this._freeFormsTableTableAdapter;
            }
            set {
                this._freeFormsTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public usersTableTableAdapter usersTableTableAdapter {
            get {
                return this._usersTableTableAdapter;
            }
            set {
                this._usersTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._accountsTableTableAdapter != null) 
                            && (this._accountsTableTableAdapter.Connection != null))) {
                    return this._accountsTableTableAdapter.Connection;
                }
                if (((this._banksTableTableAdapter != null) 
                            && (this._banksTableTableAdapter.Connection != null))) {
                    return this._banksTableTableAdapter.Connection;
                }
                if (((this._chequesTableTableAdapter != null) 
                            && (this._chequesTableTableAdapter.Connection != null))) {
                    return this._chequesTableTableAdapter.Connection;
                }
                if (((this._personsTableTableAdapter != null) 
                            && (this._personsTableTableAdapter.Connection != null))) {
                    return this._personsTableTableAdapter.Connection;
                }
                if (((this._projectsPersonsTableAdapter != null) 
                            && (this._projectsPersonsTableAdapter.Connection != null))) {
                    return this._projectsPersonsTableAdapter.Connection;
                }
                if (((this._projectsTableTableAdapter != null) 
                            && (this._projectsTableTableAdapter.Connection != null))) {
                    return this._projectsTableTableAdapter.Connection;
                }
                if (((this._spentDefTableAdapter != null) 
                            && (this._spentDefTableAdapter.Connection != null))) {
                    return this._spentDefTableAdapter.Connection;
                }
                if (((this._spentMasterTableAdapter != null) 
                            && (this._spentMasterTableAdapter.Connection != null))) {
                    return this._spentMasterTableAdapter.Connection;
                }
                if (((this._detractDefTableAdapter != null) 
                            && (this._detractDefTableAdapter.Connection != null))) {
                    return this._detractDefTableAdapter.Connection;
                }
                if (((this._pensionDefTableAdapter != null) 
                            && (this._pensionDefTableAdapter.Connection != null))) {
                    return this._pensionDefTableAdapter.Connection;
                }
                if (((this._pensionsTableTableAdapter != null) 
                            && (this._pensionsTableTableAdapter.Connection != null))) {
                    return this._pensionsTableTableAdapter.Connection;
                }
                if (((this._docsTableTableAdapter != null) 
                            && (this._docsTableTableAdapter.Connection != null))) {
                    return this._docsTableTableAdapter.Connection;
                }
                if (((this._accountTypesTableTableAdapter != null) 
                            && (this._accountTypesTableTableAdapter.Connection != null))) {
                    return this._accountTypesTableTableAdapter.Connection;
                }
                if (((this._accountingDocsTableAdapter != null) 
                            && (this._accountingDocsTableAdapter.Connection != null))) {
                    return this._accountingDocsTableAdapter.Connection;
                }
                if (((this._accDocEventsTableTableAdapter != null) 
                            && (this._accDocEventsTableTableAdapter.Connection != null))) {
                    return this._accDocEventsTableTableAdapter.Connection;
                }
                if (((this._invoiceItemsTableTableAdapter != null) 
                            && (this._invoiceItemsTableTableAdapter.Connection != null))) {
                    return this._invoiceItemsTableTableAdapter.Connection;
                }
                if (((this._invoicesTableTableAdapter != null) 
                            && (this._invoicesTableTableAdapter.Connection != null))) {
                    return this._invoicesTableTableAdapter.Connection;
                }
                if (((this._detailsTableTableAdapter != null) 
                            && (this._detailsTableTableAdapter.Connection != null))) {
                    return this._detailsTableTableAdapter.Connection;
                }
                if (((this._spentGroupsTableTableAdapter != null) 
                            && (this._spentGroupsTableTableAdapter.Connection != null))) {
                    return this._spentGroupsTableTableAdapter.Connection;
                }
                if (((this._taraznamehTableAdapter != null) 
                            && (this._taraznamehTableAdapter.Connection != null))) {
                    return this._taraznamehTableAdapter.Connection;
                }
                if (((this._freeFormsTableTableAdapter != null) 
                            && (this._freeFormsTableTableAdapter.Connection != null))) {
                    return this._freeFormsTableTableAdapter.Connection;
                }
                if (((this._usersTableTableAdapter != null) 
                            && (this._usersTableTableAdapter.Connection != null))) {
                    return this._usersTableTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._accountsTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._banksTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._chequesTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._personsTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._projectsPersonsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._projectsTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._spentDefTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._spentMasterTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._detractDefTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pensionDefTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pensionsTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._docsTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._accountTypesTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._accountingDocsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._accDocEventsTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._invoiceItemsTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._invoicesTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._detailsTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._spentGroupsTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._taraznamehTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._freeFormsTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._usersTableTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(PSDatabase5DataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._personsTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.personsTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._personsTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._spentGroupsTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.spentGroupsTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._spentGroupsTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._projectsTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.projectsTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._projectsTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._invoicesTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.invoicesTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._invoicesTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._spentMasterTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.spentMaster.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._spentMasterTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pensionsTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.pensionsTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pensionsTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._accountsTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AccountsTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._accountsTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._banksTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.BanksTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._banksTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._detailsTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.detailsTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._detailsTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._accountingDocsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AccountingDocs.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._accountingDocsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._spentDefTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.spentDef.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._spentDefTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._usersTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.usersTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._usersTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._taraznamehTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Taraznameh.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._taraznamehTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._freeFormsTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.freeFormsTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._freeFormsTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._invoiceItemsTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.invoiceItemsTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._invoiceItemsTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._docsTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.docsTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._docsTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pensionDefTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.pensionDef.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pensionDefTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._chequesTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.chequesTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._chequesTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._projectsPersonsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.projectsPersons.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._projectsPersonsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._detractDefTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.detractDef.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._detractDefTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._accountTypesTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.accountTypesTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._accountTypesTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._accDocEventsTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.accDocEventsTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._accDocEventsTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(PSDatabase5DataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._personsTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.personsTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._personsTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._spentGroupsTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.spentGroupsTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._spentGroupsTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._projectsTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.projectsTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._projectsTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._invoicesTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.invoicesTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._invoicesTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._spentMasterTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.spentMaster.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._spentMasterTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pensionsTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.pensionsTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pensionsTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._accountsTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AccountsTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._accountsTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._banksTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.BanksTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._banksTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._detailsTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.detailsTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._detailsTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._accountingDocsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AccountingDocs.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._accountingDocsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._spentDefTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.spentDef.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._spentDefTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._usersTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.usersTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._usersTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._taraznamehTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Taraznameh.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._taraznamehTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._freeFormsTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.freeFormsTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._freeFormsTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._invoiceItemsTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.invoiceItemsTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._invoiceItemsTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._docsTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.docsTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._docsTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pensionDefTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.pensionDef.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pensionDefTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._chequesTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.chequesTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._chequesTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._projectsPersonsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.projectsPersons.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._projectsPersonsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._detractDefTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.detractDef.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._detractDefTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._accountTypesTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.accountTypesTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._accountTypesTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._accDocEventsTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.accDocEventsTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._accDocEventsTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(PSDatabase5DataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._accDocEventsTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.accDocEventsTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._accDocEventsTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._accountTypesTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.accountTypesTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._accountTypesTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._detractDefTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.detractDef.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._detractDefTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._projectsPersonsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.projectsPersons.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._projectsPersonsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._chequesTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.chequesTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._chequesTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pensionDefTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.pensionDef.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pensionDefTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._docsTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.docsTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._docsTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._invoiceItemsTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.invoiceItemsTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._invoiceItemsTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._freeFormsTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.freeFormsTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._freeFormsTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._taraznamehTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Taraznameh.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._taraznamehTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._usersTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.usersTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._usersTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._spentDefTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.spentDef.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._spentDefTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._accountingDocsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AccountingDocs.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._accountingDocsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._detailsTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.detailsTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._detailsTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._banksTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.BanksTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._banksTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._accountsTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AccountsTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._accountsTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pensionsTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.pensionsTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pensionsTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._spentMasterTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.spentMaster.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._spentMasterTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._invoicesTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.invoicesTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._invoicesTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._projectsTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.projectsTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._projectsTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._spentGroupsTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.spentGroupsTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._spentGroupsTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._personsTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.personsTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._personsTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(PSDatabase5DataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._accountsTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._accountsTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._banksTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._banksTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._chequesTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._chequesTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._personsTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._personsTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._projectsPersonsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._projectsPersonsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._projectsTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._projectsTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._spentDefTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._spentDefTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._spentMasterTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._spentMasterTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._detractDefTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._detractDefTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pensionDefTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pensionDefTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pensionsTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pensionsTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._docsTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._docsTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._accountTypesTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._accountTypesTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._accountingDocsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._accountingDocsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._accDocEventsTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._accDocEventsTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._invoiceItemsTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._invoiceItemsTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._invoicesTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._invoicesTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._detailsTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._detailsTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._spentGroupsTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._spentGroupsTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._taraznamehTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._taraznamehTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._freeFormsTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._freeFormsTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._usersTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._usersTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._accountsTableTableAdapter != null)) {
                    revertConnections.Add(this._accountsTableTableAdapter, this._accountsTableTableAdapter.Connection);
                    this._accountsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._accountsTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._accountsTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._accountsTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._accountsTableTableAdapter.Adapter);
                    }
                }
                if ((this._banksTableTableAdapter != null)) {
                    revertConnections.Add(this._banksTableTableAdapter, this._banksTableTableAdapter.Connection);
                    this._banksTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._banksTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._banksTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._banksTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._banksTableTableAdapter.Adapter);
                    }
                }
                if ((this._chequesTableTableAdapter != null)) {
                    revertConnections.Add(this._chequesTableTableAdapter, this._chequesTableTableAdapter.Connection);
                    this._chequesTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._chequesTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._chequesTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._chequesTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._chequesTableTableAdapter.Adapter);
                    }
                }
                if ((this._personsTableTableAdapter != null)) {
                    revertConnections.Add(this._personsTableTableAdapter, this._personsTableTableAdapter.Connection);
                    this._personsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._personsTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._personsTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._personsTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._personsTableTableAdapter.Adapter);
                    }
                }
                if ((this._projectsPersonsTableAdapter != null)) {
                    revertConnections.Add(this._projectsPersonsTableAdapter, this._projectsPersonsTableAdapter.Connection);
                    this._projectsPersonsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._projectsPersonsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._projectsPersonsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._projectsPersonsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._projectsPersonsTableAdapter.Adapter);
                    }
                }
                if ((this._projectsTableTableAdapter != null)) {
                    revertConnections.Add(this._projectsTableTableAdapter, this._projectsTableTableAdapter.Connection);
                    this._projectsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._projectsTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._projectsTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._projectsTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._projectsTableTableAdapter.Adapter);
                    }
                }
                if ((this._spentDefTableAdapter != null)) {
                    revertConnections.Add(this._spentDefTableAdapter, this._spentDefTableAdapter.Connection);
                    this._spentDefTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._spentDefTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._spentDefTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._spentDefTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._spentDefTableAdapter.Adapter);
                    }
                }
                if ((this._spentMasterTableAdapter != null)) {
                    revertConnections.Add(this._spentMasterTableAdapter, this._spentMasterTableAdapter.Connection);
                    this._spentMasterTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._spentMasterTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._spentMasterTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._spentMasterTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._spentMasterTableAdapter.Adapter);
                    }
                }
                if ((this._detractDefTableAdapter != null)) {
                    revertConnections.Add(this._detractDefTableAdapter, this._detractDefTableAdapter.Connection);
                    this._detractDefTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._detractDefTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._detractDefTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._detractDefTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._detractDefTableAdapter.Adapter);
                    }
                }
                if ((this._pensionDefTableAdapter != null)) {
                    revertConnections.Add(this._pensionDefTableAdapter, this._pensionDefTableAdapter.Connection);
                    this._pensionDefTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pensionDefTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pensionDefTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pensionDefTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pensionDefTableAdapter.Adapter);
                    }
                }
                if ((this._pensionsTableTableAdapter != null)) {
                    revertConnections.Add(this._pensionsTableTableAdapter, this._pensionsTableTableAdapter.Connection);
                    this._pensionsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pensionsTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pensionsTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pensionsTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pensionsTableTableAdapter.Adapter);
                    }
                }
                if ((this._docsTableTableAdapter != null)) {
                    revertConnections.Add(this._docsTableTableAdapter, this._docsTableTableAdapter.Connection);
                    this._docsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._docsTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._docsTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._docsTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._docsTableTableAdapter.Adapter);
                    }
                }
                if ((this._accountTypesTableTableAdapter != null)) {
                    revertConnections.Add(this._accountTypesTableTableAdapter, this._accountTypesTableTableAdapter.Connection);
                    this._accountTypesTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._accountTypesTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._accountTypesTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._accountTypesTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._accountTypesTableTableAdapter.Adapter);
                    }
                }
                if ((this._accountingDocsTableAdapter != null)) {
                    revertConnections.Add(this._accountingDocsTableAdapter, this._accountingDocsTableAdapter.Connection);
                    this._accountingDocsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._accountingDocsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._accountingDocsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._accountingDocsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._accountingDocsTableAdapter.Adapter);
                    }
                }
                if ((this._accDocEventsTableTableAdapter != null)) {
                    revertConnections.Add(this._accDocEventsTableTableAdapter, this._accDocEventsTableTableAdapter.Connection);
                    this._accDocEventsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._accDocEventsTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._accDocEventsTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._accDocEventsTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._accDocEventsTableTableAdapter.Adapter);
                    }
                }
                if ((this._invoiceItemsTableTableAdapter != null)) {
                    revertConnections.Add(this._invoiceItemsTableTableAdapter, this._invoiceItemsTableTableAdapter.Connection);
                    this._invoiceItemsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._invoiceItemsTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._invoiceItemsTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._invoiceItemsTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._invoiceItemsTableTableAdapter.Adapter);
                    }
                }
                if ((this._invoicesTableTableAdapter != null)) {
                    revertConnections.Add(this._invoicesTableTableAdapter, this._invoicesTableTableAdapter.Connection);
                    this._invoicesTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._invoicesTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._invoicesTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._invoicesTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._invoicesTableTableAdapter.Adapter);
                    }
                }
                if ((this._detailsTableTableAdapter != null)) {
                    revertConnections.Add(this._detailsTableTableAdapter, this._detailsTableTableAdapter.Connection);
                    this._detailsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._detailsTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._detailsTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._detailsTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._detailsTableTableAdapter.Adapter);
                    }
                }
                if ((this._spentGroupsTableTableAdapter != null)) {
                    revertConnections.Add(this._spentGroupsTableTableAdapter, this._spentGroupsTableTableAdapter.Connection);
                    this._spentGroupsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._spentGroupsTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._spentGroupsTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._spentGroupsTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._spentGroupsTableTableAdapter.Adapter);
                    }
                }
                if ((this._taraznamehTableAdapter != null)) {
                    revertConnections.Add(this._taraznamehTableAdapter, this._taraznamehTableAdapter.Connection);
                    this._taraznamehTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._taraznamehTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._taraznamehTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._taraznamehTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._taraznamehTableAdapter.Adapter);
                    }
                }
                if ((this._freeFormsTableTableAdapter != null)) {
                    revertConnections.Add(this._freeFormsTableTableAdapter, this._freeFormsTableTableAdapter.Connection);
                    this._freeFormsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._freeFormsTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._freeFormsTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._freeFormsTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._freeFormsTableTableAdapter.Adapter);
                    }
                }
                if ((this._usersTableTableAdapter != null)) {
                    revertConnections.Add(this._usersTableTableAdapter, this._usersTableTableAdapter.Connection);
                    this._usersTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._usersTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._usersTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._usersTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._usersTableTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._accountsTableTableAdapter != null)) {
                    this._accountsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._accountsTableTableAdapter]));
                    this._accountsTableTableAdapter.Transaction = null;
                }
                if ((this._banksTableTableAdapter != null)) {
                    this._banksTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._banksTableTableAdapter]));
                    this._banksTableTableAdapter.Transaction = null;
                }
                if ((this._chequesTableTableAdapter != null)) {
                    this._chequesTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._chequesTableTableAdapter]));
                    this._chequesTableTableAdapter.Transaction = null;
                }
                if ((this._personsTableTableAdapter != null)) {
                    this._personsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._personsTableTableAdapter]));
                    this._personsTableTableAdapter.Transaction = null;
                }
                if ((this._projectsPersonsTableAdapter != null)) {
                    this._projectsPersonsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._projectsPersonsTableAdapter]));
                    this._projectsPersonsTableAdapter.Transaction = null;
                }
                if ((this._projectsTableTableAdapter != null)) {
                    this._projectsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._projectsTableTableAdapter]));
                    this._projectsTableTableAdapter.Transaction = null;
                }
                if ((this._spentDefTableAdapter != null)) {
                    this._spentDefTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._spentDefTableAdapter]));
                    this._spentDefTableAdapter.Transaction = null;
                }
                if ((this._spentMasterTableAdapter != null)) {
                    this._spentMasterTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._spentMasterTableAdapter]));
                    this._spentMasterTableAdapter.Transaction = null;
                }
                if ((this._detractDefTableAdapter != null)) {
                    this._detractDefTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._detractDefTableAdapter]));
                    this._detractDefTableAdapter.Transaction = null;
                }
                if ((this._pensionDefTableAdapter != null)) {
                    this._pensionDefTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pensionDefTableAdapter]));
                    this._pensionDefTableAdapter.Transaction = null;
                }
                if ((this._pensionsTableTableAdapter != null)) {
                    this._pensionsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pensionsTableTableAdapter]));
                    this._pensionsTableTableAdapter.Transaction = null;
                }
                if ((this._docsTableTableAdapter != null)) {
                    this._docsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._docsTableTableAdapter]));
                    this._docsTableTableAdapter.Transaction = null;
                }
                if ((this._accountTypesTableTableAdapter != null)) {
                    this._accountTypesTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._accountTypesTableTableAdapter]));
                    this._accountTypesTableTableAdapter.Transaction = null;
                }
                if ((this._accountingDocsTableAdapter != null)) {
                    this._accountingDocsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._accountingDocsTableAdapter]));
                    this._accountingDocsTableAdapter.Transaction = null;
                }
                if ((this._accDocEventsTableTableAdapter != null)) {
                    this._accDocEventsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._accDocEventsTableTableAdapter]));
                    this._accDocEventsTableTableAdapter.Transaction = null;
                }
                if ((this._invoiceItemsTableTableAdapter != null)) {
                    this._invoiceItemsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._invoiceItemsTableTableAdapter]));
                    this._invoiceItemsTableTableAdapter.Transaction = null;
                }
                if ((this._invoicesTableTableAdapter != null)) {
                    this._invoicesTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._invoicesTableTableAdapter]));
                    this._invoicesTableTableAdapter.Transaction = null;
                }
                if ((this._detailsTableTableAdapter != null)) {
                    this._detailsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._detailsTableTableAdapter]));
                    this._detailsTableTableAdapter.Transaction = null;
                }
                if ((this._spentGroupsTableTableAdapter != null)) {
                    this._spentGroupsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._spentGroupsTableTableAdapter]));
                    this._spentGroupsTableTableAdapter.Transaction = null;
                }
                if ((this._taraznamehTableAdapter != null)) {
                    this._taraznamehTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._taraznamehTableAdapter]));
                    this._taraznamehTableAdapter.Transaction = null;
                }
                if ((this._freeFormsTableTableAdapter != null)) {
                    this._freeFormsTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._freeFormsTableTableAdapter]));
                    this._freeFormsTableTableAdapter.Transaction = null;
                }
                if ((this._usersTableTableAdapter != null)) {
                    this._usersTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._usersTableTableAdapter]));
                    this._usersTableTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591